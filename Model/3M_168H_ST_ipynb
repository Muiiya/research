{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3"},"colab":{"name":"3M_168H_ST_ipynb","provenance":[],"collapsed_sections":[],"machine_shape":"hm"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"axF7OBsg-AJs"},"source":["#Transformer"]},{"cell_type":"code","metadata":{"id":"MiFdiUPY8CAr","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ce18fe9b-d5d1-4e1b-a045-0dcfd65810b3"},"source":["from google.colab import drive\n","drive.mount('/content/drive') "],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"PtFKWnKP7mKd","colab":{"base_uri":"https://localhost:8080/","height":252},"outputId":"627ed083-9d6c-458e-9e34-56f7ffed0e0c"},"source":["# informer, ARIMA, Prophet, LSTMa와는 다른 형식의 CSV를 사용한다.(Version2)\n","\n","!pip install pandas\n","\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version2.csv', encoding='cp949')\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.1.5)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas) (2018.9)\n","Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.19.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>날짜</th>\n","      <th>2021-05-01 0:00</th>\n","      <th>2021-05-01 1:00</th>\n","      <th>2021-05-01 2:00</th>\n","      <th>2021-05-01 3:00</th>\n","      <th>2021-05-01 4:00</th>\n","      <th>2021-05-01 5:00</th>\n","      <th>2021-05-01 6:00</th>\n","      <th>2021-05-01 7:00</th>\n","      <th>2021-05-01 8:00</th>\n","      <th>2021-05-01 9:00</th>\n","      <th>2021-05-01 10:00</th>\n","      <th>2021-05-01 11:00</th>\n","      <th>2021-05-01 12:00</th>\n","      <th>2021-05-01 13:00</th>\n","      <th>2021-05-01 14:00</th>\n","      <th>2021-05-01 15:00</th>\n","      <th>2021-05-01 16:00</th>\n","      <th>2021-05-01 17:00</th>\n","      <th>2021-05-01 18:00</th>\n","      <th>2021-05-01 19:00</th>\n","      <th>2021-05-01 20:00</th>\n","      <th>2021-05-01 21:00</th>\n","      <th>2021-05-01 22:00</th>\n","      <th>2021-05-01 23:00</th>\n","      <th>2021-05-02 0:00</th>\n","      <th>2021-05-02 1:00</th>\n","      <th>2021-05-02 2:00</th>\n","      <th>2021-05-02 3:00</th>\n","      <th>2021-05-02 4:00</th>\n","      <th>2021-05-02 5:00</th>\n","      <th>2021-05-02 6:00</th>\n","      <th>2021-05-02 7:00</th>\n","      <th>2021-05-02 8:00</th>\n","      <th>2021-05-02 9:00</th>\n","      <th>2021-05-02 10:00</th>\n","      <th>2021-05-02 11:00</th>\n","      <th>2021-05-02 12:00</th>\n","      <th>2021-05-02 13:00</th>\n","      <th>2021-05-02 14:00</th>\n","      <th>...</th>\n","      <th>2021-07-29 9:00</th>\n","      <th>2021-07-29 10:00</th>\n","      <th>2021-07-29 11:00</th>\n","      <th>2021-07-29 12:00</th>\n","      <th>2021-07-29 13:00</th>\n","      <th>2021-07-29 14:00</th>\n","      <th>2021-07-29 15:00</th>\n","      <th>2021-07-29 16:00</th>\n","      <th>2021-07-29 17:00</th>\n","      <th>2021-07-29 18:00</th>\n","      <th>2021-07-29 19:00</th>\n","      <th>2021-07-29 20:00</th>\n","      <th>2021-07-29 21:00</th>\n","      <th>2021-07-29 22:00</th>\n","      <th>2021-07-29 23:00</th>\n","      <th>2021-07-30 0:00</th>\n","      <th>2021-07-30 1:00</th>\n","      <th>2021-07-30 2:00</th>\n","      <th>2021-07-30 3:00</th>\n","      <th>2021-07-30 4:00</th>\n","      <th>2021-07-30 5:00</th>\n","      <th>2021-07-30 6:00</th>\n","      <th>2021-07-30 7:00</th>\n","      <th>2021-07-30 8:00</th>\n","      <th>2021-07-30 9:00</th>\n","      <th>2021-07-30 10:00</th>\n","      <th>2021-07-30 11:00</th>\n","      <th>2021-07-30 12:00</th>\n","      <th>2021-07-30 13:00</th>\n","      <th>2021-07-30 14:00</th>\n","      <th>2021-07-30 15:00</th>\n","      <th>2021-07-30 16:00</th>\n","      <th>2021-07-30 17:00</th>\n","      <th>2021-07-30 18:00</th>\n","      <th>2021-07-30 19:00</th>\n","      <th>2021-07-30 20:00</th>\n","      <th>2021-07-30 21:00</th>\n","      <th>2021-07-30 22:00</th>\n","      <th>2021-07-30 23:00</th>\n","      <th>2021-07-31 0:00</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>종가</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>...</td>\n","      <td>0.255428</td>\n","      <td>1.019108</td>\n","      <td>-0.504414</td>\n","      <td>0.253485</td>\n","      <td>-0.126422</td>\n","      <td>-0.126582</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>-0.505689</td>\n","      <td>-0.505689</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 2186 columns</p>\n","</div>"],"text/plain":["   날짜  2021-05-01 0:00  ...  2021-07-30 23:00  2021-07-31 0:00\n","0  종가         0.611995  ...         -0.127065        -0.127065\n","\n","[1 rows x 2186 columns]"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","metadata":{"id":"Z3_TiLg07mKk","colab":{"base_uri":"https://localhost:8080/"},"outputId":"cf6dd88d-731f-4759-e4c7-0f428f929d8c"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1 entries, 0 to 0\n","Columns: 2186 entries, 날짜 to 2021-07-31 0:00\n","dtypes: float64(2185), object(1)\n","memory usage: 17.2+ KB\n"]}]},{"cell_type":"code","metadata":{"id":"m6hUoeDr7mKm","colab":{"base_uri":"https://localhost:8080/"},"outputId":"435b3bfc-ed5b-444f-884d-7cdab01f251d"},"source":["data_start_date = df.columns[1]\n","data_end_date = df.columns[-1]\n","print('Data ranges from %s to %s' % (data_start_date, data_end_date))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Data ranges from 2021-05-01 0:00 to 2021-07-31 0:00\n"]}]},{"cell_type":"markdown","metadata":{"id":"-SsCTE-O7mKo"},"source":["### Train and Validation Series Partioning\n"]},{"cell_type":"code","metadata":{"id":"OYUANKZx7mKs","colab":{"base_uri":"https://localhost:8080/"},"outputId":"42993c18-71c2-4fdf-8f1c-4514be845dcf"},"source":["######################## CHECK #########################\n","# 기준시간이 hour이므로, 7일 예측한다면 7*24로 설정한다.\n","\n","\n","from datetime import timedelta\n","\n","pred_steps = 24*7+23\n","pred_length=timedelta(hours = pred_steps)\n","\n","first_day = pd.to_datetime(data_start_date)\n","last_day = pd.to_datetime(data_end_date)\n","\n","val_pred_start = last_day - pred_length + timedelta(1)\n","val_pred_end = last_day\n","print(val_pred_start, val_pred_end)\n","\n","train_pred_start = val_pred_start - pred_length\n","train_pred_end = val_pred_start - timedelta(days=1)\n","print(train_pred_start, train_pred_end)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-07-24 01:00:00 2021-07-31 00:00:00\n","2021-07-16 02:00:00 2021-07-23 01:00:00\n"]}]},{"cell_type":"code","metadata":{"id":"Yc-Nwfy07mKt","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4d1be0ca-fc32-4512-d3c4-122e7b9e2956"},"source":["enc_length = train_pred_start - first_day\n","print(enc_length)\n","\n","train_enc_start = first_day\n","train_enc_end = train_enc_start + enc_length - timedelta(1)\n","\n","val_enc_start = train_enc_start + pred_length\n","val_enc_end = val_enc_start + enc_length - timedelta(1)\n","print(train_enc_start, train_enc_end)\n","print(val_enc_start, val_enc_end)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["76 days 02:00:00\n","2021-05-01 00:00:00 2021-07-15 02:00:00\n","2021-05-08 23:00:00 2021-07-23 01:00:00\n"]}]},{"cell_type":"code","metadata":{"id":"_w1ZjY4o7mKv","colab":{"base_uri":"https://localhost:8080/"},"outputId":"60b813b7-4fce-4ee0-ce6f-5db173c4fc54"},"source":["# 최종적으로 Val prediction 구간을 예측하게 된다.\n","\n","print('Train encoding:', train_enc_start, '-', train_enc_end)\n","print('Train prediction:', train_pred_start, '-', train_pred_end, '\\n')\n","print('Val encoding:', val_enc_start, '-', val_enc_end)\n","print('Val prediction:', val_pred_start, '-', val_pred_end)\n","\n","print('\\nEncoding interval:', enc_length.days)\n","print('Prediction interval:', pred_length.days)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train encoding: 2021-05-01 00:00:00 - 2021-07-15 02:00:00\n","Train prediction: 2021-07-16 02:00:00 - 2021-07-23 01:00:00 \n","\n","Val encoding: 2021-05-08 23:00:00 - 2021-07-23 01:00:00\n","Val prediction: 2021-07-24 01:00:00 - 2021-07-31 00:00:00\n","\n","Encoding interval: 76\n","Prediction interval: 7\n"]}]},{"cell_type":"markdown","metadata":{"id":"5k8nzx9H7mKw"},"source":["## Data Formatting"]},{"cell_type":"code","metadata":{"id":"YYDpaFD47mKx","colab":{"base_uri":"https://localhost:8080/"},"outputId":"fc30180a-01df-426b-d94b-375a8a0d0e07"},"source":["#np.log 1p 해준다.\n","\n","date_to_index = pd.Series(index=pd.Index([pd.to_datetime(c) for c in df.columns[1:]]),\n","                          data=[i for i in range(len(df.columns[1:]))])\n","\n","series_array = df[df.columns[1:]].values.astype(np.float32)\n","print(series_array)\n","\n","def get_time_block_series(series_array, date_to_index, start_date, end_date):\n","    inds = date_to_index[start_date:end_date]\n","    return series_array[:,inds]\n","\n","def transform_series_encode(series_array):\n","    series_array = np.nan_to_num(series_array) # filling NaN with 0\n","    series_mean = series_array.mean(axis=1).reshape(-1,1)\n","    series_array = series_array - series_mean\n","    series_array = series_array.reshape((series_array.shape[0],series_array.shape[1], 1))\n","\n","    return series_array, series_mean\n","\n","def transform_series_decode(series_array, encode_series_mean):\n","    series_array = np.nan_to_num(series_array) # filling NaN with 0\n","    series_array = series_array - encode_series_mean\n","    series_array = series_array.reshape((series_array.shape[0],series_array.shape[1], 1))    \n","    \n","    return series_array"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.6119951   0.6119951   0.6119951  ... -0.12706481 -0.12706481\n","  -0.12706481]]\n"]}]},{"cell_type":"code","metadata":{"id":"feu8hw4N7mKy"},"source":["# sample of series from train_enc_start to train_enc_end  \n","encoder_input_data = get_time_block_series(series_array, date_to_index, \n","                                           train_enc_start, train_enc_end)\n","\n","\n","encoder_input_data, encode_series_mean = transform_series_encode(encoder_input_data)\n","\n","\n","# sample of series from train_pred_start to train_pred_end \n","decoder_target_data = get_time_block_series(series_array, date_to_index, \n","                                            train_pred_start, train_pred_end)\n","\n","decoder_target_data = transform_series_decode(decoder_target_data, encode_series_mean)\n","\n","\n","encoder_input_val_data = get_time_block_series(series_array, date_to_index, val_enc_start, val_enc_end)\n","encoder_input_val_data, encode_series_mean = transform_series_encode(encoder_input_val_data)\n","\n","decoder_target_val_data = get_time_block_series(series_array, date_to_index, val_pred_start, val_pred_end)\n","decoder_target_val_data = transform_series_decode(decoder_target_val_data, encode_series_mean)\n","\n","#for d in encoder_input_data:\n","#    print(d.shape)\n","\n","#train_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_data, decoder_target_data))\n","#train_dataset = train_dataset.batch(54)\n","\n","#for d in train_dataset:\n","#    #print(f'features:{features_tensor} target:{target_tensor}')\n","#    print(\"-----\")\n","#    print(d)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xZe8F9KP7mKz"},"source":["### Transformer model"]},{"cell_type":"code","metadata":{"id":"2HymE_Lx7mK1","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a2fb2069-b67a-4d57-8254-d2211bc29bbe"},"source":["!pip install tensorflow_datasets\n","\n","import tensorflow_datasets as tfds\n","import tensorflow as tf\n","\n","import time\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow_datasets in /usr/local/lib/python3.7/dist-packages (4.0.1)\n","Requirement already satisfied: dill in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.3.4)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.12.0)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.16.0)\n","Requirement already satisfied: attrs>=18.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (21.2.0)\n","Requirement already satisfied: tensorflow-metadata in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.2.0)\n","Requirement already satisfied: termcolor in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.1.0)\n","Requirement already satisfied: promise in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (2.3)\n","Requirement already satisfied: dm-tree in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.1.6)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.19.5)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (3.17.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.15.0)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (5.2.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (4.62.2)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (2.23.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (2021.5.30)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (2.10)\n","Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.7/dist-packages (from importlib-resources->tensorflow_datasets) (3.5.0)\n","Requirement already satisfied: googleapis-common-protos<2,>=1.52.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-metadata->tensorflow_datasets) (1.53.0)\n"]}]},{"cell_type":"code","metadata":{"id":"p9HiWaBB7mK3"},"source":["train_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_data, decoder_target_data))\n","val_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_val_data, decoder_target_val_data))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mp70_nYj7mK3"},"source":["### position\n","def get_angles(pos, i, d_model):\n","    angle_rates = 1 / np.power(10000, (2 * (i//2)) / np.float32(d_model))\n","    return pos * angle_rates\n","\n","\n","def positional_encoding(position, d_model):\n","    angle_rads = get_angles(np.arange(position)[:, np.newaxis],\n","                            np.arange(d_model)[np.newaxis, :],\n","                            d_model)\n","  \n","    # apply sin to even indices in the array; 2i\n","    sines = np.sin(angle_rads[:, 0::2])\n","  \n","    # apply cos to odd indices in the array; 2i+1\n","    cosines = np.cos(angle_rads[:, 1::2])\n","  \n","    pos_encoding = np.concatenate([sines, cosines], axis=-1)\n","  \n","    pos_encoding = pos_encoding[np.newaxis, ...]\n","    \n","    return tf.cast(pos_encoding, dtype=tf.float32)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yqDIhFln7mK3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"25f8c831-206a-4d21-ffdd-f518adba3d5e"},"source":["# Masking\n","def create_padding_mask(seq):\n","    seq = tf.cast(tf.math.equal(seq, 0), tf.float32)\n","  \n","    # add extra dimensions so that we can add the padding\n","    # to the attention logits.\n","    return seq[:, tf.newaxis, tf.newaxis, :]  # (batch_size, 1, 1, seq_len)\n","\n","x = tf.constant([[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]])\n","print(create_padding_mask(x))\n","\n","def create_look_ahead_mask(size):\n","    mask = 1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)\n","    return mask  # (seq_len, seq_len)\n","\n","x = tf.random.uniform((1, 4))\n","temp = create_look_ahead_mask(x.shape[1])\n","print(temp)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[[[0. 0. 1. 1. 0.]]]\n","\n","\n"," [[[0. 0. 0. 1. 1.]]]\n","\n","\n"," [[[1. 1. 1. 0. 0.]]]], shape=(3, 1, 1, 5), dtype=float32)\n","tf.Tensor(\n","[[0. 1. 1. 1.]\n"," [0. 0. 1. 1.]\n"," [0. 0. 0. 1.]\n"," [0. 0. 0. 0.]], shape=(4, 4), dtype=float32)\n"]}]},{"cell_type":"code","metadata":{"id":"bZhflMS47mK4"},"source":["# Scaled dot product attention\n","def scaled_dot_product_attention(q, k, v, mask):\n","    \"\"\"Calculate the attention weights.\n","      q, k, v must have matching leading dimensions.\n","      The mask has different shapes depending on its type(padding or look ahead) \n","      but it must be broadcastable for addition.\n","  \n","    Args:\n","        q: query shape == (..., seq_len_q, depth)\n","        k: key shape == (..., seq_len_k, depth)\n","        v: value shape == (..., seq_len_v, depth)\n","        mask: Float tensor with shape broadcastable \n","            to (..., seq_len_q, seq_len_k). Defaults to None.\n","    \n","    Returns:\n","        output, attention_weights\n","    \"\"\"\n","\n","    matmul_qk = tf.matmul(q, k, transpose_b=True)  # (..., seq_len_q, seq_len_k)\n","  \n","    # scale matmul_qk\n","    dk = tf.cast(tf.shape(k)[-1], tf.float32)\n","    scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n","\n","    # add the mask to the scaled tensor.\n","    if mask is not None:\n","        scaled_attention_logits += (mask * -1e9)\n","\n","    # softmax is normalized on the last axis (seq_len_k) so that the scores\n","    # add up to 1.\n","    attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)  # (..., seq_len_q, seq_len_k)\n","\n","    output = tf.matmul(attention_weights, v)  # (..., seq_len_v, depth)\n","\n","    return output, attention_weights"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wTun4caK7mK7","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7583021a-62b9-423d-9292-01362bc08bd4"},"source":["# scaled dot product attetion test\n","def print_out(q, k, v):\n","    temp_out, temp_attn = scaled_dot_product_attention(\n","        q, k, v, None)\n","    print ('Attention weights are:')\n","    print (temp_attn)\n","    print ('Output is:')\n","    print (temp_out)\n","\n","np.set_printoptions(suppress=True)\n","\n","temp_k = tf.constant([[10,0,0],\n","                      [0,10,0],\n","                      [0,0,10],\n","                      [0,0,10]], dtype=tf.float32)  # (4, 3)\n","\n","temp_v = tf.constant([[   1,0],\n","                      [  10,0],\n","                      [ 100,5],\n","                      [1000,6]], dtype=tf.float32)  # (4, 3)\n","\n","# This `query` aligns with the second `key`,\n","# so the second `value` is returned.\n","temp_q = tf.constant([[0, 10, 0]], dtype=tf.float32)  # (1, 3)\n","print_out(temp_q, temp_k, temp_v)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Attention weights are:\n","tf.Tensor([[0. 1. 0. 0.]], shape=(1, 4), dtype=float32)\n","Output is:\n","tf.Tensor([[10.  0.]], shape=(1, 2), dtype=float32)\n"]}]},{"cell_type":"code","metadata":{"id":"Tf9CrG-j7mK8"},"source":["# Multi Head Attention\n","\n","class MultiHeadAttention(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads):\n","        super(MultiHeadAttention, self).__init__()\n","        self.num_heads = num_heads\n","        self.d_model = d_model\n","    \n","        assert d_model % self.num_heads == 0\n","        \n","        self.depth = d_model // self.num_heads\n","        \n","        self.wq = tf.keras.layers.Dense(d_model)\n","        self.wk = tf.keras.layers.Dense(d_model)\n","        self.wv = tf.keras.layers.Dense(d_model)\n","        \n","        self.dense = tf.keras.layers.Dense(d_model)\n","        \n","    def split_heads(self, x, batch_size):\n","        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n","        return tf.transpose(x, perm=[0, 2, 1, 3])\n","    \n","    def call(self, v, k, q, mask):\n","        batch_size = tf.shape(q)[0]\n","        \n","        q = self.wq(q)\n","        k = self.wk(k)\n","        v = self.wv(v) # (batch_size, seq_len, d_model)\n","        \n","        q = self.split_heads(q, batch_size)\n","        k = self.split_heads(k, batch_size)\n","        v = self.split_heads(v, batch_size) #(batch_size, num_head, seq_len_v, depth)\n","        # scaled_attention.shape == (batch_size, num_heads, seq_len_v, depth)\n","        # attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)\n","        scaled_attention, attention_weights = scaled_dot_product_attention(\n","            q, k, v, mask)\n","    \n","        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])  # (batch_size, seq_len_v, num_heads, depth)\n","\n","        concat_attention = tf.reshape(scaled_attention, \n","                                      (batch_size, -1, self.d_model))  # (batch_size, seq_len_v, d_model)\n","\n","        output = self.dense(concat_attention)  # (batch_size, seq_len_v, d_model)\n","        \n","        return output, attention_weights\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vrKTDbzp7mK9","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7ca117bf-12dd-4c79-d066-cf4398aba0d7"},"source":["# multhead attention test\n","temp_mha = MultiHeadAttention(d_model=512, num_heads=8)\n","y = tf.random.uniform((1, 60, 512))  # (batch_size, encoder_sequence, d_model)\n","out, attn = temp_mha(y, k=y, q=y, mask=None)\n","out.shape, attn.shape\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([1, 60, 512]), TensorShape([1, 8, 60, 60]))"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"h4jCVAuU7mK-"},"source":["# activation – the activation function of encoder/decoder intermediate layer, relu or gelu (default=relu).\n","\n","# Point wise feed forward network\n","def point_wise_feed_forward_network(d_model, dff):\n","    return tf.keras.Sequential([\n","        tf.keras.layers.Dense(dff, activation='relu'),  # (batch_size, seq_len, dff)\n","        tf.keras.layers.Dense(d_model)  # (batch_size, seq_len, d_model)\n","    ])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kR78pzaU7mK_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"cb3a89da-30ae-4b08-ba87-d82681e54d5e"},"source":["# Point wise feed forward network test\n","sample_ffn = point_wise_feed_forward_network(512, 2048)\n","sample_ffn(tf.random.uniform((64, 50, 512))).shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 50, 512])"]},"metadata":{},"execution_count":70}]},{"cell_type":"markdown","metadata":{"id":"0JHQxZvp7mK_"},"source":["### Encoder and Decoder"]},{"cell_type":"code","metadata":{"id":"y_ja4MiQ7mLC"},"source":["# Encoder Layer\n","class EncoderLayer(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads, dff, rate=0.1):\n","        super(EncoderLayer, self).__init__()\n","        \n","        self.mha = MultiHeadAttention(d_model, num_heads)\n","        self.ffn = point_wise_feed_forward_network(d_model, dff)\n","        \n","        self.layernorm1 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm2 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","    \n","        self.dropout1 = tf.keras.layers.Dropout(rate)\n","        self.dropout2 = tf.keras.layers.Dropout(rate)\n","    \n","    def call(self, x, training, mask):\n","        attn_output, _ = self.mha(x, x, x, mask) # (batch_size, input_seq_len, d_model)\n","        attn_output = self.dropout1(attn_output, training=training)\n","        out1 = self.layernorm1(x + attn_output)\n","        \n","        ffn_output = self.ffn(out1) # (batch_size, input_seq_len, d_model)\n","        ffn_output = self.dropout2(ffn_output, training=training)\n","        out2 = self.layernorm2(out1 + ffn_output) # (batch_size, input_seq_len, d_model)\n","        \n","        return out2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"msUwz7Bx7mLD","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9caa5dd8-a7ba-4dd8-e5a6-8ab1a108f129"},"source":["# Encoder Layer Test\n","sample_encoder_layer = EncoderLayer(512, 8, 2048)\n","\n","sample_encoder_layer_output = sample_encoder_layer(\n","    tf.random.uniform((64, 43, 512)), False, None)\n","\n","sample_encoder_layer_output.shape  # (batch_size, input_seq_len, d_model)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 43, 512])"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","metadata":{"id":"V-c2G1Cp7mLE"},"source":["# Decoder Layer\n","class DecoderLayer(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads, dff, rate=0.1):\n","        super(DecoderLayer, self).__init__()\n","        \n","        self.mha1 = MultiHeadAttention(d_model, num_heads)\n","        self.mha2 = MultiHeadAttention(d_model, num_heads)\n","        \n","        self.ffn = point_wise_feed_forward_network(d_model, dff)\n","        \n","        self.layernorm1 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm2 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm3 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","    \n","        self.dropout1 = tf.keras.layers.Dropout(rate)\n","        self.dropout2 = tf.keras.layers.Dropout(rate)\n","        self.dropout3 = tf.keras.layers.Dropout(rate)\n","                                            \n","    def call(self, x, enc_output, training,\n","            look_ahead_mask, padding_mask):\n","        # enc_output.shape == (batch_size, input_seq_len, d_model)\n","        attn1, attn_weights_block1 = self.mha1(x, x, x, look_ahead_mask)\n","        attn1 = self.dropout1(attn1, training=training)\n","        out1 = self.layernorm1(attn1 + x)\n","        \n","        attn2, attn_weights_block2 = self.mha2(\n","            enc_output, enc_output, out1, padding_mask)\n","        attn2 = self.dropout2(attn2, training=training)\n","        out2 = self.layernorm2(attn2 + out1)\n","        \n","        ffn_output = self.ffn(out2)\n","        ffn_output = self.dropout3(ffn_output, training=training)\n","        out3 = self.layernorm3(ffn_output + out2)\n","        \n","        return out3, attn_weights_block1, attn_weights_block2\n","    \n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s2HBk8KS7mLE","colab":{"base_uri":"https://localhost:8080/"},"outputId":"0f583938-c5fe-4a73-9aa1-f8570b4fde42"},"source":["# Decoder layer test\n","sample_decoder_layer = DecoderLayer(512, 8, 2048)\n","\n","sample_decoder_layer_output, _, _ = sample_decoder_layer(\n","    tf.random.uniform((64, 50, 512)), sample_encoder_layer_output, \n","    False, None, None)\n","\n","sample_decoder_layer_output.shape  # (batch_size, target_seq_len, d_model)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 50, 512])"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","metadata":{"id":"-X496L3Y7mLF"},"source":["# Encoder\n","\n","class Encoder(tf.keras.layers.Layer):\n","    def __init__(self, num_layers, d_model, num_heads, dff, max_len=5000,\n","                rate=0.1):\n","        super(Encoder, self).__init__()\n","        self.d_model = d_model\n","        self.num_layers = num_layers\n","        self.embedding = tf.keras.layers.Dense(d_model, use_bias=False)\n","        self.pos_encoding = positional_encoding(max_len, self.d_model)\n","        \n","        self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate) \n","                       for _ in range(num_layers)]\n","        \n","        self.dropout = tf.keras.layers.Dropout(rate)\n","        \n","    def call(self, x, training, mask):\n","        seq_len = tf.shape(x)[1]\n","        \n","        # adding embedding and position encoding\n","        x = self.embedding(x)\n","        # (batch_size, input_seq_len, d_model)\n","        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        x += self.pos_encoding[:, :seq_len, :]\n","        \n","        x = self.dropout(x, training=training)\n","        \n","        for i in range(self.num_layers):\n","            x = self.enc_layers[i](x, training, mask)\n","        \n","        return x\n","                          "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YSO73qPR7mLF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6a7059d6-badc-49a4-85cf-b4c734424072"},"source":["sample_encoder = Encoder(num_layers=2, d_model=512, num_heads=8, \n","                         dff=2048)\n","\n","sample_encoder_output = sample_encoder(tf.random.uniform((64, 62,1)), \n","                                       training=False, mask=None)\n","\n","print (sample_encoder_output.shape)  # (batch_size, input_seq_len, d_model)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(64, 62, 512)\n"]}]},{"cell_type":"code","metadata":{"id":"iApaMNvC7mLG"},"source":["# Decoder\n","class Decoder(tf.keras.layers.Layer):\n","    def __init__(self, num_layers, d_model, num_heads, dff, max_len=5000, rate=0.1):\n","        super(Decoder, self).__init__()\n","        \n","        self.d_model = d_model\n","        self.num_layers = num_layers\n","        \n","        self.embedding = tf.keras.layers.Dense(d_model, use_bias=False)\n","        self.pos_encoding = positional_encoding(max_len, self.d_model)\n","    \n","        self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate) \n","                            for _ in range(num_layers)]\n","        self.dropout = tf.keras.layers.Dropout(rate)\n","        \n","    def call(self, x, enc_output, training,\n","                look_ahead_mask, padding_mask):\n","        \n","        seq_len = tf.shape(x)[1]\n","        attention_weights = {}\n","        \n","        x = self.embedding(x)\n","        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        x += self.pos_encoding[:, :seq_len, :]\n","        \n","        x = self.dropout(x, training=training)\n","        \n","        for i in range(self.num_layers):\n","            x, block1, block2 = self.dec_layers[i](x, enc_output, training,\n","                                                  look_ahead_mask, padding_mask)\n","            attention_weights['decoder_layer{}_block1'.format(i+1)] = block1\n","            attention_weights['decoder_layer{}_block2'.format(i+1)] = block2\n","            \n","        \n","        \n","        return x, attention_weights\n","    \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lyz4sJBn7mLG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7d733197-e65c-4e41-9cd0-3448fb0ee5ec"},"source":["sample_decoder = Decoder(num_layers=2, d_model=512, num_heads=8, \n","                         dff=2048)\n","\n","output, attn = sample_decoder(tf.random.uniform((64, 26,3)), \n","                              enc_output=sample_encoder_output, \n","                              training=False, look_ahead_mask=None, \n","                              padding_mask=None)\n","\n","output.shape, attn['decoder_layer2_block2'].shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([64, 26, 512]), TensorShape([64, 8, 26, 62]))"]},"metadata":{},"execution_count":78}]},{"cell_type":"markdown","metadata":{"id":"cDMZbb2D7mLH"},"source":["### Transfomer for TS\n"]},{"cell_type":"code","metadata":{"id":"3Wff4gY-7mLH"},"source":["class Transformer(tf.keras.Model):\n","    def __init__(self, num_layers, d_model, num_heads, dff, out_dim, max_len=5000,\n","                rate=0.1):\n","        super(Transformer, self).__init__()\n","        \n","        self.encoder = Encoder(num_layers, d_model, num_heads, dff,\n","                              max_len, rate)\n","        self.decoder = Decoder(num_layers, d_model, num_heads, dff,\n","                               max_len, rate)\n","        \n","        self.final_layer = tf.keras.layers.Dense(out_dim)\n","        \n","    def call(self, inp, tar, training, enc_padding_mask,\n","             look_ahead_mask, dec_padding_mask):\n","        enc_output = self.encoder(inp, training, enc_padding_mask)\n","        \n","        dec_output, attention_weights = self.decoder(\n","            tar, enc_output, training, look_ahead_mask, dec_padding_mask)\n","        final_output = self.final_layer(dec_output)\n","        \n","        return final_output, attention_weights\n","    \n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zy2jyCC27mLH","colab":{"base_uri":"https://localhost:8080/"},"outputId":"751c7d60-43ea-4dc3-8d9d-4d219d358d39"},"source":["sample_transformer = Transformer(\n","    num_layers=2, d_model=512, num_heads=8, dff=2048, \n","    out_dim=1)\n","\n","temp_input = tf.random.uniform((64, 62,1))\n","temp_target = tf.random.uniform((64, 23,1))\n","\n","fn_out, _ = sample_transformer(temp_input, temp_target,training=False, \n","                               enc_padding_mask=None, \n","                               look_ahead_mask=None,\n","                               dec_padding_mask=None)\n","\n","fn_out.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 23, 1])"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","metadata":{"id":"vkBfkgGy7mLI"},"source":["# Set hyperparameters\n","# 트랜스포머 기준으로 바꿔볼까? \n","# d_model – the number of expected features in the encoder/decoder inputs (default=512).\n","# nhead – the number of heads in the multiheadattention models (default=8).\n","# num_encoder_layers – the number of sub-encoder-layers in the encoder & decoder (default=6).\n","# num_decoder_layers – the number of sub-decoder-layers in the decoder (default=6).\n","# dff(dim_feedforward) – the dimension of the feedforward network model (default=2048).\n","# dropout – the dropout value (default=0.1).\n","\n","\n","num_layers = 1\n","d_model = 64\n","dff = 256\n","num_heads = 4\n","\n","dropout_rate = 0.1\n","input_sequence_length = 2184-(24*7+23) # Length of the sequence used by the encoder\n","target_sequence_length = 24*7+23 # Length of the sequence predicted by the decoder\n","batch_size = 2*11\n","\n","train_dataset = train_dataset.batch(batch_size)\n","val_dataset = val_dataset.batch(batch_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dwNIQKry7mLI"},"source":["# Optimizizer\n","class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n","    def __init__(self, d_model, warmup_steps=4000):\n","        super(CustomSchedule, self).__init__()\n","    \n","        self.d_model = d_model\n","        self.d_model = tf.cast(self.d_model, tf.float32)\n","\n","        self.warmup_steps = warmup_steps\n","    \n","    def __call__(self, step):\n","        arg1 = tf.math.rsqrt(step)\n","        arg2 = step * (self.warmup_steps ** -1.5)\n","    \n","        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EHuh2wWR7mLI"},"source":["learning_rate = CustomSchedule(64)\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, \n","                                     epsilon=1e-9)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftwg7b_Z7mLI","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"835ec83d-dca7-405a-860f-6f6c155b1eff"},"source":["temp_learning_rate_schedule = CustomSchedule(512)\n","\n","plt.plot(temp_learning_rate_schedule(tf.range(40000, dtype=tf.float32)))\n","plt.ylabel(\"Learning Rate\")\n","plt.xlabel(\"Train Step\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Train Step')"]},"metadata":{},"execution_count":84},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Tn59NBXK7mLI"},"source":["# Loss and metrics\n","loss_object = tf.keras.losses.MeanAbsoluteError()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0BwT16Z77mLJ"},"source":["def loss_function(real, pred):\n","    mask = tf.math.logical_not(tf.math.equal(real, 0))\n","    loss_ = loss_object(real, pred)\n","\n","    mask = tf.cast(mask, dtype=loss_.dtype)\n","    loss_ *= mask\n","  \n","    return tf.reduce_mean(loss_)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vlFkoDfS7mLJ"},"source":["train_loss = tf.keras.metrics.Mean(name='train_loss')\n","#train_accuracy = tf.keras.metrics.mean_absolute_error()\n","\n","test_loss = tf.keras.metrics.Mean(name='test_loss')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wpZb8zHP7mLJ"},"source":["# Training and checkpoint\n","transformer = Transformer(num_layers, d_model, num_heads, dff,\n","                          out_dim=1, rate=dropout_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"shPhCuBM7mLJ"},"source":["def create_masks(inp, tar):\n","    inp = inp.reshape()\n","    # Encoder padding mask\n","    enc_padding_mask = create_padding_mask(inp)\n","  \n","    # Used in the 2nd attention block in the decoder.\n","    # This padding mask is used to mask the encoder outputs.\n","    dec_padding_mask = create_padding_mask(inp)\n","  \n","    # Used in the 1st attention block in the decoder.\n","    # It is used to pad and mask future tokens in the input received by \n","    # the decoder.\n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    dec_target_padding_mask = create_padding_mask(tar)\n","    combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask)\n","  \n","    return enc_padding_mask, combined_mask, dec_padding_mask"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r9ENhH-s7mLK","colab":{"base_uri":"https://localhost:8080/"},"outputId":"957df465-a7c8-4e95-ef22-dc1c16001cfd"},"source":["# check point\n","checkpoint_path = \"./checkpoints/train\"\n","\n","ckpt = tf.train.Checkpoint(transformer=transformer,\n","                           optimizer=optimizer)\n","\n","ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)\n","\n","# if a checkpoint exists, restore the latest checkpoint.\n","if ckpt_manager.latest_checkpoint:\n","    ckpt.restore(ckpt_manager.latest_checkpoint)\n","    print ('Latest checkpoint restored!!')\n","    "],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Latest checkpoint restored!!\n"]}]},{"cell_type":"code","metadata":{"id":"zf4S65Ud7mLK"},"source":["# EPOCHS\n","EPOCHS=100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dN2lAMeP7mLK"},"source":["@tf.function\n","def train_step(inp, tar):\n","    last_inp = tf.expand_dims(inp[:,0,:],-1)\n","    tar_inp = tf.concat([last_inp, tar[:,:-1,:]], axis=1)\n","    tar_real = tar\n","  \n","    #enc_padding_mask, combined_mask, dec_padding_mask = create_masks(inp, tar_inp)\n","    #print(enc_padding_mask)\n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    \n","    with tf.GradientTape() as tape:\n","        predictions, _ = transformer(inp, tar_inp, \n","                                     True, \n","                                     None, \n","                                     look_ahead_mask, \n","                                     None)\n","        loss = loss_function(tar_real, predictions)\n","\n","    gradients = tape.gradient(loss, transformer.trainable_variables)    \n","    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n","  \n","    train_loss(loss)\n","    #train_accuracy(tar_real, predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aFzrcnAU7mLK"},"source":["@tf.function\n","def test_step(inp, tar):\n","    #print(inp)\n","    #print(tar)\n","    last_inp = tf.expand_dims(inp[:,0,:],-1)\n","    #print(last_inp)\n","    tar_inp = tf.concat([last_inp, tar[:,:-1,:]], axis=1)\n","    tar_real = tar\n","    \n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    \n","    with tf.GradientTape() as tape:\n","        predictions, _ = transformer(inp, tar_inp, \n","                                     False, \n","                                     None, \n","                                     look_ahead_mask, \n","                                     None)\n","        loss = loss_function(tar_real, predictions)\n","\n","    gradients = tape.gradient(loss, transformer.trainable_variables)    \n","    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n","\n","    test_loss(loss)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"VU9sFkFu7mLL","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6eef069a-16a4-447d-e842-010e11a67140"},"source":["# Val_dataset을 돌려서 Val_prediction 구간을 예측한다\n","\n","for epoch in range(EPOCHS):\n","    start = time.time()\n","\n","    train_loss.reset_states()\n","    test_loss.reset_states()\n","    \n","    # validation:\n","    for (batch, (inp, tar)) in enumerate(val_dataset):\n","        #print(inp, tar)\n","        test_step(inp, tar)\n","        \n","    if (epoch + 1) % 5 == 0:\n","        ckpt_save_path = ckpt_manager.save()\n","        print ('Saving checkpoint for epoch {} at {}'.format(epoch+1,\n","                                                         ckpt_save_path))\n","    \n","    #print ('Epoch {} Train Loss {:.4f}'.format(epoch + 1, \n","                                                #train_loss.result())) \n","                                                #train_accuracy.result()))\n","    print ('Epoch {} Test Loss {:.4f}'.format(epoch + 1, \n","                                                test_loss.result())) \n","    print ('Time taken for 1 epoch: {} secs\\n'.format(time.time() - start))\n","    \n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1 Test Loss 0.3621\n","Time taken for 1 epoch: 1.922013759613037 secs\n","\n","Epoch 2 Test Loss 0.3577\n","Time taken for 1 epoch: 0.01702404022216797 secs\n","\n","Epoch 3 Test Loss 0.3522\n","Time taken for 1 epoch: 0.01706242561340332 secs\n","\n","Epoch 4 Test Loss 0.3466\n","Time taken for 1 epoch: 0.016959190368652344 secs\n","\n","Saving checkpoint for epoch 5 at ./checkpoints/train/ckpt-21\n","Epoch 5 Test Loss 0.3418\n","Time taken for 1 epoch: 0.07070422172546387 secs\n","\n","Epoch 6 Test Loss 0.3370\n","Time taken for 1 epoch: 0.017345190048217773 secs\n","\n","Epoch 7 Test Loss 0.3322\n","Time taken for 1 epoch: 0.016944408416748047 secs\n","\n","Epoch 8 Test Loss 0.3270\n","Time taken for 1 epoch: 0.017017126083374023 secs\n","\n","Epoch 9 Test Loss 0.3218\n","Time taken for 1 epoch: 0.016702651977539062 secs\n","\n","Saving checkpoint for epoch 10 at ./checkpoints/train/ckpt-22\n","Epoch 10 Test Loss 0.3172\n","Time taken for 1 epoch: 0.07108569145202637 secs\n","\n","Epoch 11 Test Loss 0.3127\n","Time taken for 1 epoch: 0.016623497009277344 secs\n","\n","Epoch 12 Test Loss 0.3074\n","Time taken for 1 epoch: 0.01682591438293457 secs\n","\n","Epoch 13 Test Loss 0.3025\n","Time taken for 1 epoch: 0.017124414443969727 secs\n","\n","Epoch 14 Test Loss 0.2982\n","Time taken for 1 epoch: 0.016953229904174805 secs\n","\n","Saving checkpoint for epoch 15 at ./checkpoints/train/ckpt-23\n","Epoch 15 Test Loss 0.2931\n","Time taken for 1 epoch: 0.07552695274353027 secs\n","\n","Epoch 16 Test Loss 0.2878\n","Time taken for 1 epoch: 0.01647210121154785 secs\n","\n","Epoch 17 Test Loss 0.2828\n","Time taken for 1 epoch: 0.01792454719543457 secs\n","\n","Epoch 18 Test Loss 0.2780\n","Time taken for 1 epoch: 0.01654791831970215 secs\n","\n","Epoch 19 Test Loss 0.2724\n","Time taken for 1 epoch: 0.01696038246154785 secs\n","\n","Saving checkpoint for epoch 20 at ./checkpoints/train/ckpt-24\n","Epoch 20 Test Loss 0.2668\n","Time taken for 1 epoch: 0.07705426216125488 secs\n","\n","Epoch 21 Test Loss 0.2619\n","Time taken for 1 epoch: 0.02412581443786621 secs\n","\n","Epoch 22 Test Loss 0.2565\n","Time taken for 1 epoch: 0.015027046203613281 secs\n","\n","Epoch 23 Test Loss 0.2504\n","Time taken for 1 epoch: 0.015071392059326172 secs\n","\n","Epoch 24 Test Loss 0.2454\n","Time taken for 1 epoch: 0.014959335327148438 secs\n","\n","Saving checkpoint for epoch 25 at ./checkpoints/train/ckpt-25\n","Epoch 25 Test Loss 0.2404\n","Time taken for 1 epoch: 0.07803606986999512 secs\n","\n","Epoch 26 Test Loss 0.2343\n","Time taken for 1 epoch: 0.015752077102661133 secs\n","\n","Epoch 27 Test Loss 0.2294\n","Time taken for 1 epoch: 0.015241861343383789 secs\n","\n","Epoch 28 Test Loss 0.2246\n","Time taken for 1 epoch: 0.01593470573425293 secs\n","\n","Epoch 29 Test Loss 0.2181\n","Time taken for 1 epoch: 0.015526771545410156 secs\n","\n","Saving checkpoint for epoch 30 at ./checkpoints/train/ckpt-26\n","Epoch 30 Test Loss 0.2131\n","Time taken for 1 epoch: 0.07367634773254395 secs\n","\n","Epoch 31 Test Loss 0.2075\n","Time taken for 1 epoch: 0.01505732536315918 secs\n","\n","Epoch 32 Test Loss 0.2021\n","Time taken for 1 epoch: 0.014850378036499023 secs\n","\n","Epoch 33 Test Loss 0.1982\n","Time taken for 1 epoch: 0.015218257904052734 secs\n","\n","Epoch 34 Test Loss 0.1917\n","Time taken for 1 epoch: 0.014972686767578125 secs\n","\n","Saving checkpoint for epoch 35 at ./checkpoints/train/ckpt-27\n","Epoch 35 Test Loss 0.1879\n","Time taken for 1 epoch: 0.0706949234008789 secs\n","\n","Epoch 36 Test Loss 0.1815\n","Time taken for 1 epoch: 0.015002965927124023 secs\n","\n","Epoch 37 Test Loss 0.1773\n","Time taken for 1 epoch: 0.014859676361083984 secs\n","\n","Epoch 38 Test Loss 0.1712\n","Time taken for 1 epoch: 0.014647245407104492 secs\n","\n","Epoch 39 Test Loss 0.1677\n","Time taken for 1 epoch: 0.014832735061645508 secs\n","\n","Saving checkpoint for epoch 40 at ./checkpoints/train/ckpt-28\n","Epoch 40 Test Loss 0.1622\n","Time taken for 1 epoch: 0.06634783744812012 secs\n","\n","Epoch 41 Test Loss 0.1598\n","Time taken for 1 epoch: 0.014784097671508789 secs\n","\n","Epoch 42 Test Loss 0.1534\n","Time taken for 1 epoch: 0.014304161071777344 secs\n","\n","Epoch 43 Test Loss 0.1508\n","Time taken for 1 epoch: 0.014647960662841797 secs\n","\n","Epoch 44 Test Loss 0.1451\n","Time taken for 1 epoch: 0.014885425567626953 secs\n","\n","Saving checkpoint for epoch 45 at ./checkpoints/train/ckpt-29\n","Epoch 45 Test Loss 0.1439\n","Time taken for 1 epoch: 0.07150602340698242 secs\n","\n","Epoch 46 Test Loss 0.1374\n","Time taken for 1 epoch: 0.014751672744750977 secs\n","\n","Epoch 47 Test Loss 0.1335\n","Time taken for 1 epoch: 0.01479959487915039 secs\n","\n","Epoch 48 Test Loss 0.1306\n","Time taken for 1 epoch: 0.014086008071899414 secs\n","\n","Epoch 49 Test Loss 0.1269\n","Time taken for 1 epoch: 0.014509201049804688 secs\n","\n","Saving checkpoint for epoch 50 at ./checkpoints/train/ckpt-30\n","Epoch 50 Test Loss 0.1238\n","Time taken for 1 epoch: 0.06981039047241211 secs\n","\n","Epoch 51 Test Loss 0.1217\n","Time taken for 1 epoch: 0.013881683349609375 secs\n","\n","Epoch 52 Test Loss 0.1182\n","Time taken for 1 epoch: 0.01461172103881836 secs\n","\n","Epoch 53 Test Loss 0.1140\n","Time taken for 1 epoch: 0.014094352722167969 secs\n","\n","Epoch 54 Test Loss 0.1114\n","Time taken for 1 epoch: 0.01381373405456543 secs\n","\n","Saving checkpoint for epoch 55 at ./checkpoints/train/ckpt-31\n","Epoch 55 Test Loss 0.1099\n","Time taken for 1 epoch: 0.07846355438232422 secs\n","\n","Epoch 56 Test Loss 0.1084\n","Time taken for 1 epoch: 0.014593124389648438 secs\n","\n","Epoch 57 Test Loss 0.1064\n","Time taken for 1 epoch: 0.014165163040161133 secs\n","\n","Epoch 58 Test Loss 0.1022\n","Time taken for 1 epoch: 0.01397085189819336 secs\n","\n","Epoch 59 Test Loss 0.1004\n","Time taken for 1 epoch: 0.01406717300415039 secs\n","\n","Saving checkpoint for epoch 60 at ./checkpoints/train/ckpt-32\n","Epoch 60 Test Loss 0.1023\n","Time taken for 1 epoch: 0.06789255142211914 secs\n","\n","Epoch 61 Test Loss 0.0961\n","Time taken for 1 epoch: 0.01374363899230957 secs\n","\n","Epoch 62 Test Loss 0.1022\n","Time taken for 1 epoch: 0.01404714584350586 secs\n","\n","Epoch 63 Test Loss 0.1046\n","Time taken for 1 epoch: 0.013132810592651367 secs\n","\n","Epoch 64 Test Loss 0.0930\n","Time taken for 1 epoch: 0.013923168182373047 secs\n","\n","Saving checkpoint for epoch 65 at ./checkpoints/train/ckpt-33\n","Epoch 65 Test Loss 0.1145\n","Time taken for 1 epoch: 0.07518386840820312 secs\n","\n","Epoch 66 Test Loss 0.0879\n","Time taken for 1 epoch: 0.013401508331298828 secs\n","\n","Epoch 67 Test Loss 0.1147\n","Time taken for 1 epoch: 0.013618707656860352 secs\n","\n","Epoch 68 Test Loss 0.0898\n","Time taken for 1 epoch: 0.013197660446166992 secs\n","\n","Epoch 69 Test Loss 0.1212\n","Time taken for 1 epoch: 0.012952804565429688 secs\n","\n","Saving checkpoint for epoch 70 at ./checkpoints/train/ckpt-34\n","Epoch 70 Test Loss 0.0975\n","Time taken for 1 epoch: 0.07008194923400879 secs\n","\n","Epoch 71 Test Loss 0.1123\n","Time taken for 1 epoch: 0.013282537460327148 secs\n","\n","Epoch 72 Test Loss 0.1088\n","Time taken for 1 epoch: 0.013153314590454102 secs\n","\n","Epoch 73 Test Loss 0.0874\n","Time taken for 1 epoch: 0.013071060180664062 secs\n","\n","Epoch 74 Test Loss 0.0989\n","Time taken for 1 epoch: 0.012980937957763672 secs\n","\n","Saving checkpoint for epoch 75 at ./checkpoints/train/ckpt-35\n","Epoch 75 Test Loss 0.0805\n","Time taken for 1 epoch: 0.0700540542602539 secs\n","\n","Epoch 76 Test Loss 0.0970\n","Time taken for 1 epoch: 0.013993501663208008 secs\n","\n","Epoch 77 Test Loss 0.0781\n","Time taken for 1 epoch: 0.013448476791381836 secs\n","\n","Epoch 78 Test Loss 0.0942\n","Time taken for 1 epoch: 0.01293182373046875 secs\n","\n","Epoch 79 Test Loss 0.0796\n","Time taken for 1 epoch: 0.013253927230834961 secs\n","\n","Saving checkpoint for epoch 80 at ./checkpoints/train/ckpt-36\n","Epoch 80 Test Loss 0.0901\n","Time taken for 1 epoch: 0.06460118293762207 secs\n","\n","Epoch 81 Test Loss 0.0792\n","Time taken for 1 epoch: 0.013056516647338867 secs\n","\n","Epoch 82 Test Loss 0.0839\n","Time taken for 1 epoch: 0.012922525405883789 secs\n","\n","Epoch 83 Test Loss 0.0775\n","Time taken for 1 epoch: 0.013146162033081055 secs\n","\n","Epoch 84 Test Loss 0.0792\n","Time taken for 1 epoch: 0.013967037200927734 secs\n","\n","Saving checkpoint for epoch 85 at ./checkpoints/train/ckpt-37\n","Epoch 85 Test Loss 0.0767\n","Time taken for 1 epoch: 0.07524776458740234 secs\n","\n","Epoch 86 Test Loss 0.0727\n","Time taken for 1 epoch: 0.013130426406860352 secs\n","\n","Epoch 87 Test Loss 0.0733\n","Time taken for 1 epoch: 0.013373136520385742 secs\n","\n","Epoch 88 Test Loss 0.0702\n","Time taken for 1 epoch: 0.013022661209106445 secs\n","\n","Epoch 89 Test Loss 0.0724\n","Time taken for 1 epoch: 0.013130426406860352 secs\n","\n","Saving checkpoint for epoch 90 at ./checkpoints/train/ckpt-38\n","Epoch 90 Test Loss 0.0679\n","Time taken for 1 epoch: 0.06911230087280273 secs\n","\n","Epoch 91 Test Loss 0.0720\n","Time taken for 1 epoch: 0.01315617561340332 secs\n","\n","Epoch 92 Test Loss 0.0696\n","Time taken for 1 epoch: 0.013121843338012695 secs\n","\n","Epoch 93 Test Loss 0.0665\n","Time taken for 1 epoch: 0.013072013854980469 secs\n","\n","Epoch 94 Test Loss 0.0718\n","Time taken for 1 epoch: 0.013063192367553711 secs\n","\n","Saving checkpoint for epoch 95 at ./checkpoints/train/ckpt-39\n","Epoch 95 Test Loss 0.0615\n","Time taken for 1 epoch: 0.07231497764587402 secs\n","\n","Epoch 96 Test Loss 0.0652\n","Time taken for 1 epoch: 0.013624906539916992 secs\n","\n","Epoch 97 Test Loss 0.0601\n","Time taken for 1 epoch: 0.01305389404296875 secs\n","\n","Epoch 98 Test Loss 0.0610\n","Time taken for 1 epoch: 0.013173103332519531 secs\n","\n","Epoch 99 Test Loss 0.0644\n","Time taken for 1 epoch: 0.01292729377746582 secs\n","\n","Saving checkpoint for epoch 100 at ./checkpoints/train/ckpt-40\n","Epoch 100 Test Loss 0.0591\n","Time taken for 1 epoch: 0.07575464248657227 secs\n","\n"]}]},{"cell_type":"code","metadata":{"id":"cU4kkZys7mLL"},"source":["MAX_LENGTH = target_sequence_length\n","\n","def evaluate(inp):\n","    encoder_input = inp\n","    #print(encoder_input)\n","    output = tf.expand_dims(encoder_input[:,-1,:],-1)\n","    #print(output)\n","    \n","    for i in range(MAX_LENGTH):\n","        look_ahead_mask = create_look_ahead_mask(tf.shape(output)[1])\n","        predictions, attention_weights = transformer(encoder_input, \n","                                                     output, \n","                                                     False, \n","                                                     None, \n","                                                     look_ahead_mask, \n","                                                     None)\n","        \n","        # select the last word from the seq_len dimension\n","        predictions = predictions[: ,-1:, :]  # (batch_size, 1)\n","        #print(\"pred:\", predictions) #\n","        output = tf.concat([output, predictions], axis=1)\n","        #print(output)\n","        \n","    return tf.squeeze(output, axis=0), attention_weights"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8gnQAWpsA0Vs"},"source":["def mape(y_pred, y_true):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VrZLCCbpjmN0"},"source":["def MAE(y_true, y_pred): \n","    return np.mean(np.abs((y_true - y_pred)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iN7slOWlk-x0"},"source":["def MSE(y_true, y_pred):\n","    return np.mean(np.square((y_true - y_pred)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7khHQRegMByM"},"source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y8O2fiewMEaG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ba2dd2c6-2bcc-4e97-a619-a226d77c1e65"},"source":["encode_series = encoder_input_val_data[0:1,:,:] \n","#print(encode_series)\n","\n","pred_series, _ = evaluate(encode_series)\n","pred_series = np.array([pred_series])\n","encode_series = encode_series.reshape(-1,1)\n","pred_series = pred_series.reshape(-1,1)[1:,:]   \n","target_series = decoder_target_val_data[0,:,:1].reshape(-1,1) \n","\n","encode_series_tail = np.concatenate([encode_series[-1000:],target_series[:1]])\n","x_encode = encode_series_tail.shape[0]\n","\n","print(mape(pred_series[:24*7+23-23]+0.013913, target_series+0.013913))\n","\n","print(MSE(target_series+0.013913, pred_series[:24*7+23-23]+0.013913))\n","\n","print(MAE(target_series+0.013913, pred_series[:24*7+23-23]+0.013913))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["261.5427017211914\n","0.33454183\n","0.4235101\n"]}]},{"cell_type":"code","metadata":{"id":"gRxmWFiyPIOG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b45fc53a-3dee-4c27-d658-53f02266da8f"},"source":["x_encode"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1001"]},"metadata":{},"execution_count":101}]},{"cell_type":"code","metadata":{"id":"pzq3ApNZMHx6","colab":{"base_uri":"https://localhost:8080/","height":408},"outputId":"c060357f-27b2-4b13-8432-5cac88fe760a"},"source":["# 실제와 가격차이가 어떻게 나는지 비교해서 보정한다.\n","\n","plt.figure(figsize=(20,6))   \n","\n","plt.plot(range(1,x_encode+1),encode_series_tail+0.013913)\n","plt.plot(range(x_encode,x_encode+pred_steps-23),target_series+0.013913,color='orange')\n","plt.plot(range(x_encode,x_encode+pred_steps-23),pred_series[:24*7+23-23]+0.013913,color='teal',linestyle='--')\n","\n","plt.title('Encoder Series Tail of Length %d, Target Series, and Predictions' % 1000)\n","plt.legend(['Encoding Series','Target Series','Predictions'])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f504b424110>"]},"metadata":{},"execution_count":102},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FHfEpRQj_7jQ"},"source":["#Prophet"]},{"cell_type":"code","metadata":{"id":"GxabcXNaR_HX"},"source":["import pandas as pd\n","from fbprophet import Prophet\n","import matplotlib.pyplot as plt\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KMFg8RedAAXL","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"64c6c055-0da5-433a-8c9b-27a55d7f5f9c"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version1.csv\", encoding='CP949')\n","df = df.drop(df.columns[0], axis=1)\n","\n","df.columns = [\"ds\",\"y\"]\n","df[\"ds\"] = pd.to_datetime(df[\"ds\"], dayfirst = True)\n","\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-05-01 00:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-05-01 01:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-05-01 02:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-05-01 03:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-05-01 04:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                   ds         y\n","0 2021-05-01 00:00:00  0.611995\n","1 2021-05-01 01:00:00  0.611995\n","2 2021-05-01 02:00:00  0.611995\n","3 2021-05-01 03:00:00  0.611995\n","4 2021-05-01 04:00:00  0.611995"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","metadata":{"id":"xv9FXHpaAELb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a77bf370-b06e-405b-f875-e534eb0bff82"},"source":["m = Prophet()\n","m.fit(df[:-24*7])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:numexpr.utils:NumExpr defaulting to 4 threads.\n","INFO:fbprophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n"]},{"output_type":"execute_result","data":{"text/plain":["<fbprophet.forecaster.Prophet at 0x7f504b2a6f10>"]},"metadata":{},"execution_count":105}]},{"cell_type":"code","metadata":{"id":"imkZ1wN0AGgF","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"b4e06e9f-e0fb-4b02-d200-f6dbd351c951"},"source":["future = m.make_future_dataframe(freq='H',periods=24*7)\n","future.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2180</th>\n","      <td>2021-07-30 20:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>2181</th>\n","      <td>2021-07-30 21:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>2182</th>\n","      <td>2021-07-30 22:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>2183</th>\n","      <td>2021-07-30 23:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>2184</th>\n","      <td>2021-07-31 00:00:00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                      ds\n","2180 2021-07-30 20:00:00\n","2181 2021-07-30 21:00:00\n","2182 2021-07-30 22:00:00\n","2183 2021-07-30 23:00:00\n","2184 2021-07-31 00:00:00"]},"metadata":{},"execution_count":106}]},{"cell_type":"code","metadata":{"id":"xiGIX82FAIvT","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"f6117efd-f576-406b-de94-21b922237998"},"source":["forecast = m.predict(future)\n","forecast[['ds', 'yhat']].tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>yhat</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2180</th>\n","      <td>2021-07-30 20:00:00</td>\n","      <td>0.104753</td>\n","    </tr>\n","    <tr>\n","      <th>2181</th>\n","      <td>2021-07-30 21:00:00</td>\n","      <td>0.112730</td>\n","    </tr>\n","    <tr>\n","      <th>2182</th>\n","      <td>2021-07-30 22:00:00</td>\n","      <td>0.112358</td>\n","    </tr>\n","    <tr>\n","      <th>2183</th>\n","      <td>2021-07-30 23:00:00</td>\n","      <td>0.108306</td>\n","    </tr>\n","    <tr>\n","      <th>2184</th>\n","      <td>2021-07-31 00:00:00</td>\n","      <td>0.109603</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                      ds      yhat\n","2180 2021-07-30 20:00:00  0.104753\n","2181 2021-07-30 21:00:00  0.112730\n","2182 2021-07-30 22:00:00  0.112358\n","2183 2021-07-30 23:00:00  0.108306\n","2184 2021-07-31 00:00:00  0.109603"]},"metadata":{},"execution_count":107}]},{"cell_type":"code","metadata":{"id":"L-HWlN-ZAN-f","colab":{"base_uri":"https://localhost:8080/","height":320},"outputId":"d60d6079-2de7-40a4-aa7b-61aaec48793a"},"source":["plt.figure(figsize=(20,5))\n","\n","plt.plot(df[\"y\"][1184:], label=\"real\")\n","plt.plot(range(2184-24*7,2184),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(2184-24*7,2184),pred_series[:24*7+23-23]+0.013913, label=\"Transformer\")\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"UUMRI2j6Bocb"},"source":["#LSTMa"]},{"cell_type":"code","metadata":{"id":"7WLcYZZYBqhX"},"source":["import numpy as np \n","import pandas as pd \n","import matplotlib.pyplot as plt\n","\n","from tqdm import trange\n","import random"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hGUOrhKuBscl","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"7ce0fd0e-4b49-4269-e9e7-550d69976610"},"source":["data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version1.csv\", encoding='CP949')\n","\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>날짜</th>\n","      <th>종가</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2021-05-01 0:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2021-05-01 1:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2021-05-01 2:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2021-05-01 3:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2021-05-01 4:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0               날짜        종가\n","0           0  2021-05-01 0:00  0.611995\n","1           1  2021-05-01 1:00  0.611995\n","2           2  2021-05-01 2:00  0.611995\n","3           3  2021-05-01 3:00  0.611995\n","4           4  2021-05-01 4:00  0.611995"]},"metadata":{},"execution_count":110}]},{"cell_type":"code","metadata":{"id":"MR7XsjsxBtY_"},"source":["from sklearn.preprocessing import MinMaxScaler\n","min_max_scaler = MinMaxScaler()\n","data[\"종가\"] = min_max_scaler.fit_transform(data[\"종가\"].to_numpy().reshape(-1,1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LzqEQL_2Byuf"},"source":["train = data[:-24*7]\n","train = train[\"종가\"].to_numpy()\n","\n","test = data[-24*7:]\n","test = test[\"종가\"].to_numpy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Q6VbWpwB09L"},"source":["import torch\n","import torch.nn as nn\n","from torch import optim\n","import torch.nn.functional as F\n","\n","device = torch.device(\"cuda\", index=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vsgdq7a1B2Zf"},"source":["class lstm_encoder(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layers = 1):\n","        super(lstm_encoder, self).__init__()\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.num_layers = num_layers\n","\n","        self.lstm = nn.LSTM(input_size = input_size, hidden_size = hidden_size, num_layers = num_layers, batch_first=True)\n","\n","    def forward(self, x_input):\n","        lstm_out, self.hidden = self.lstm(x_input)\n","        return lstm_out, self.hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g3V7hzfIB4ua"},"source":["class lstm_decoder(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layers = 1):\n","        super(lstm_decoder, self).__init__()\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.num_layers = num_layers\n","\n","        self.lstm = nn.LSTM(input_size = input_size, hidden_size = hidden_size,num_layers = num_layers, batch_first=True)\n","        self.linear = nn.Linear(hidden_size, input_size)           \n","\n","    def forward(self, x_input, encoder_hidden_states):\n","        lstm_out, self.hidden = self.lstm(x_input.unsqueeze(-1), encoder_hidden_states)\n","        output = self.linear(lstm_out)\n","        \n","        return output, self.hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"khG35pB8B8Zb"},"source":["class lstm_encoder_decoder(nn.Module):\n","    def __init__(self, input_size, hidden_size):\n","        super(lstm_encoder_decoder, self).__init__()\n","\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","\n","        self.encoder = lstm_encoder(input_size = input_size, hidden_size = hidden_size)\n","        self.decoder = lstm_decoder(input_size = input_size, hidden_size = hidden_size)\n","\n","    def forward(self, inputs, targets, target_len, teacher_forcing_ratio):\n","        batch_size = inputs.shape[0]\n","        input_size = inputs.shape[2]\n","\n","        outputs = torch.zeros(batch_size, target_len, input_size)\n","\n","        _, hidden = self.encoder(inputs)\n","        decoder_input = inputs[:,-1, :]\n","        \n","        for t in range(target_len): \n","            out, hidden = self.decoder(decoder_input, hidden)\n","            out =  out.squeeze(1)\n","            if random.random() < teacher_forcing_ratio:\n","                decoder_input = targets[:, t, :]\n","            else:\n","                decoder_input = out\n","            outputs[:,t,:] = out\n","\n","        return outputs\n","\n","    def predict(self, inputs, target_len):\n","        inputs = inputs.unsqueeze(0)\n","        self.eval()\n","        batch_size = inputs.shape[0]\n","        input_size = inputs.shape[2]\n","        outputs = torch.zeros(batch_size, target_len, input_size)\n","        _, hidden = self.encoder(inputs)\n","        decoder_input = inputs[:,-1, :]\n","        for t in range(target_len): \n","            out, hidden = self.decoder(decoder_input, hidden)\n","            out =  out.squeeze(1)\n","            decoder_input = out\n","            outputs[:,t,:] = out\n","        return outputs.detach().numpy()[0,:,0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"euepwoDsB_AS"},"source":["from torch.utils.data import DataLoader, Dataset\n","\n","class windowDataset(Dataset):\n","    def __init__(self, y, input_window=80, output_window=20, stride=5):\n","        #총 데이터의 개수\n","        L = y.shape[0]\n","        #stride씩 움직일 때 생기는 총 sample의 개수\n","        num_samples = (L - input_window - output_window) // stride + 1\n","\n","        #input과 output\n","        X = np.zeros([input_window, num_samples])\n","        Y = np.zeros([output_window, num_samples])\n","\n","        for i in np.arange(num_samples):\n","            start_x = stride*i\n","            end_x = start_x + input_window\n","            X[:,i] = y[start_x:end_x]\n","\n","            start_y = stride*i + input_window\n","            end_y = start_y + output_window\n","            Y[:,i] = y[start_y:end_y]\n","\n","        X = X.reshape(X.shape[0], X.shape[1], 1).transpose((1,0,2))\n","        Y = Y.reshape(Y.shape[0], Y.shape[1], 1).transpose((1,0,2))\n","        self.x = X\n","        self.y = Y\n","        \n","        self.len = len(X)\n","    def __getitem__(self, i):\n","        return self.x[i], self.y[i]\n","    def __len__(self):\n","        return self.len"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fyRG-o1DCB_6"},"source":["iw = 24*14\n","ow = 24*7\n","\n","train_dataset = windowDataset(train, input_window=iw, output_window=ow, stride=1)\n","train_loader = DataLoader(train_dataset, batch_size=64)\n","# y_train_loader = DataLoader(y_train, batch_size=5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o6RRY-yGCEFL"},"source":["model = lstm_encoder_decoder(input_size=1, hidden_size=16).to(device)\n","# model.train_model(X_train.to(device), y_train.to(device), n_epochs=100, target_len=ow, batch_size=5, training_bprediction=\"mixed_teacher_forcing\", teacher_forcing_ratio=0.6, learning_rate=0.01, dynamic_tf=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zh7o6HY4CGC8"},"source":["#5000으로 할 경우 시간도 오래걸리고 에러도 커서 100으로 줄인다.\n","\n","learning_rate=0.01\n","epoch = 100\n","optimizer = optim.Adam(model.parameters(), lr = learning_rate)\n","criterion = nn.MSELoss()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zoaTXiKbCHce","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5aaa5d83-02f0-4cd9-bf54-590b5ab5fb6b"},"source":["from tqdm import tqdm\n","\n","model.train()\n","with tqdm(range(epoch)) as tr:\n","    for i in tr:\n","        total_loss = 0.0\n","        for x,y in train_loader:\n","            optimizer.zero_grad()\n","            x = x.to(device).float()\n","            y = y.to(device).float()\n","            output = model(x, y, ow, 0.6).to(device)\n","            loss = criterion(output, y)\n","            loss.backward()\n","            optimizer.step()\n","            total_loss += loss.cpu().item()\n","        tr.set_postfix(loss=\"{0:.5f}\".format(total_loss/len(train_loader)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [04:54<00:00,  2.94s/it, loss=0.00214]\n"]}]},{"cell_type":"code","metadata":{"id":"Shr1ZdBvCJfq"},"source":["predict = model.predict(torch.tensor(train_dataset[0][0]).to(device).float(), target_len=ow)\n","real = train_dataset[0][1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6Y_bM2yLCMSN"},"source":["predict = model.predict(torch.tensor(train[-24*7*2:]).reshape(-1,1).to(device).float(), target_len=ow)\n","real = data[\"종가\"].to_numpy()\n","\n","predict = min_max_scaler.inverse_transform(predict.reshape(-1,1))\n","real = min_max_scaler.inverse_transform(real.reshape(-1,1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AcWSBCdLCOeU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b8366bc5-c295-4b69-f336-58c4791255fc"},"source":["real.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2185, 1)"]},"metadata":{},"execution_count":124}]},{"cell_type":"code","metadata":{"id":"Qe3V9gtwCPsl","colab":{"base_uri":"https://localhost:8080/","height":318},"outputId":"854e46ce-b0bb-4828-c940-65d456b7633b"},"source":["plt.figure(figsize=(20,5))\n","plt.plot(range(1183,2184), real[1184:], label=\"real\")\n","plt.plot(range(2184-24*7,2184), predict[-24*7:], label=\"LSTMa\")\n","plt.plot(range(2184-24*7,2184),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(2184-24*7,2184),pred_series[:24*7+23-23]+0.013913, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZHCM0K5uDzwc"},"source":["#Informer"]},{"cell_type":"code","metadata":{"id":"Ighg_VhkDrwT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"70e2c96a-6922-4204-a4d5-0e50163d3121"},"source":["!git clone https://github.com/zhouhaoyi/Informer2020.git"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'Informer2020'...\n","remote: Enumerating objects: 535, done.\u001b[K\n","remote: Total 535 (delta 0), reused 0 (delta 0), pack-reused 535\u001b[K\n","Receiving objects: 100% (535/535), 6.47 MiB | 6.49 MiB/s, done.\n","Resolving deltas: 100% (306/306), done.\n"]}]},{"cell_type":"code","metadata":{"id":"2yxRebPpD1nz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9e75d8c9-5f0a-4a74-de07-676788bc245a"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"Q_nMD1gGD5ND"},"source":["import sys\n","if not 'Informer2020' in sys.path:\n","    sys.path += ['Informer2020']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iTVBZNqqD6sX"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import MinMaxScaler\n","\n","from datetime import timedelta\n","import torch\n","from torch import nn\n","from torch import optim\n","from torch.utils.data import DataLoader, Dataset\n","\n","from tqdm import tqdm\n","from models.model import Informer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jjqkV_XfD8jj"},"source":["class StandardScaler():\n","    def __init__(self):\n","        self.mean = 0.\n","        self.std = 1.\n","    \n","    def fit(self, data):\n","        self.mean = data.mean(0)\n","        self.std = data.std(0)\n","\n","    def transform(self, data):\n","        mean = torch.from_numpy(self.mean).type_as(data).to(data.device) if torch.is_tensor(data) else self.mean\n","        std = torch.from_numpy(self.std).type_as(data).to(data.device) if torch.is_tensor(data) else self.std\n","        return (data - mean) / std\n","\n","    def inverse_transform(self, data):\n","        mean = torch.from_numpy(self.mean).type_as(data).to(data.device) if torch.is_tensor(data) else self.mean\n","        std = torch.from_numpy(self.std).type_as(data).to(data.device) if torch.is_tensor(data) else self.std\n","        return (data * std) + mean\n","        \n","\n","def time_features(dates, freq='h'):\n","    dates['month'] = dates.date.apply(lambda row:row.month,1)\n","    dates['day'] = dates.date.apply(lambda row:row.day,1)\n","    dates['weekday'] = dates.date.apply(lambda row:row.weekday(),1)\n","    dates['hour'] = dates.date.apply(lambda row:row.hour,1)\n","    dates['minute'] = dates.date.apply(lambda row:row.minute,1)\n","    dates['minute'] = dates.minute.map(lambda x:x//15)\n","    freq_map = {\n","        'y':[],'m':['month'],'w':['month'],'d':['month','day','weekday'],\n","        'b':['month','day','weekday'],'h':['month','day','weekday','hour'],\n","        't':['month','day','weekday','hour','minute'],\n","    }\n","    return dates[freq_map[freq.lower()]].values\n","\n","def _process_one_batch(batch_x, batch_y, batch_x_mark, batch_y_mark):\n","    batch_x = batch_x.float().to(device)\n","    batch_y = batch_y.float()\n","    batch_x_mark = batch_x_mark.float().to(device)\n","    batch_y_mark = batch_y_mark.float().to(device)\n","    dec_inp = torch.zeros([batch_y.shape[0], pred_len, batch_y.shape[-1]]).float()\n","    dec_inp = torch.cat([batch_y[:,:label_len,:], dec_inp], dim=1).float().to(device)\n","    outputs = model(batch_x, batch_x_mark, dec_inp, batch_y_mark)\n","    batch_y = batch_y[:,-pred_len:,0:].to(device)\n","    return outputs, batch_y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftToXwQzD_XZ"},"source":["class Dataset_Pred(Dataset):\n","    def __init__(self, dataframe, size=None, scale=True):\n","        self.seq_len = size[0]\n","        self.label_len = size[1]\n","        self.pred_len = size[2]\n","        self.dataframe = dataframe\n","        \n","        self.scale = scale\n","        self.__read_data__()\n","\n","    def __read_data__(self):\n","        self.scaler = StandardScaler()\n","        df_raw = self.dataframe\n","        df_raw[\"date\"] = pd.to_datetime(df_raw[\"date\"])\n","\n","        delta = df_raw[\"date\"].iloc[1] - df_raw[\"date\"].iloc[0]\n","        if delta>=timedelta(hours=1):\n","            self.freq='h'\n","        else:\n","            self.freq='t'\n","\n","        \n","\n","        border1 = 0\n","        border2 = len(df_raw)\n","        cols_data = df_raw.columns[1:]\n","        df_data = df_raw[cols_data]\n","\n","\n","        if self.scale:\n","            self.scaler.fit(df_data.values)\n","            data = self.scaler.transform(df_data.values)\n","        else:\n","            data = df_data.values\n","            \n","        tmp_stamp = df_raw[['date']][border1:border2]\n","        tmp_stamp['date'] = pd.to_datetime(tmp_stamp.date)\n","        pred_dates = pd.date_range(tmp_stamp.date.values[-1], periods=self.pred_len+1, freq=self.freq)\n","        \n","        df_stamp = pd.DataFrame(columns = ['date'])\n","        df_stamp.date = list(tmp_stamp.date.values) + list(pred_dates[1:])\n","        data_stamp = time_features(df_stamp, freq=self.freq)\n","\n","        self.data_x = data[border1:border2]\n","        self.data_y = data[border1:border2]\n","        self.data_stamp = data_stamp\n","    \n","    def __getitem__(self, index):\n","        s_begin = index\n","        s_end = s_begin + self.seq_len\n","        r_begin = s_end - self.label_len\n","        r_end = r_begin + self.label_len + self.pred_len\n","\n","        seq_x = self.data_x[s_begin:s_end]\n","        seq_y = self.data_y[r_begin:r_end]\n","        seq_x_mark = self.data_stamp[s_begin:s_end]\n","        seq_y_mark = self.data_stamp[r_begin:r_end]\n","        return seq_x, seq_y, seq_x_mark, seq_y_mark\n","\n","    def __len__(self):\n","        return len(self.data_x) - self.seq_len- self.pred_len + 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HOXR317aEHvb","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"53032aaf-38e5-4d12-83d1-8bceb7c69bae"},"source":["data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version1.csv\", encoding='CP949')\n","\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>날짜</th>\n","      <th>종가</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2021-05-01 0:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2021-05-01 1:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2021-05-01 2:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2021-05-01 3:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2021-05-01 4:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0               날짜        종가\n","0           0  2021-05-01 0:00  0.611995\n","1           1  2021-05-01 1:00  0.611995\n","2           2  2021-05-01 2:00  0.611995\n","3           3  2021-05-01 3:00  0.611995\n","4           4  2021-05-01 4:00  0.611995"]},"metadata":{},"execution_count":132}]},{"cell_type":"code","metadata":{"id":"cWQ9usQTEKUl"},"source":["data[\"date\"] = data[\"날짜\"]\n","data[\"date\"] = pd.to_datetime(data[\"date\"], dayfirst = True)\n","data[\"value\"] = data[\"종가\"]\n","\n","min_max_scaler = MinMaxScaler()\n","data[\"value\"] = min_max_scaler.fit_transform(data[\"value\"].to_numpy().reshape(-1,1)).reshape(-1)\n","data = data[[\"date\", \"value\"]]\n","\n","data_train = data.iloc[:-24*7].copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nrnJWkCXENIX"},"source":["pred_len = 24*7\n","\n","seq_len = pred_len#인풋 크기\n","label_len = pred_len#디코더에서 참고할 크기\n","pred_len = pred_len#예측할 크기\n","\n","batch_size = 10\n","shuffle_flag = True\n","num_workers = 0\n","drop_last = True\n","\n","\n","\n","dataset = Dataset_Pred(dataframe=data_train ,scale=True, size = (seq_len, label_len,pred_len))\n","data_loader = DataLoader(dataset,batch_size=batch_size,shuffle=shuffle_flag,num_workers=num_workers,drop_last=drop_last)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4rWuHee2EPMC"},"source":["enc_in = 1\n","dec_in = 1\n","c_out = 1\n","device = torch.device(\"cuda:0\")\n","\n","model = Informer(enc_in, dec_in, c_out, seq_len, label_len, pred_len, device = device).to(device)\n","learning_rate = 1e-4\n","criterion =  nn.MSELoss()\n","\n","model_optim = optim.Adam(model.parameters(), lr=learning_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3OuiFBlHESYz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"28c4269a-a423-424f-a3ee-bac25f7110c6"},"source":["# Informer는 error를 100하는게 시간도 덜 걸리고 에러도 적다.\n","\n","train_epochs = 100\n","model.train()\n","progress = tqdm(range(train_epochs))\n","for epoch in progress:\n","    train_loss = []\n","    for i, (batch_x,batch_y,batch_x_mark,batch_y_mark) in enumerate(data_loader):\n","        model_optim.zero_grad()\n","        pred, true = _process_one_batch(batch_x, batch_y, batch_x_mark, batch_y_mark)\n","        loss = criterion(pred, true)\n","        train_loss.append(loss.item())\n","        loss.backward()\n","        model_optim.step()\n","    train_loss = np.average(train_loss)\n","    progress.set_description(\"loss: {:0.6f}\".format(train_loss))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/100 [00:00<?, ?it/s]/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:652: UserWarning:\n","\n","Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)\n","\n","loss: 0.020486: 100%|██████████| 100/100 [21:54<00:00, 13.15s/it]\n"]}]},{"cell_type":"code","metadata":{"id":"s0pez33IETCg","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ba2c9072-40f7-45e1-8a05-02afa687c019"},"source":["import time\n","now = time.time()\n","scaler = dataset.scaler\n","df_test = data_train.copy()\n","df_test[\"value\"] = scaler.transform(df_test[\"value\"])\n","df_test[\"date\"] = pd.to_datetime(df_test[\"date\"].values)\n","\n","delta = df_test[\"date\"][1] - df_test[\"date\"][0]\n","for i in range(pred_len):\n","    df_test = df_test.append({\"date\":df_test[\"date\"].iloc[-1]+delta}, ignore_index=True)\n","df_test = df_test.fillna(0)\n","\n","\n","df_test_x = df_test.iloc[-seq_len-pred_len:-pred_len].copy()\n","df_test_y = df_test.iloc[-label_len-pred_len:].copy()\n","\n","df_test_numpy = df_test.to_numpy()[:,1:].astype(\"float\")\n","test_time_x = time_features(df_test_x, freq=dataset.freq) #인풋 타임 스템프\n","test_data_x = df_test_numpy[-seq_len-pred_len:-pred_len] #인풋 데이터\n","\n","\n","test_time_y = time_features(df_test_y, freq=dataset.freq) #아웃풋 타임스템프\n","test_data_y =df_test_numpy[-label_len-pred_len:]\n","test_data_y[-pred_len:] = np.zeros_like(test_data_y[-pred_len:]) #예측하는 부분을 0으로 채워준다.\n","\n","\n","\n","test_time_x = test_time_x\n","test_time_y = test_time_y\n","test_data_y = test_data_y.astype(np.float64)\n","test_data_x = test_data_x.astype(np.float64)\n","\n","_test = [(test_data_x,test_data_y,test_time_x,test_time_y)]\n","_test_loader = DataLoader(_test,batch_size=1,shuffle=False)\n","\n","preds = []\n","\n","with torch.no_grad():\n","    for i, (batch_x,batch_y,batch_x_mark,batch_y_mark) in enumerate(_test_loader):\n","        \n","        batch_x = batch_x.float().to(device)\n","        batch_y = batch_y.float().to(device)\n","\n","        batch_x_mark = batch_x_mark.float().to(device)\n","        batch_y_mark = batch_y_mark.float().to(device)\n","\n","        outputs = model(batch_x, batch_x_mark, batch_y, batch_y_mark)\n","        preds = outputs.detach().cpu().numpy()\n","\n","preds = scaler.inverse_transform(preds[0])\n","\n","df_test.iloc[-pred_len:, 1:] = preds\n","print(time.time() - now)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.3753817081451416\n"]}]},{"cell_type":"code","metadata":{"id":"UKVKmhZLEWXz","colab":{"base_uri":"https://localhost:8080/","height":318},"outputId":"aaaad060-ff9a-4003-de41-5cc6803fc570"},"source":["import matplotlib.pyplot as plt\n","\n","real = data[\"value\"].to_numpy()\n","result = df_test[\"value\"].iloc[-24*7:].to_numpy()\n","\n","real = min_max_scaler.inverse_transform(real.reshape(-1,1)).reshape(-1)\n","result = min_max_scaler.inverse_transform(result.reshape(-1,1)).reshape(-1)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(range(1183,2184),real[1184:], label=\"real\")\n","plt.plot(range(2184-24*7,2184),result, label=\"Informer\")\n","plt.plot(range(2184-24*7,2184), predict[-24*7:], label=\"LSTMa\")\n","plt.plot(range(2184-24*7,2184),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(2184-24*7,2184),pred_series[:24*7+23-23]+0.013913, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"oyQIUFttGo_w"},"source":["#ARIMA"]},{"cell_type":"code","metadata":{"id":"hiLPHVi8FtJA"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U3r5vY8HFudT","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"a8b3c447-49cf-4935-b62f-0e8f66b82c9a"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version1.csv\", encoding='CP949')\n","df = df.drop(df.columns[0], axis=1)\n","df.columns = [\"ds\",\"y\"]\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-05-01 0:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-05-01 1:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-05-01 2:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-05-01 3:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-05-01 4:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                ds         y\n","0  2021-05-01 0:00  0.611995\n","1  2021-05-01 1:00  0.611995\n","2  2021-05-01 2:00  0.611995\n","3  2021-05-01 3:00  0.611995\n","4  2021-05-01 4:00  0.611995"]},"metadata":{},"execution_count":140}]},{"cell_type":"code","metadata":{"id":"3H-pHMqLF1ND"},"source":["df_train = df.iloc[:-24*7]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vVJjfCniF1xb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ab2330f6-915a-416c-a067-3dec15bda387"},"source":["from statsmodels.tsa.seasonal import seasonal_decompose"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning:\n","\n","pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","\n"]}]},{"cell_type":"code","metadata":{"id":"1AzDqmYFF3qS","colab":{"base_uri":"https://localhost:8080/","height":506},"outputId":"eb2478aa-d24e-4061-bc83-11f6d86ec9d3"},"source":["import statsmodels.api as sm\n","fig = plt.figure(figsize=(20,8))\n","ax1 = fig.add_subplot(211)\n","fig = sm.graphics.tsa.plot_acf(df_train[\"y\"], lags=20, ax=ax1)\n","\n","fig = plt.figure(figsize=(20,8))\n","ax1 = fig.add_subplot(212)\n","fig = sm.graphics.tsa.plot_pacf(df_train[\"y\"], lags=20, ax=ax1)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ljPV71OzF64s"},"source":["from statsmodels.tsa.arima_model import ARIMA\n","from statsmodels.tsa.statespace.sarimax import SARIMAX\n","import itertools\n","from tqdm import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rtlXujmwF60T","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7c018354-8a99-4212-9e35-d4c70014d7c3"},"source":["p = range(0,3)\n","d = range(1,2)\n","q = range(0,6)\n","m = 24\n","\n","pdq = list(itertools.product(p,d,q))\n","seasonal_pdq = [(x[0],x[1], x[2], m) for x in list(itertools.product(p,d,q))]\n","\n","aic = []\n","params = []\n","\n","with tqdm(total = len(pdq) * len(seasonal_pdq)) as pg:\n","    for i in pdq:\n","        for j in seasonal_pdq:\n","            pg.update(1)\n","            try:\n","                model = SARIMAX(df_train[\"y\"], order=(i), season_order = (j))\n","                model_fit = model.fit()\n","                # print(\"SARIMA:{}{}, AIC:{}\".format(i,j, round(model_fit.aic,2)))\n","                aic.append(round(model_fit.aic,2))\n","                params.append((i,j))\n","            except:\n","                continue"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":[" 61%|██████▏   | 199/324 [01:09<01:24,  1.48it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 200/324 [01:11<02:24,  1.16s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 201/324 [01:13<03:08,  1.54s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 202/324 [01:16<03:38,  1.79s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 203/324 [01:18<03:57,  1.96s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 204/324 [01:20<04:13,  2.11s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 205/324 [01:23<04:21,  2.20s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▎   | 206/324 [01:25<04:24,  2.24s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▍   | 207/324 [01:28<04:27,  2.28s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▍   | 208/324 [01:30<04:26,  2.30s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▍   | 209/324 [01:32<04:28,  2.34s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▍   | 210/324 [01:35<04:27,  2.35s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▌   | 211/324 [01:37<04:26,  2.36s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▌   | 212/324 [01:39<04:25,  2.37s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▌   | 213/324 [01:42<04:20,  2.35s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▌   | 214/324 [01:44<04:19,  2.36s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▋   | 215/324 [01:46<04:16,  2.35s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 67%|██████▋   | 216/324 [01:49<04:14,  2.35s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 89%|████████▉ | 289/324 [02:26<00:43,  1.24s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|████████▉ | 290/324 [02:28<00:52,  1.54s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|████████▉ | 291/324 [02:31<00:57,  1.74s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|█████████ | 292/324 [02:33<01:00,  1.88s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|█████████ | 293/324 [02:35<01:01,  1.98s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████ | 294/324 [02:37<01:01,  2.06s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████ | 295/324 [02:39<01:01,  2.11s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████▏| 296/324 [02:42<00:59,  2.13s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 297/324 [02:44<00:58,  2.17s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 298/324 [02:46<00:56,  2.19s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 299/324 [02:48<00:55,  2.20s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 300/324 [02:51<00:53,  2.25s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 301/324 [02:53<00:52,  2.28s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 302/324 [02:55<00:49,  2.26s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▎| 303/324 [02:58<00:47,  2.24s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 304/324 [03:00<00:44,  2.23s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 305/324 [03:02<00:42,  2.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 306/324 [03:04<00:39,  2.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▍| 307/324 [03:06<00:37,  2.21s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▌| 308/324 [03:09<00:37,  2.36s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▌| 309/324 [03:12<00:37,  2.48s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▌| 310/324 [03:15<00:35,  2.56s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▌| 311/324 [03:17<00:34,  2.63s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▋| 312/324 [03:20<00:31,  2.66s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 313/324 [03:23<00:29,  2.69s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 314/324 [03:25<00:26,  2.68s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 315/324 [03:28<00:24,  2.68s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 316/324 [03:31<00:21,  2.70s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 317/324 [03:34<00:18,  2.71s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 318/324 [03:36<00:16,  2.71s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 319/324 [03:39<00:13,  2.70s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 320/324 [03:42<00:10,  2.70s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 321/324 [03:44<00:08,  2.70s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 322/324 [03:47<00:05,  2.71s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|█████████▉| 323/324 [03:50<00:02,  2.71s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|██████████| 324/324 [03:52<00:00,  2.69s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|██████████| 324/324 [03:55<00:00,  1.37it/s]\n"]}]},{"cell_type":"code","metadata":{"id":"t77yJtlmGCGl","colab":{"base_uri":"https://localhost:8080/","height":500},"outputId":"c56e7fc8-c25b-427f-e6ac-5ce551a69b08"},"source":["optimal = [(params[i],j) for i,j in enumerate(aic) if j == min(aic)]\n","model_opt = SARIMAX(df_train[\"y\"], order = optimal[0][0][0], seasonal_order = optimal[0][0][1])\n","model_opt_fit = model_opt.fit()\n","model_opt_fit.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>Statespace Model Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>                  <td>y</td>               <th>  No. Observations:  </th>   <td>2017</td>  \n","</tr>\n","<tr>\n","  <th>Model:</th>           <td>SARIMAX(1, 1, 5)x(0, 1, 0, 24)</td> <th>  Log Likelihood     </th> <td>-355.956</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>                   <td>Mon, 20 Sep 2021</td>        <th>  AIC                </th>  <td>725.913</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                       <td>09:33:48</td>            <th>  BIC                </th>  <td>765.091</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                         <td>0</td>               <th>  HQIC               </th>  <td>740.301</td>\n","</tr>\n","<tr>\n","  <th></th>                             <td> - 2017</td>            <th>                     </th>     <td> </td>   \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>     <td> </td>   \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>ar.L1</th>  <td>   -0.6343</td> <td>    3.898</td> <td>   -0.163</td> <td> 0.871</td> <td>   -8.273</td> <td>    7.005</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>  <td>    0.0343</td> <td>    3.898</td> <td>    0.009</td> <td> 0.993</td> <td>   -7.605</td> <td>    7.674</td>\n","</tr>\n","<tr>\n","  <th>ma.L2</th>  <td>   -0.4892</td> <td>    2.339</td> <td>   -0.209</td> <td> 0.834</td> <td>   -5.073</td> <td>    4.094</td>\n","</tr>\n","<tr>\n","  <th>ma.L3</th>  <td>   -0.1045</td> <td>    0.425</td> <td>   -0.246</td> <td> 0.806</td> <td>   -0.937</td> <td>    0.728</td>\n","</tr>\n","<tr>\n","  <th>ma.L4</th>  <td>   -0.0141</td> <td>    0.142</td> <td>   -0.099</td> <td> 0.921</td> <td>   -0.293</td> <td>    0.265</td>\n","</tr>\n","<tr>\n","  <th>ma.L5</th>  <td>   -0.0039</td> <td>    0.043</td> <td>   -0.092</td> <td> 0.926</td> <td>   -0.088</td> <td>    0.080</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th> <td>    0.0837</td> <td>    0.001</td> <td>  135.923</td> <td> 0.000</td> <td>    0.082</td> <td>    0.085</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (Q):</th>          <td>537.56</td> <th>  Jarque-Bera (JB):  </th> <td>113234.34</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                 <td>0.00</td>  <th>  Prob(JB):          </th>   <td>0.00</td>   \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th>  <td>0.57</td>  <th>  Skew:              </th>   <td>-0.62</td>  \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>     <td>0.00</td>  <th>  Kurtosis:          </th>   <td>39.91</td>  \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."],"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                                 Statespace Model Results                                 \n","==========================================================================================\n","Dep. Variable:                                  y   No. Observations:                 2017\n","Model:             SARIMAX(1, 1, 5)x(0, 1, 0, 24)   Log Likelihood                -355.956\n","Date:                            Mon, 20 Sep 2021   AIC                            725.913\n","Time:                                    09:33:48   BIC                            765.091\n","Sample:                                         0   HQIC                           740.301\n","                                           - 2017                                         \n","Covariance Type:                              opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","ar.L1         -0.6343      3.898     -0.163      0.871      -8.273       7.005\n","ma.L1          0.0343      3.898      0.009      0.993      -7.605       7.674\n","ma.L2         -0.4892      2.339     -0.209      0.834      -5.073       4.094\n","ma.L3         -0.1045      0.425     -0.246      0.806      -0.937       0.728\n","ma.L4         -0.0141      0.142     -0.099      0.921      -0.293       0.265\n","ma.L5         -0.0039      0.043     -0.092      0.926      -0.088       0.080\n","sigma2         0.0837      0.001    135.923      0.000       0.082       0.085\n","===================================================================================\n","Ljung-Box (Q):                      537.56   Jarque-Bera (JB):            113234.34\n","Prob(Q):                              0.00   Prob(JB):                         0.00\n","Heteroskedasticity (H):               0.57   Skew:                            -0.62\n","Prob(H) (two-sided):                  0.00   Kurtosis:                        39.91\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","\"\"\""]},"metadata":{},"execution_count":146}]},{"cell_type":"code","metadata":{"id":"PojlDVwHGDm9","colab":{"base_uri":"https://localhost:8080/","height":320},"outputId":"120cd900-fd85-4bac-a6a3-235b93ce1920"},"source":["model = SARIMAX(df_train[\"y\"], order=optimal[0][0][0], seasonal_order=optimal[0][0][1])\n","model_fit = model.fit(disp=0)\n","ARIMA_forecast = model_fit.forecast(steps=24*7)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(range(0,2184), df[\"y\"].iloc[1:], label=\"Real\")\n","\n","plt.plot(ARIMA_forecast, label=\"ARIMA\")\n","plt.plot(range(2184-24*7,2184),result, label=\"Informer\")\n","plt.plot(range(2184-24*7,2184), predict[-24*7:], label=\"LSTMa\")\n","plt.plot(range(2184-24*7,2184),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(2184-24*7,2184),pred_series[:24*7+23-23]+0.013913, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"b0hfHNU0ec52","outputId":"8c589cb1-bb74-40d4-c078-e9cc83b084e8"},"source":["plt.figure(figsize=(20,5))\n","plt.plot(range(1183,2184), df[\"y\"].iloc[1184:], label=\"Real\")\n","\n","plt.plot(ARIMA_forecast, label=\"ARIMA\")\n","plt.plot(range(2184-24*7,2184),result, label=\"Informer\")\n","plt.plot(range(2184-24*7,2184), predict[-24*7:], label=\"LSTMa\")\n","plt.plot(range(2184-24*7,2184),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(2184-24*7,2184),pred_series[:24*7+23-23]+0.013913, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"a3VzMw4tIcni","colab":{"base_uri":"https://localhost:8080/"},"outputId":"19539aa4-3b33-4a0c-e7a5-323a06c1e62c"},"source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","\n","def MAPEval(y_pred, y_true):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n","\n","def MSE(y_true, y_pred):\n","    return np.mean(np.square((y_true - y_pred)))\n","\n","def MAE(y_true, y_pred): \n","    return np.mean(np.abs((y_true - y_pred)))\n","\n","\n","\n","print('Transformer')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(pred_series[:24*7+23-23]+0.013913, target_series+0.013913), mean_squared_error(target_series+0.013913, pred_series[:24*7+23-23]+0.013913), mean_absolute_error(target_series+0.013913, pred_series[:24*7+23-23]+0.013913)))\n","\n","print('Informer')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(result, real[-24*7:]), mean_squared_error(real[-24*7:], result), mean_absolute_error(real[-24*7:], result)))\n","\n","print('ARIMA')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(ARIMA_forecast, df[\"y\"].iloc[-24*7:]), mean_squared_error(df[\"y\"].iloc[-24*7:], ARIMA_forecast), mean_absolute_error(df[\"y\"].iloc[-24*7:], ARIMA_forecast)))\n","\n","print('Prophet')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(forecast['yhat'][2184-24*7:],df[\"y\"][2184-24*7:]), mean_squared_error(df[\"y\"][2184-24*7:], forecast['yhat'][2184-24*7:]), mean_absolute_error(df[\"y\"][2184-24*7:], forecast['yhat'][2184-24*7:])))\n","\n","print('LSTMa')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(predict[-24*7:],real[-24*7:]),  mean_squared_error(real[-24*7:], predict[-24*7:]), mean_absolute_error(real[-24*7:], predict[-24*7:])))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Transformer\n","----------------------------------------\n","MAPE: 261.5427017211914 |\n","MSE: 0.33454182744026184 |\n","MAE : 0.4235101044178009\n","\n","Informer\n","----------------------------------------\n","MAPE: 120.00558148645011 |\n","MSE: 0.06843869223763847 |\n","MAE : 0.21423555668187136\n","\n","ARIMA\n","----------------------------------------\n","MAPE: 103.84683028143729 |\n","MSE: 0.08854230870652928 |\n","MAE : 0.20716509271699884\n","\n","Prophet\n","----------------------------------------\n","MAPE: 138.77189441891224 |\n","MSE: 0.060591606700598113 |\n","MAE : 0.229197708726709\n","\n","LSTMa\n","----------------------------------------\n","MAPE: 267.52331802698683 |\n","MSE: 0.2015936000252191 |\n","MAE : 0.3915457347450834\n","\n"]}]},{"cell_type":"code","metadata":{"id":"Jfla6TUQd_tB"},"source":[""],"execution_count":null,"outputs":[]}]}