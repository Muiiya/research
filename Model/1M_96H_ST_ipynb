{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3"},"colab":{"name":"1M_96H_ST_ipynb","provenance":[],"collapsed_sections":[],"machine_shape":"hm"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"axF7OBsg-AJs"},"source":["#Transformer"]},{"cell_type":"code","metadata":{"id":"MiFdiUPY8CAr","colab":{"base_uri":"https://localhost:8080/"},"outputId":"48cb7a99-825d-4c41-8bb2-fa87bfd7a1bb"},"source":["from google.colab import drive\n","drive.mount('/content/drive') "],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"PtFKWnKP7mKd","colab":{"base_uri":"https://localhost:8080/","height":252},"outputId":"7df6403c-058d-4c0f-ee9b-35c0d86548a8"},"source":["# informer, ARIMA, Prophet, LSTMa와는 다른 형식의 CSV를 사용한다.(Version2)\n","\n","!pip install pandas\n","\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version2.csv', encoding='cp949')\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.1.5)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.19.5)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas) (2018.9)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>날짜</th>\n","      <th>2021-07-01 0:00</th>\n","      <th>2021-07-01 1:00</th>\n","      <th>2021-07-01 2:00</th>\n","      <th>2021-07-01 3:00</th>\n","      <th>2021-07-01 4:00</th>\n","      <th>2021-07-01 5:00</th>\n","      <th>2021-07-01 6:00</th>\n","      <th>2021-07-01 7:00</th>\n","      <th>2021-07-01 8:00</th>\n","      <th>2021-07-01 9:00</th>\n","      <th>2021-07-01 10:00</th>\n","      <th>2021-07-01 11:00</th>\n","      <th>2021-07-01 12:00</th>\n","      <th>2021-07-01 13:00</th>\n","      <th>2021-07-01 14:00</th>\n","      <th>2021-07-01 15:00</th>\n","      <th>2021-07-01 16:00</th>\n","      <th>2021-07-01 17:00</th>\n","      <th>2021-07-01 18:00</th>\n","      <th>2021-07-01 19:00</th>\n","      <th>2021-07-01 20:00</th>\n","      <th>2021-07-01 21:00</th>\n","      <th>2021-07-01 22:00</th>\n","      <th>2021-07-01 23:00</th>\n","      <th>2021-07-02 0:00</th>\n","      <th>2021-07-02 1:00</th>\n","      <th>2021-07-02 2:00</th>\n","      <th>2021-07-02 3:00</th>\n","      <th>2021-07-02 4:00</th>\n","      <th>2021-07-02 5:00</th>\n","      <th>2021-07-02 6:00</th>\n","      <th>2021-07-02 7:00</th>\n","      <th>2021-07-02 8:00</th>\n","      <th>2021-07-02 9:00</th>\n","      <th>2021-07-02 10:00</th>\n","      <th>2021-07-02 11:00</th>\n","      <th>2021-07-02 12:00</th>\n","      <th>2021-07-02 13:00</th>\n","      <th>2021-07-02 14:00</th>\n","      <th>...</th>\n","      <th>2021-07-29 9:00</th>\n","      <th>2021-07-29 10:00</th>\n","      <th>2021-07-29 11:00</th>\n","      <th>2021-07-29 12:00</th>\n","      <th>2021-07-29 13:00</th>\n","      <th>2021-07-29 14:00</th>\n","      <th>2021-07-29 15:00</th>\n","      <th>2021-07-29 16:00</th>\n","      <th>2021-07-29 17:00</th>\n","      <th>2021-07-29 18:00</th>\n","      <th>2021-07-29 19:00</th>\n","      <th>2021-07-29 20:00</th>\n","      <th>2021-07-29 21:00</th>\n","      <th>2021-07-29 22:00</th>\n","      <th>2021-07-29 23:00</th>\n","      <th>2021-07-30 0:00</th>\n","      <th>2021-07-30 1:00</th>\n","      <th>2021-07-30 2:00</th>\n","      <th>2021-07-30 3:00</th>\n","      <th>2021-07-30 4:00</th>\n","      <th>2021-07-30 5:00</th>\n","      <th>2021-07-30 6:00</th>\n","      <th>2021-07-30 7:00</th>\n","      <th>2021-07-30 8:00</th>\n","      <th>2021-07-30 9:00</th>\n","      <th>2021-07-30 10:00</th>\n","      <th>2021-07-30 11:00</th>\n","      <th>2021-07-30 12:00</th>\n","      <th>2021-07-30 13:00</th>\n","      <th>2021-07-30 14:00</th>\n","      <th>2021-07-30 15:00</th>\n","      <th>2021-07-30 16:00</th>\n","      <th>2021-07-30 17:00</th>\n","      <th>2021-07-30 18:00</th>\n","      <th>2021-07-30 19:00</th>\n","      <th>2021-07-30 20:00</th>\n","      <th>2021-07-30 21:00</th>\n","      <th>2021-07-30 22:00</th>\n","      <th>2021-07-30 23:00</th>\n","      <th>2021-07-31 0:00</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>종가</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>0.124688</td>\n","      <td>-0.249066</td>\n","      <td>0.124844</td>\n","      <td>0.124844</td>\n","      <td>-0.124688</td>\n","      <td>...</td>\n","      <td>0.255428</td>\n","      <td>1.019108</td>\n","      <td>-0.504414</td>\n","      <td>0.253485</td>\n","      <td>-0.126422</td>\n","      <td>-0.126582</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>-0.505689</td>\n","      <td>-0.505689</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 722 columns</p>\n","</div>"],"text/plain":["   날짜  2021-07-01 0:00  ...  2021-07-30 23:00  2021-07-31 0:00\n","0  종가         0.124688  ...         -0.127065        -0.127065\n","\n","[1 rows x 722 columns]"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"Z3_TiLg07mKk","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4e11bf93-fd7f-41fc-82d4-00676fbc4291"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1 entries, 0 to 0\n","Columns: 722 entries, 날짜 to 2021-07-31 0:00\n","dtypes: float64(721), object(1)\n","memory usage: 5.8+ KB\n"]}]},{"cell_type":"code","metadata":{"id":"m6hUoeDr7mKm","colab":{"base_uri":"https://localhost:8080/"},"outputId":"93f32f00-41c7-4a07-c129-4ddcb9528745"},"source":["data_start_date = df.columns[1]\n","data_end_date = df.columns[-1]\n","print('Data ranges from %s to %s' % (data_start_date, data_end_date))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Data ranges from 2021-07-01 0:00 to 2021-07-31 0:00\n"]}]},{"cell_type":"markdown","metadata":{"id":"-SsCTE-O7mKo"},"source":["### Train and Validation Series Partioning\n"]},{"cell_type":"code","metadata":{"id":"OYUANKZx7mKs","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6ba48d0a-cb86-4994-e55b-28161074523b"},"source":["######################## CHECK #########################\n","# 기준시간이 hour이므로, 7일 예측한다면 7*24로 설정한다.\n","\n","\n","from datetime import timedelta\n","\n","pred_steps = 24*4+23\n","pred_length=timedelta(hours = pred_steps)\n","\n","first_day = pd.to_datetime(data_start_date)\n","last_day = pd.to_datetime(data_end_date)\n","\n","val_pred_start = last_day - pred_length + timedelta(1)\n","val_pred_end = last_day\n","print(val_pred_start, val_pred_end)\n","\n","train_pred_start = val_pred_start - pred_length\n","train_pred_end = val_pred_start - timedelta(days=1)\n","print(train_pred_start, train_pred_end)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-07-27 01:00:00 2021-07-31 00:00:00\n","2021-07-22 02:00:00 2021-07-26 01:00:00\n"]}]},{"cell_type":"code","metadata":{"id":"Yc-Nwfy07mKt","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4c6f5279-348c-47cd-fb77-0b6334f7e56e"},"source":["enc_length = train_pred_start - first_day\n","print(enc_length)\n","\n","train_enc_start = first_day\n","train_enc_end = train_enc_start + enc_length - timedelta(1)\n","\n","val_enc_start = train_enc_start + pred_length\n","val_enc_end = val_enc_start + enc_length - timedelta(1)\n","print(train_enc_start, train_enc_end)\n","print(val_enc_start, val_enc_end)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["21 days 02:00:00\n","2021-07-01 00:00:00 2021-07-21 02:00:00\n","2021-07-05 23:00:00 2021-07-26 01:00:00\n"]}]},{"cell_type":"code","metadata":{"id":"_w1ZjY4o7mKv","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ebaee859-4f91-4a49-c9f0-0066e16877bd"},"source":["# 최종적으로 Val prediction 구간을 예측하게 된다.\n","\n","print('Train encoding:', train_enc_start, '-', train_enc_end)\n","print('Train prediction:', train_pred_start, '-', train_pred_end, '\\n')\n","print('Val encoding:', val_enc_start, '-', val_enc_end)\n","print('Val prediction:', val_pred_start, '-', val_pred_end)\n","\n","print('\\nEncoding interval:', enc_length.days)\n","print('Prediction interval:', pred_length.days)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train encoding: 2021-07-01 00:00:00 - 2021-07-21 02:00:00\n","Train prediction: 2021-07-22 02:00:00 - 2021-07-26 01:00:00 \n","\n","Val encoding: 2021-07-05 23:00:00 - 2021-07-26 01:00:00\n","Val prediction: 2021-07-27 01:00:00 - 2021-07-31 00:00:00\n","\n","Encoding interval: 21\n","Prediction interval: 4\n"]}]},{"cell_type":"markdown","metadata":{"id":"5k8nzx9H7mKw"},"source":["## Data Formatting"]},{"cell_type":"code","metadata":{"id":"YYDpaFD47mKx","colab":{"base_uri":"https://localhost:8080/"},"outputId":"826a2393-8091-42af-ef71-7bf9552b5b02"},"source":["#np.log 1p 해준다.\n","\n","date_to_index = pd.Series(index=pd.Index([pd.to_datetime(c) for c in df.columns[1:]]),\n","                          data=[i for i in range(len(df.columns[1:]))])\n","\n","series_array = df[df.columns[1:]].values.astype(np.float32)\n","print(series_array)\n","\n","def get_time_block_series(series_array, date_to_index, start_date, end_date):\n","    inds = date_to_index[start_date:end_date]\n","    return series_array[:,inds]\n","\n","def transform_series_encode(series_array):\n","    series_array = np.nan_to_num(series_array) # filling NaN with 0\n","    series_mean = series_array.mean(axis=1).reshape(-1,1)\n","    series_array = series_array - series_mean\n","    series_array = series_array.reshape((series_array.shape[0],series_array.shape[1], 1))\n","\n","    return series_array, series_mean\n","\n","def transform_series_decode(series_array, encode_series_mean):\n","    series_array = np.nan_to_num(series_array) # filling NaN with 0\n","    series_array = series_array - encode_series_mean\n","    series_array = series_array.reshape((series_array.shape[0],series_array.shape[1], 1))    \n","    \n","    return series_array"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.12468828  0.12468828  0.12468828  0.12468828  0.12468828  0.12468828\n","   0.12468828  0.12468828  0.12468828  0.12468828  0.12468828  0.12468828\n","   0.12468828 -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533    0.12468828 -0.249066\n","   0.12484395  0.12484395 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828  0.37453184  0.24875621\n","   0.24875621  0.24875621 -0.12406948 -0.24844721 -0.24844721 -0.24844721\n","  -0.24844721 -0.24844721 -0.24844721 -0.24844721 -0.24844721 -0.24844721\n","  -0.24844721 -0.24844721 -0.24844721 -0.24844721 -0.24844721 -0.24844721\n","  -0.24844721 -0.24844721 -0.24844721 -0.24844721  1.120797   -0.12315271\n","  -0.3699137  -0.3699137   0.12376238  0.12360939  0.12360939  0.12360939\n","   0.12360939  0.12360939  0.12360939  0.12360939  0.12360939  0.12360939\n","   0.12360939  0.12360939  0.12360939  0.12360939  0.12360939  0.12360939\n","   0.12360939  0.12360939  0.12360939  0.12360939 -0.49382716 -0.49382716\n","  -0.49382716 -0.49382716 -0.24813896  0.24875621  0.24875621  0.24875621\n","   0.24875621  0.24875621  0.24875621  0.24875621  0.24875621  0.24875621\n","   0.24875621  0.24875621  0.24875621  0.24875621  0.24875621  0.24875621\n","   0.24875621  0.24875621  0.24875621  0.24875621  0.24875621  0.24875621\n","  -0.12406948 -0.24844721 -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -1.2468828  -1.2468828\n","  -0.12626262  0.12642226  0.12642226  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.7556675  -0.375\n","  -0.375       0.12547052 -0.12531328 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052  0.5025126   0.125\n","  -0.12484395 -0.12484395 -0.12484395 -0.125      -0.125      -0.125\n","  -0.125      -0.125      -0.125      -0.125      -0.125      -0.125\n","  -0.125      -0.125      -0.125      -0.125      -0.125      -0.125\n","  -0.125      -0.125      -0.125      -0.125      -0.62578225 -0.62578225\n","  -0.62578225 -0.62578225 -0.12594458  0.1261034   0.1261034   0.1261034\n","   0.1261034   0.1261034   0.1261034   0.1261034   0.1261034   0.1261034\n","   0.1261034   0.1261034   0.1261034   0.1261034   0.1261034   0.1261034\n","   0.1261034   0.1261034   0.1261034   0.1261034   0.6297229   0.12515645\n","  -0.125       0.2503129   0.2503129   0.37453184  0.37453184  0.37453184\n","   0.37453184  0.37453184  0.37453184  0.37453184  0.37453184  0.37453184\n","   0.37453184  0.37453184  0.37453184  0.37453184  0.37453184  0.37453184\n","   0.37453184  0.37453184  0.37453184  0.37453184 -0.8706468  -0.8706468\n","  -0.12547052  0.12562814  0.12562814  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052 -1.0025063  -1.0025063\n","  -0.12658228  0.1267427   0.1267427   0.1267427   0.1267427   0.1267427\n","   0.1267427   0.1267427   0.1267427   0.1267427   0.1267427   0.1267427\n","   0.1267427   0.1267427   0.1267427   0.1267427   0.1267427   0.1267427\n","   0.1267427   0.1267427   0.1267427   0.1267427  -0.5063291   0.12722646\n","   0.12706481 -0.2538071  -0.2538071   0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646 -0.12706481 -0.12706481\n","  -0.12706481 -0.12706481 -0.12706481  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.88945365  0.25188917\n","   0.25188917 -0.12562814  0.25157234 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052  0.12562814 -0.12547052\n","  -0.12547052 -0.12562814 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.25188917 -0.25252524\n","  -0.12658228  0.1267427   0.1267427  -0.25316456 -0.25316456 -0.25316456\n","  -0.25316456 -0.25316456 -0.25316456 -0.25316456 -0.25316456 -0.25316456\n","  -0.25316456 -0.25316456 -0.25316456 -0.25316456 -0.25316456 -0.25316456\n","  -0.25316456 -0.25316456 -0.25316456 -0.25316456  0.12690355  0.1267427\n","   0.1267427   0.1267427  -0.25316456 -0.12690355 -0.12690355 -0.12690355\n","  -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355\n","  -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355\n","  -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12706481\n","  -0.12706481 -0.12722646 -0.25477707  0.25542784  0.25542784  0.25542784\n","   0.25542784  0.25542784  0.25542784  0.25542784  0.25542784  0.25542784\n","   0.25542784  0.25542784  0.25542784  0.25542784  0.25542784  0.25542784\n","   0.25542784  0.25542784  0.25542784  0.25542784  1.0191083  -0.5044136\n","   0.2534854  -0.12642226 -0.12658228  0.2534854   0.2534854   0.2534854\n","   0.2534854   0.2534854   0.2534854   0.2534854   0.2534854   0.2534854\n","   0.2534854   0.2534854   0.2534854   0.2534854   0.2534854   0.2534854\n","   0.2534854   0.2534854   0.2534854   0.2534854  -0.505689   -0.505689\n","  -0.12706481 -0.12706481 -0.12706481 -0.12706481 -0.12706481 -0.12706481\n","  -0.12706481 -0.12706481 -0.12706481 -0.12706481 -0.12706481 -0.12706481\n","  -0.12706481]]\n"]}]},{"cell_type":"code","metadata":{"id":"feu8hw4N7mKy"},"source":["# sample of series from train_enc_start to train_enc_end  \n","encoder_input_data = get_time_block_series(series_array, date_to_index, \n","                                           train_enc_start, train_enc_end)\n","\n","\n","encoder_input_data, encode_series_mean = transform_series_encode(encoder_input_data)\n","\n","\n","# sample of series from train_pred_start to train_pred_end \n","decoder_target_data = get_time_block_series(series_array, date_to_index, \n","                                            train_pred_start, train_pred_end)\n","\n","decoder_target_data = transform_series_decode(decoder_target_data, encode_series_mean)\n","\n","\n","encoder_input_val_data = get_time_block_series(series_array, date_to_index, val_enc_start, val_enc_end)\n","encoder_input_val_data, encode_series_mean = transform_series_encode(encoder_input_val_data)\n","\n","decoder_target_val_data = get_time_block_series(series_array, date_to_index, val_pred_start, val_pred_end)\n","decoder_target_val_data = transform_series_decode(decoder_target_val_data, encode_series_mean)\n","\n","#for d in encoder_input_data:\n","#    print(d.shape)\n","\n","#train_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_data, decoder_target_data))\n","#train_dataset = train_dataset.batch(54)\n","\n","#for d in train_dataset:\n","#    #print(f'features:{features_tensor} target:{target_tensor}')\n","#    print(\"-----\")\n","#    print(d)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xZe8F9KP7mKz"},"source":["### Transformer model"]},{"cell_type":"code","metadata":{"id":"2HymE_Lx7mK1","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f5a97e44-e838-4dbd-c3b2-f50ae0c03ca3"},"source":["!pip install tensorflow_datasets\n","\n","import tensorflow_datasets as tfds\n","import tensorflow as tf\n","\n","import time\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow_datasets in /usr/local/lib/python3.7/dist-packages (4.0.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (4.62.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.19.5)\n","Requirement already satisfied: attrs>=18.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (21.2.0)\n","Requirement already satisfied: dm-tree in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.1.6)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.12.0)\n","Requirement already satisfied: promise in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (2.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.15.0)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (2.23.0)\n","Requirement already satisfied: termcolor in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.1.0)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (3.17.3)\n","Requirement already satisfied: dill in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.3.4)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (5.2.2)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.16.0)\n","Requirement already satisfied: tensorflow-metadata in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.2.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (2021.5.30)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (1.24.3)\n","Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.7/dist-packages (from importlib-resources->tensorflow_datasets) (3.5.0)\n","Requirement already satisfied: googleapis-common-protos<2,>=1.52.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-metadata->tensorflow_datasets) (1.53.0)\n"]}]},{"cell_type":"code","metadata":{"id":"p9HiWaBB7mK3"},"source":["train_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_data, decoder_target_data))\n","val_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_val_data, decoder_target_val_data))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mp70_nYj7mK3"},"source":["### position\n","def get_angles(pos, i, d_model):\n","    angle_rates = 1 / np.power(10000, (2 * (i//2)) / np.float32(d_model))\n","    return pos * angle_rates\n","\n","\n","def positional_encoding(position, d_model):\n","    angle_rads = get_angles(np.arange(position)[:, np.newaxis],\n","                            np.arange(d_model)[np.newaxis, :],\n","                            d_model)\n","  \n","    # apply sin to even indices in the array; 2i\n","    sines = np.sin(angle_rads[:, 0::2])\n","  \n","    # apply cos to odd indices in the array; 2i+1\n","    cosines = np.cos(angle_rads[:, 1::2])\n","  \n","    pos_encoding = np.concatenate([sines, cosines], axis=-1)\n","  \n","    pos_encoding = pos_encoding[np.newaxis, ...]\n","    \n","    return tf.cast(pos_encoding, dtype=tf.float32)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yqDIhFln7mK3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"53b2c6ae-fec1-4e0f-c385-dacaea84b303"},"source":["# Masking\n","def create_padding_mask(seq):\n","    seq = tf.cast(tf.math.equal(seq, 0), tf.float32)\n","  \n","    # add extra dimensions so that we can add the padding\n","    # to the attention logits.\n","    return seq[:, tf.newaxis, tf.newaxis, :]  # (batch_size, 1, 1, seq_len)\n","\n","x = tf.constant([[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]])\n","print(create_padding_mask(x))\n","\n","def create_look_ahead_mask(size):\n","    mask = 1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)\n","    return mask  # (seq_len, seq_len)\n","\n","x = tf.random.uniform((1, 4))\n","temp = create_look_ahead_mask(x.shape[1])\n","print(temp)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[[[0. 0. 1. 1. 0.]]]\n","\n","\n"," [[[0. 0. 0. 1. 1.]]]\n","\n","\n"," [[[1. 1. 1. 0. 0.]]]], shape=(3, 1, 1, 5), dtype=float32)\n","tf.Tensor(\n","[[0. 1. 1. 1.]\n"," [0. 0. 1. 1.]\n"," [0. 0. 0. 1.]\n"," [0. 0. 0. 0.]], shape=(4, 4), dtype=float32)\n"]}]},{"cell_type":"code","metadata":{"id":"bZhflMS47mK4"},"source":["# Scaled dot product attention\n","def scaled_dot_product_attention(q, k, v, mask):\n","    \"\"\"Calculate the attention weights.\n","      q, k, v must have matching leading dimensions.\n","      The mask has different shapes depending on its type(padding or look ahead) \n","      but it must be broadcastable for addition.\n","  \n","    Args:\n","        q: query shape == (..., seq_len_q, depth)\n","        k: key shape == (..., seq_len_k, depth)\n","        v: value shape == (..., seq_len_v, depth)\n","        mask: Float tensor with shape broadcastable \n","            to (..., seq_len_q, seq_len_k). Defaults to None.\n","    \n","    Returns:\n","        output, attention_weights\n","    \"\"\"\n","\n","    matmul_qk = tf.matmul(q, k, transpose_b=True)  # (..., seq_len_q, seq_len_k)\n","  \n","    # scale matmul_qk\n","    dk = tf.cast(tf.shape(k)[-1], tf.float32)\n","    scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n","\n","    # add the mask to the scaled tensor.\n","    if mask is not None:\n","        scaled_attention_logits += (mask * -1e9)\n","\n","    # softmax is normalized on the last axis (seq_len_k) so that the scores\n","    # add up to 1.\n","    attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)  # (..., seq_len_q, seq_len_k)\n","\n","    output = tf.matmul(attention_weights, v)  # (..., seq_len_v, depth)\n","\n","    return output, attention_weights"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wTun4caK7mK7","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9835e393-b2f8-4668-d616-2823c0ed7aa5"},"source":["# scaled dot product attetion test\n","def print_out(q, k, v):\n","    temp_out, temp_attn = scaled_dot_product_attention(\n","        q, k, v, None)\n","    print ('Attention weights are:')\n","    print (temp_attn)\n","    print ('Output is:')\n","    print (temp_out)\n","\n","np.set_printoptions(suppress=True)\n","\n","temp_k = tf.constant([[10,0,0],\n","                      [0,10,0],\n","                      [0,0,10],\n","                      [0,0,10]], dtype=tf.float32)  # (4, 3)\n","\n","temp_v = tf.constant([[   1,0],\n","                      [  10,0],\n","                      [ 100,5],\n","                      [1000,6]], dtype=tf.float32)  # (4, 3)\n","\n","# This `query` aligns with the second `key`,\n","# so the second `value` is returned.\n","temp_q = tf.constant([[0, 10, 0]], dtype=tf.float32)  # (1, 3)\n","print_out(temp_q, temp_k, temp_v)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Attention weights are:\n","tf.Tensor([[0. 1. 0. 0.]], shape=(1, 4), dtype=float32)\n","Output is:\n","tf.Tensor([[10.  0.]], shape=(1, 2), dtype=float32)\n"]}]},{"cell_type":"code","metadata":{"id":"Tf9CrG-j7mK8"},"source":["# Multi Head Attention\n","\n","class MultiHeadAttention(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads):\n","        super(MultiHeadAttention, self).__init__()\n","        self.num_heads = num_heads\n","        self.d_model = d_model\n","    \n","        assert d_model % self.num_heads == 0\n","        \n","        self.depth = d_model // self.num_heads\n","        \n","        self.wq = tf.keras.layers.Dense(d_model)\n","        self.wk = tf.keras.layers.Dense(d_model)\n","        self.wv = tf.keras.layers.Dense(d_model)\n","        \n","        self.dense = tf.keras.layers.Dense(d_model)\n","        \n","    def split_heads(self, x, batch_size):\n","        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n","        return tf.transpose(x, perm=[0, 2, 1, 3])\n","    \n","    def call(self, v, k, q, mask):\n","        batch_size = tf.shape(q)[0]\n","        \n","        q = self.wq(q)\n","        k = self.wk(k)\n","        v = self.wv(v) # (batch_size, seq_len, d_model)\n","        \n","        q = self.split_heads(q, batch_size)\n","        k = self.split_heads(k, batch_size)\n","        v = self.split_heads(v, batch_size) #(batch_size, num_head, seq_len_v, depth)\n","        # scaled_attention.shape == (batch_size, num_heads, seq_len_v, depth)\n","        # attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)\n","        scaled_attention, attention_weights = scaled_dot_product_attention(\n","            q, k, v, mask)\n","    \n","        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])  # (batch_size, seq_len_v, num_heads, depth)\n","\n","        concat_attention = tf.reshape(scaled_attention, \n","                                      (batch_size, -1, self.d_model))  # (batch_size, seq_len_v, d_model)\n","\n","        output = self.dense(concat_attention)  # (batch_size, seq_len_v, d_model)\n","        \n","        return output, attention_weights\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vrKTDbzp7mK9","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7d1df847-2c2f-4f5d-c0c0-aa60c60989cc"},"source":["# multhead attention test\n","temp_mha = MultiHeadAttention(d_model=512, num_heads=8)\n","y = tf.random.uniform((1, 60, 512))  # (batch_size, encoder_sequence, d_model)\n","out, attn = temp_mha(y, k=y, q=y, mask=None)\n","out.shape, attn.shape\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([1, 60, 512]), TensorShape([1, 8, 60, 60]))"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"h4jCVAuU7mK-"},"source":["# activation – the activation function of encoder/decoder intermediate layer, relu or gelu (default=relu).\n","\n","# Point wise feed forward network\n","def point_wise_feed_forward_network(d_model, dff):\n","    return tf.keras.Sequential([\n","        tf.keras.layers.Dense(dff, activation='relu'),  # (batch_size, seq_len, dff)\n","        tf.keras.layers.Dense(d_model)  # (batch_size, seq_len, d_model)\n","    ])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kR78pzaU7mK_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b42a2fa4-cc97-4527-a021-8313b11d4240"},"source":["# Point wise feed forward network test\n","sample_ffn = point_wise_feed_forward_network(512, 2048)\n","sample_ffn(tf.random.uniform((64, 50, 512))).shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 50, 512])"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"0JHQxZvp7mK_"},"source":["### Encoder and Decoder"]},{"cell_type":"code","metadata":{"id":"y_ja4MiQ7mLC"},"source":["# Encoder Layer\n","class EncoderLayer(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads, dff, rate=0.1):\n","        super(EncoderLayer, self).__init__()\n","        \n","        self.mha = MultiHeadAttention(d_model, num_heads)\n","        self.ffn = point_wise_feed_forward_network(d_model, dff)\n","        \n","        self.layernorm1 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm2 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","    \n","        self.dropout1 = tf.keras.layers.Dropout(rate)\n","        self.dropout2 = tf.keras.layers.Dropout(rate)\n","    \n","    def call(self, x, training, mask):\n","        attn_output, _ = self.mha(x, x, x, mask) # (batch_size, input_seq_len, d_model)\n","        attn_output = self.dropout1(attn_output, training=training)\n","        out1 = self.layernorm1(x + attn_output)\n","        \n","        ffn_output = self.ffn(out1) # (batch_size, input_seq_len, d_model)\n","        ffn_output = self.dropout2(ffn_output, training=training)\n","        out2 = self.layernorm2(out1 + ffn_output) # (batch_size, input_seq_len, d_model)\n","        \n","        return out2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"msUwz7Bx7mLD","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f0938b8f-5b9e-4b8a-ad5d-ff5420e56ee9"},"source":["# Encoder Layer Test\n","sample_encoder_layer = EncoderLayer(512, 8, 2048)\n","\n","sample_encoder_layer_output = sample_encoder_layer(\n","    tf.random.uniform((64, 43, 512)), False, None)\n","\n","sample_encoder_layer_output.shape  # (batch_size, input_seq_len, d_model)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 43, 512])"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"V-c2G1Cp7mLE"},"source":["# Decoder Layer\n","class DecoderLayer(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads, dff, rate=0.1):\n","        super(DecoderLayer, self).__init__()\n","        \n","        self.mha1 = MultiHeadAttention(d_model, num_heads)\n","        self.mha2 = MultiHeadAttention(d_model, num_heads)\n","        \n","        self.ffn = point_wise_feed_forward_network(d_model, dff)\n","        \n","        self.layernorm1 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm2 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm3 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","    \n","        self.dropout1 = tf.keras.layers.Dropout(rate)\n","        self.dropout2 = tf.keras.layers.Dropout(rate)\n","        self.dropout3 = tf.keras.layers.Dropout(rate)\n","                                            \n","    def call(self, x, enc_output, training,\n","            look_ahead_mask, padding_mask):\n","        # enc_output.shape == (batch_size, input_seq_len, d_model)\n","        attn1, attn_weights_block1 = self.mha1(x, x, x, look_ahead_mask)\n","        attn1 = self.dropout1(attn1, training=training)\n","        out1 = self.layernorm1(attn1 + x)\n","        \n","        attn2, attn_weights_block2 = self.mha2(\n","            enc_output, enc_output, out1, padding_mask)\n","        attn2 = self.dropout2(attn2, training=training)\n","        out2 = self.layernorm2(attn2 + out1)\n","        \n","        ffn_output = self.ffn(out2)\n","        ffn_output = self.dropout3(ffn_output, training=training)\n","        out3 = self.layernorm3(ffn_output + out2)\n","        \n","        return out3, attn_weights_block1, attn_weights_block2\n","    \n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s2HBk8KS7mLE","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b26f0558-b1b9-4d2f-9b22-ece33d3aab0b"},"source":["# Decoder layer test\n","sample_decoder_layer = DecoderLayer(512, 8, 2048)\n","\n","sample_decoder_layer_output, _, _ = sample_decoder_layer(\n","    tf.random.uniform((64, 50, 512)), sample_encoder_layer_output, \n","    False, None, None)\n","\n","sample_decoder_layer_output.shape  # (batch_size, target_seq_len, d_model)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 50, 512])"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"-X496L3Y7mLF"},"source":["# Encoder\n","\n","class Encoder(tf.keras.layers.Layer):\n","    def __init__(self, num_layers, d_model, num_heads, dff, max_len=5000,\n","                rate=0.1):\n","        super(Encoder, self).__init__()\n","        self.d_model = d_model\n","        self.num_layers = num_layers\n","        self.embedding = tf.keras.layers.Dense(d_model, use_bias=False)\n","        self.pos_encoding = positional_encoding(max_len, self.d_model)\n","        \n","        self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate) \n","                       for _ in range(num_layers)]\n","        \n","        self.dropout = tf.keras.layers.Dropout(rate)\n","        \n","    def call(self, x, training, mask):\n","        seq_len = tf.shape(x)[1]\n","        \n","        # adding embedding and position encoding\n","        x = self.embedding(x)\n","        # (batch_size, input_seq_len, d_model)\n","        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        x += self.pos_encoding[:, :seq_len, :]\n","        \n","        x = self.dropout(x, training=training)\n","        \n","        for i in range(self.num_layers):\n","            x = self.enc_layers[i](x, training, mask)\n","        \n","        return x\n","                          "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YSO73qPR7mLF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"70cb3c56-ddbe-4db8-9669-99f40c5f7222"},"source":["sample_encoder = Encoder(num_layers=2, d_model=512, num_heads=8, \n","                         dff=2048)\n","\n","sample_encoder_output = sample_encoder(tf.random.uniform((64, 62,1)), \n","                                       training=False, mask=None)\n","\n","print (sample_encoder_output.shape)  # (batch_size, input_seq_len, d_model)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(64, 62, 512)\n"]}]},{"cell_type":"code","metadata":{"id":"iApaMNvC7mLG"},"source":["# Decoder\n","class Decoder(tf.keras.layers.Layer):\n","    def __init__(self, num_layers, d_model, num_heads, dff, max_len=5000, rate=0.1):\n","        super(Decoder, self).__init__()\n","        \n","        self.d_model = d_model\n","        self.num_layers = num_layers\n","        \n","        self.embedding = tf.keras.layers.Dense(d_model, use_bias=False)\n","        self.pos_encoding = positional_encoding(max_len, self.d_model)\n","    \n","        self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate) \n","                            for _ in range(num_layers)]\n","        self.dropout = tf.keras.layers.Dropout(rate)\n","        \n","    def call(self, x, enc_output, training,\n","                look_ahead_mask, padding_mask):\n","        \n","        seq_len = tf.shape(x)[1]\n","        attention_weights = {}\n","        \n","        x = self.embedding(x)\n","        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        x += self.pos_encoding[:, :seq_len, :]\n","        \n","        x = self.dropout(x, training=training)\n","        \n","        for i in range(self.num_layers):\n","            x, block1, block2 = self.dec_layers[i](x, enc_output, training,\n","                                                  look_ahead_mask, padding_mask)\n","            attention_weights['decoder_layer{}_block1'.format(i+1)] = block1\n","            attention_weights['decoder_layer{}_block2'.format(i+1)] = block2\n","            \n","        \n","        \n","        return x, attention_weights\n","    \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lyz4sJBn7mLG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d2468989-e548-45c1-a3c0-bb5636adaa99"},"source":["sample_decoder = Decoder(num_layers=2, d_model=512, num_heads=8, \n","                         dff=2048)\n","\n","output, attn = sample_decoder(tf.random.uniform((64, 26,3)), \n","                              enc_output=sample_encoder_output, \n","                              training=False, look_ahead_mask=None, \n","                              padding_mask=None)\n","\n","output.shape, attn['decoder_layer2_block2'].shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([64, 26, 512]), TensorShape([64, 8, 26, 62]))"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"cDMZbb2D7mLH"},"source":["### Transfomer for TS\n"]},{"cell_type":"code","metadata":{"id":"3Wff4gY-7mLH"},"source":["class Transformer(tf.keras.Model):\n","    def __init__(self, num_layers, d_model, num_heads, dff, out_dim, max_len=5000,\n","                rate=0.1):\n","        super(Transformer, self).__init__()\n","        \n","        self.encoder = Encoder(num_layers, d_model, num_heads, dff,\n","                              max_len, rate)\n","        self.decoder = Decoder(num_layers, d_model, num_heads, dff,\n","                               max_len, rate)\n","        \n","        self.final_layer = tf.keras.layers.Dense(out_dim)\n","        \n","    def call(self, inp, tar, training, enc_padding_mask,\n","             look_ahead_mask, dec_padding_mask):\n","        enc_output = self.encoder(inp, training, enc_padding_mask)\n","        \n","        dec_output, attention_weights = self.decoder(\n","            tar, enc_output, training, look_ahead_mask, dec_padding_mask)\n","        final_output = self.final_layer(dec_output)\n","        \n","        return final_output, attention_weights\n","    \n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zy2jyCC27mLH","colab":{"base_uri":"https://localhost:8080/"},"outputId":"11cc1d4a-891d-4c7b-84f7-739879e527ba"},"source":["sample_transformer = Transformer(\n","    num_layers=2, d_model=512, num_heads=8, dff=2048, \n","    out_dim=1)\n","\n","temp_input = tf.random.uniform((64, 62,1))\n","temp_target = tf.random.uniform((64, 23,1))\n","\n","fn_out, _ = sample_transformer(temp_input, temp_target,training=False, \n","                               enc_padding_mask=None, \n","                               look_ahead_mask=None,\n","                               dec_padding_mask=None)\n","\n","fn_out.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 23, 1])"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"vkBfkgGy7mLI"},"source":["# Set hyperparameters\n","# 트랜스포머 기준으로 바꿔볼까? \n","# d_model – the number of expected features in the encoder/decoder inputs (default=512).\n","# nhead – the number of heads in the multiheadattention models (default=8).\n","# num_encoder_layers – the number of sub-encoder-layers in the encoder & decoder (default=6).\n","# num_decoder_layers – the number of sub-decoder-layers in the decoder (default=6).\n","# dff(dim_feedforward) – the dimension of the feedforward network model (default=2048).\n","# dropout – the dropout value (default=0.1).\n","\n","\n","num_layers = 1\n","d_model = 64\n","dff = 256\n","num_heads = 4\n","\n","dropout_rate = 0.1\n","input_sequence_length = 720-(24*4+23) # Length of the sequence used by the encoder\n","target_sequence_length = 24*4+23 # Length of the sequence predicted by the decoder\n","batch_size = 2*11\n","\n","train_dataset = train_dataset.batch(batch_size)\n","val_dataset = val_dataset.batch(batch_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dwNIQKry7mLI"},"source":["# Optimizizer\n","class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n","    def __init__(self, d_model, warmup_steps=4000):\n","        super(CustomSchedule, self).__init__()\n","    \n","        self.d_model = d_model\n","        self.d_model = tf.cast(self.d_model, tf.float32)\n","\n","        self.warmup_steps = warmup_steps\n","    \n","    def __call__(self, step):\n","        arg1 = tf.math.rsqrt(step)\n","        arg2 = step * (self.warmup_steps ** -1.5)\n","    \n","        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EHuh2wWR7mLI"},"source":["learning_rate = CustomSchedule(64)\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, \n","                                     epsilon=1e-9)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftwg7b_Z7mLI","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"90543af3-1778-4506-e130-cada6d3ac45b"},"source":["temp_learning_rate_schedule = CustomSchedule(512)\n","\n","plt.plot(temp_learning_rate_schedule(tf.range(40000, dtype=tf.float32)))\n","plt.ylabel(\"Learning Rate\")\n","plt.xlabel(\"Train Step\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Train Step')"]},"metadata":{},"execution_count":33},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Tn59NBXK7mLI"},"source":["# Loss and metrics\n","loss_object = tf.keras.losses.MeanAbsoluteError()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0BwT16Z77mLJ"},"source":["def loss_function(real, pred):\n","    mask = tf.math.logical_not(tf.math.equal(real, 0))\n","    loss_ = loss_object(real, pred)\n","\n","    mask = tf.cast(mask, dtype=loss_.dtype)\n","    loss_ *= mask\n","  \n","    return tf.reduce_mean(loss_)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vlFkoDfS7mLJ"},"source":["train_loss = tf.keras.metrics.Mean(name='train_loss')\n","#train_accuracy = tf.keras.metrics.mean_absolute_error()\n","\n","test_loss = tf.keras.metrics.Mean(name='test_loss')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wpZb8zHP7mLJ"},"source":["# Training and checkpoint\n","transformer = Transformer(num_layers, d_model, num_heads, dff,\n","                          out_dim=1, rate=dropout_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"shPhCuBM7mLJ"},"source":["def create_masks(inp, tar):\n","    inp = inp.reshape()\n","    # Encoder padding mask\n","    enc_padding_mask = create_padding_mask(inp)\n","  \n","    # Used in the 2nd attention block in the decoder.\n","    # This padding mask is used to mask the encoder outputs.\n","    dec_padding_mask = create_padding_mask(inp)\n","  \n","    # Used in the 1st attention block in the decoder.\n","    # It is used to pad and mask future tokens in the input received by \n","    # the decoder.\n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    dec_target_padding_mask = create_padding_mask(tar)\n","    combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask)\n","  \n","    return enc_padding_mask, combined_mask, dec_padding_mask"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r9ENhH-s7mLK"},"source":["# check point\n","checkpoint_path = \"./checkpoints/train\"\n","\n","ckpt = tf.train.Checkpoint(transformer=transformer,\n","                           optimizer=optimizer)\n","\n","ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)\n","\n","# if a checkpoint exists, restore the latest checkpoint.\n","if ckpt_manager.latest_checkpoint:\n","    ckpt.restore(ckpt_manager.latest_checkpoint)\n","    print ('Latest checkpoint restored!!')\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zf4S65Ud7mLK"},"source":["# EPOCHS\n","EPOCHS=100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dN2lAMeP7mLK"},"source":["@tf.function\n","def train_step(inp, tar):\n","    last_inp = tf.expand_dims(inp[:,0,:],-1)\n","    tar_inp = tf.concat([last_inp, tar[:,:-1,:]], axis=1)\n","    tar_real = tar\n","  \n","    #enc_padding_mask, combined_mask, dec_padding_mask = create_masks(inp, tar_inp)\n","    #print(enc_padding_mask)\n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    \n","    with tf.GradientTape() as tape:\n","        predictions, _ = transformer(inp, tar_inp, \n","                                     True, \n","                                     None, \n","                                     look_ahead_mask, \n","                                     None)\n","        loss = loss_function(tar_real, predictions)\n","\n","    gradients = tape.gradient(loss, transformer.trainable_variables)    \n","    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n","  \n","    train_loss(loss)\n","    #train_accuracy(tar_real, predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aFzrcnAU7mLK"},"source":["@tf.function\n","def test_step(inp, tar):\n","    #print(inp)\n","    #print(tar)\n","    last_inp = tf.expand_dims(inp[:,0,:],-1)\n","    #print(last_inp)\n","    tar_inp = tf.concat([last_inp, tar[:,:-1,:]], axis=1)\n","    tar_real = tar\n","    \n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    \n","    with tf.GradientTape() as tape:\n","        predictions, _ = transformer(inp, tar_inp, \n","                                     False, \n","                                     None, \n","                                     look_ahead_mask, \n","                                     None)\n","        loss = loss_function(tar_real, predictions)\n","\n","    gradients = tape.gradient(loss, transformer.trainable_variables)    \n","    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n","\n","    test_loss(loss)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"VU9sFkFu7mLL","colab":{"base_uri":"https://localhost:8080/"},"outputId":"52eaa09a-8eb9-4fea-8972-94268e7d92a6"},"source":["# Val_dataset을 돌려서 Val_prediction 구간을 예측한다\n","\n","for epoch in range(EPOCHS):\n","    start = time.time()\n","\n","    train_loss.reset_states()\n","    test_loss.reset_states()\n","    \n","    # validation:\n","    for (batch, (inp, tar)) in enumerate(val_dataset):\n","        #print(inp, tar)\n","        test_step(inp, tar)\n","        \n","    if (epoch + 1) % 5 == 0:\n","        ckpt_save_path = ckpt_manager.save()\n","        print ('Saving checkpoint for epoch {} at {}'.format(epoch+1,\n","                                                         ckpt_save_path))\n","    \n","    #print ('Epoch {} Train Loss {:.4f}'.format(epoch + 1, \n","                                                #train_loss.result())) \n","                                                #train_accuracy.result()))\n","    print ('Epoch {} Test Loss {:.4f}'.format(epoch + 1, \n","                                                test_loss.result())) \n","    print ('Time taken for 1 epoch: {} secs\\n'.format(time.time() - start))\n","    \n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1 Test Loss 0.6257\n","Time taken for 1 epoch: 2.394331693649292 secs\n","\n","Epoch 2 Test Loss 0.6257\n","Time taken for 1 epoch: 0.009008169174194336 secs\n","\n","Epoch 3 Test Loss 0.6255\n","Time taken for 1 epoch: 0.008820772171020508 secs\n","\n","Epoch 4 Test Loss 0.6249\n","Time taken for 1 epoch: 0.009093284606933594 secs\n","\n","Saving checkpoint for epoch 5 at ./checkpoints/train/ckpt-1\n","Epoch 5 Test Loss 0.6242\n","Time taken for 1 epoch: 0.08489060401916504 secs\n","\n","Epoch 6 Test Loss 0.6232\n","Time taken for 1 epoch: 0.008824825286865234 secs\n","\n","Epoch 7 Test Loss 0.6221\n","Time taken for 1 epoch: 0.009090662002563477 secs\n","\n","Epoch 8 Test Loss 0.6208\n","Time taken for 1 epoch: 0.010471582412719727 secs\n","\n","Epoch 9 Test Loss 0.6193\n","Time taken for 1 epoch: 0.008797883987426758 secs\n","\n","Saving checkpoint for epoch 10 at ./checkpoints/train/ckpt-2\n","Epoch 10 Test Loss 0.6176\n","Time taken for 1 epoch: 0.07158637046813965 secs\n","\n","Epoch 11 Test Loss 0.6157\n","Time taken for 1 epoch: 0.008748292922973633 secs\n","\n","Epoch 12 Test Loss 0.6136\n","Time taken for 1 epoch: 0.008919954299926758 secs\n","\n","Epoch 13 Test Loss 0.6113\n","Time taken for 1 epoch: 0.008291244506835938 secs\n","\n","Epoch 14 Test Loss 0.6089\n","Time taken for 1 epoch: 0.007871866226196289 secs\n","\n","Saving checkpoint for epoch 15 at ./checkpoints/train/ckpt-3\n","Epoch 15 Test Loss 0.6062\n","Time taken for 1 epoch: 0.06702709197998047 secs\n","\n","Epoch 16 Test Loss 0.6033\n","Time taken for 1 epoch: 0.009564638137817383 secs\n","\n","Epoch 17 Test Loss 0.6002\n","Time taken for 1 epoch: 0.009681940078735352 secs\n","\n","Epoch 18 Test Loss 0.5969\n","Time taken for 1 epoch: 0.009470224380493164 secs\n","\n","Epoch 19 Test Loss 0.5933\n","Time taken for 1 epoch: 0.007404327392578125 secs\n","\n","Saving checkpoint for epoch 20 at ./checkpoints/train/ckpt-4\n","Epoch 20 Test Loss 0.5895\n","Time taken for 1 epoch: 0.06877756118774414 secs\n","\n","Epoch 21 Test Loss 0.5858\n","Time taken for 1 epoch: 0.009180784225463867 secs\n","\n","Epoch 22 Test Loss 0.5819\n","Time taken for 1 epoch: 0.009744405746459961 secs\n","\n","Epoch 23 Test Loss 0.5779\n","Time taken for 1 epoch: 0.00897979736328125 secs\n","\n","Epoch 24 Test Loss 0.5737\n","Time taken for 1 epoch: 0.010611772537231445 secs\n","\n","Saving checkpoint for epoch 25 at ./checkpoints/train/ckpt-5\n","Epoch 25 Test Loss 0.5694\n","Time taken for 1 epoch: 0.07051229476928711 secs\n","\n","Epoch 26 Test Loss 0.5649\n","Time taken for 1 epoch: 0.012419462203979492 secs\n","\n","Epoch 27 Test Loss 0.5602\n","Time taken for 1 epoch: 0.009218692779541016 secs\n","\n","Epoch 28 Test Loss 0.5554\n","Time taken for 1 epoch: 0.009650707244873047 secs\n","\n","Epoch 29 Test Loss 0.5504\n","Time taken for 1 epoch: 0.008899688720703125 secs\n","\n","Saving checkpoint for epoch 30 at ./checkpoints/train/ckpt-6\n","Epoch 30 Test Loss 0.5451\n","Time taken for 1 epoch: 0.07037901878356934 secs\n","\n","Epoch 31 Test Loss 0.5396\n","Time taken for 1 epoch: 0.008963346481323242 secs\n","\n","Epoch 32 Test Loss 0.5340\n","Time taken for 1 epoch: 0.008630752563476562 secs\n","\n","Epoch 33 Test Loss 0.5282\n","Time taken for 1 epoch: 0.00807642936706543 secs\n","\n","Epoch 34 Test Loss 0.5221\n","Time taken for 1 epoch: 0.008682012557983398 secs\n","\n","Saving checkpoint for epoch 35 at ./checkpoints/train/ckpt-7\n","Epoch 35 Test Loss 0.5160\n","Time taken for 1 epoch: 0.07456350326538086 secs\n","\n","Epoch 36 Test Loss 0.5097\n","Time taken for 1 epoch: 0.012131452560424805 secs\n","\n","Epoch 37 Test Loss 0.5034\n","Time taken for 1 epoch: 0.00992584228515625 secs\n","\n","Epoch 38 Test Loss 0.4967\n","Time taken for 1 epoch: 0.008193254470825195 secs\n","\n","Epoch 39 Test Loss 0.4899\n","Time taken for 1 epoch: 0.0077114105224609375 secs\n","\n","Saving checkpoint for epoch 40 at ./checkpoints/train/ckpt-8\n","Epoch 40 Test Loss 0.4829\n","Time taken for 1 epoch: 0.0682070255279541 secs\n","\n","Epoch 41 Test Loss 0.4757\n","Time taken for 1 epoch: 0.00915074348449707 secs\n","\n","Epoch 42 Test Loss 0.4686\n","Time taken for 1 epoch: 0.008249044418334961 secs\n","\n","Epoch 43 Test Loss 0.4612\n","Time taken for 1 epoch: 0.011208534240722656 secs\n","\n","Epoch 44 Test Loss 0.4535\n","Time taken for 1 epoch: 0.008121728897094727 secs\n","\n","Saving checkpoint for epoch 45 at ./checkpoints/train/ckpt-9\n","Epoch 45 Test Loss 0.4457\n","Time taken for 1 epoch: 0.06175994873046875 secs\n","\n","Epoch 46 Test Loss 0.4378\n","Time taken for 1 epoch: 0.008644580841064453 secs\n","\n","Epoch 47 Test Loss 0.4300\n","Time taken for 1 epoch: 0.007827997207641602 secs\n","\n","Epoch 48 Test Loss 0.4220\n","Time taken for 1 epoch: 0.010205745697021484 secs\n","\n","Epoch 49 Test Loss 0.4138\n","Time taken for 1 epoch: 0.009274482727050781 secs\n","\n","Saving checkpoint for epoch 50 at ./checkpoints/train/ckpt-10\n","Epoch 50 Test Loss 0.4058\n","Time taken for 1 epoch: 0.06190371513366699 secs\n","\n","Epoch 51 Test Loss 0.3975\n","Time taken for 1 epoch: 0.011641740798950195 secs\n","\n","Epoch 52 Test Loss 0.3891\n","Time taken for 1 epoch: 0.00927281379699707 secs\n","\n","Epoch 53 Test Loss 0.3804\n","Time taken for 1 epoch: 0.010065793991088867 secs\n","\n","Epoch 54 Test Loss 0.3718\n","Time taken for 1 epoch: 0.008626699447631836 secs\n","\n","Saving checkpoint for epoch 55 at ./checkpoints/train/ckpt-11\n","Epoch 55 Test Loss 0.3633\n","Time taken for 1 epoch: 0.0696408748626709 secs\n","\n","Epoch 56 Test Loss 0.3549\n","Time taken for 1 epoch: 0.009350299835205078 secs\n","\n","Epoch 57 Test Loss 0.3467\n","Time taken for 1 epoch: 0.00857996940612793 secs\n","\n","Epoch 58 Test Loss 0.3387\n","Time taken for 1 epoch: 0.008404254913330078 secs\n","\n","Epoch 59 Test Loss 0.3309\n","Time taken for 1 epoch: 0.00786590576171875 secs\n","\n","Saving checkpoint for epoch 60 at ./checkpoints/train/ckpt-12\n","Epoch 60 Test Loss 0.3234\n","Time taken for 1 epoch: 0.07052087783813477 secs\n","\n","Epoch 61 Test Loss 0.3160\n","Time taken for 1 epoch: 0.010152578353881836 secs\n","\n","Epoch 62 Test Loss 0.3088\n","Time taken for 1 epoch: 0.008578300476074219 secs\n","\n","Epoch 63 Test Loss 0.3013\n","Time taken for 1 epoch: 0.0074024200439453125 secs\n","\n","Epoch 64 Test Loss 0.2932\n","Time taken for 1 epoch: 0.00817108154296875 secs\n","\n","Saving checkpoint for epoch 65 at ./checkpoints/train/ckpt-13\n","Epoch 65 Test Loss 0.2855\n","Time taken for 1 epoch: 0.06453490257263184 secs\n","\n","Epoch 66 Test Loss 0.2773\n","Time taken for 1 epoch: 0.009836435317993164 secs\n","\n","Epoch 67 Test Loss 0.2696\n","Time taken for 1 epoch: 0.008974075317382812 secs\n","\n","Epoch 68 Test Loss 0.2626\n","Time taken for 1 epoch: 0.007829427719116211 secs\n","\n","Epoch 69 Test Loss 0.2562\n","Time taken for 1 epoch: 0.007954835891723633 secs\n","\n","Saving checkpoint for epoch 70 at ./checkpoints/train/ckpt-14\n","Epoch 70 Test Loss 0.2499\n","Time taken for 1 epoch: 0.06324338912963867 secs\n","\n","Epoch 71 Test Loss 0.2438\n","Time taken for 1 epoch: 0.0112762451171875 secs\n","\n","Epoch 72 Test Loss 0.2383\n","Time taken for 1 epoch: 0.012334823608398438 secs\n","\n","Epoch 73 Test Loss 0.2322\n","Time taken for 1 epoch: 0.008451223373413086 secs\n","\n","Epoch 74 Test Loss 0.2270\n","Time taken for 1 epoch: 0.008392572402954102 secs\n","\n","Saving checkpoint for epoch 75 at ./checkpoints/train/ckpt-15\n","Epoch 75 Test Loss 0.2225\n","Time taken for 1 epoch: 0.07302522659301758 secs\n","\n","Epoch 76 Test Loss 0.2181\n","Time taken for 1 epoch: 0.009455442428588867 secs\n","\n","Epoch 77 Test Loss 0.2134\n","Time taken for 1 epoch: 0.00867462158203125 secs\n","\n","Epoch 78 Test Loss 0.2091\n","Time taken for 1 epoch: 0.008306264877319336 secs\n","\n","Epoch 79 Test Loss 0.2041\n","Time taken for 1 epoch: 0.008700132369995117 secs\n","\n","Saving checkpoint for epoch 80 at ./checkpoints/train/ckpt-16\n","Epoch 80 Test Loss 0.1998\n","Time taken for 1 epoch: 0.06602239608764648 secs\n","\n","Epoch 81 Test Loss 0.1948\n","Time taken for 1 epoch: 0.00902700424194336 secs\n","\n","Epoch 82 Test Loss 0.1894\n","Time taken for 1 epoch: 0.008433818817138672 secs\n","\n","Epoch 83 Test Loss 0.1847\n","Time taken for 1 epoch: 0.007925987243652344 secs\n","\n","Epoch 84 Test Loss 0.1799\n","Time taken for 1 epoch: 0.008204936981201172 secs\n","\n","Saving checkpoint for epoch 85 at ./checkpoints/train/ckpt-17\n","Epoch 85 Test Loss 0.1753\n","Time taken for 1 epoch: 0.0651400089263916 secs\n","\n","Epoch 86 Test Loss 0.1714\n","Time taken for 1 epoch: 0.009883642196655273 secs\n","\n","Epoch 87 Test Loss 0.1673\n","Time taken for 1 epoch: 0.008686542510986328 secs\n","\n","Epoch 88 Test Loss 0.1623\n","Time taken for 1 epoch: 0.007807493209838867 secs\n","\n","Epoch 89 Test Loss 0.1604\n","Time taken for 1 epoch: 0.008274078369140625 secs\n","\n","Saving checkpoint for epoch 90 at ./checkpoints/train/ckpt-18\n","Epoch 90 Test Loss 0.1540\n","Time taken for 1 epoch: 0.0752706527709961 secs\n","\n","Epoch 91 Test Loss 0.1499\n","Time taken for 1 epoch: 0.009157896041870117 secs\n","\n","Epoch 92 Test Loss 0.1463\n","Time taken for 1 epoch: 0.008342742919921875 secs\n","\n","Epoch 93 Test Loss 0.1412\n","Time taken for 1 epoch: 0.009099960327148438 secs\n","\n","Epoch 94 Test Loss 0.1400\n","Time taken for 1 epoch: 0.009682416915893555 secs\n","\n","Saving checkpoint for epoch 95 at ./checkpoints/train/ckpt-19\n","Epoch 95 Test Loss 0.1343\n","Time taken for 1 epoch: 0.06802105903625488 secs\n","\n","Epoch 96 Test Loss 0.1317\n","Time taken for 1 epoch: 0.009438037872314453 secs\n","\n","Epoch 97 Test Loss 0.1265\n","Time taken for 1 epoch: 0.008487224578857422 secs\n","\n","Epoch 98 Test Loss 0.1226\n","Time taken for 1 epoch: 0.007910728454589844 secs\n","\n","Epoch 99 Test Loss 0.1199\n","Time taken for 1 epoch: 0.008567094802856445 secs\n","\n","Saving checkpoint for epoch 100 at ./checkpoints/train/ckpt-20\n","Epoch 100 Test Loss 0.1175\n","Time taken for 1 epoch: 0.06929922103881836 secs\n","\n"]}]},{"cell_type":"code","metadata":{"id":"cU4kkZys7mLL"},"source":["MAX_LENGTH = target_sequence_length\n","\n","def evaluate(inp):\n","    encoder_input = inp\n","    #print(encoder_input)\n","    output = tf.expand_dims(encoder_input[:,-1,:],-1)\n","    #print(output)\n","    \n","    for i in range(MAX_LENGTH):\n","        look_ahead_mask = create_look_ahead_mask(tf.shape(output)[1])\n","        predictions, attention_weights = transformer(encoder_input, \n","                                                     output, \n","                                                     False, \n","                                                     None, \n","                                                     look_ahead_mask, \n","                                                     None)\n","        \n","        # select the last word from the seq_len dimension\n","        predictions = predictions[: ,-1:, :]  # (batch_size, 1)\n","        #print(\"pred:\", predictions) #\n","        output = tf.concat([output, predictions], axis=1)\n","        #print(output)\n","        \n","    return tf.squeeze(output, axis=0), attention_weights"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8gnQAWpsA0Vs"},"source":["def mape(y_pred, y_true):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VrZLCCbpjmN0"},"source":["def MAE(y_true, y_pred): \n","    return np.mean(np.abs((y_true - y_pred)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iN7slOWlk-x0"},"source":["def MSE(y_true, y_pred):\n","    return np.mean(np.square((y_true - y_pred)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7khHQRegMByM"},"source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y8O2fiewMEaG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"de9ffad6-1538-4c1d-9204-aae1ed927fe0"},"source":["encode_series = encoder_input_val_data[0:1,:,:] \n","#print(encode_series)\n","\n","pred_series, _ = evaluate(encode_series)\n","pred_series = np.array([pred_series])\n","encode_series = encode_series.reshape(-1,1)\n","pred_series = pred_series.reshape(-1,1)[1:,:]   \n","target_series = decoder_target_val_data[0,:,:1].reshape(-1,1) \n","\n","encode_series_tail = np.concatenate([encode_series[-500:],target_series[:1]])\n","x_encode = encode_series_tail.shape[0]\n","\n","print(mape(pred_series[:24*4+23-23], target_series))\n","\n","print(MSE(target_series, pred_series[:24*4+23-23]))\n","\n","print(MAE(target_series, pred_series[:24*4+23-23]))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["47.06511199474335\n","0.032529294\n","0.10447105\n"]}]},{"cell_type":"code","metadata":{"id":"gRxmWFiyPIOG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a5ea04fa-c46b-44cd-fd8a-ab779c68691f"},"source":["x_encode"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["484"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"pzq3ApNZMHx6","colab":{"base_uri":"https://localhost:8080/","height":408},"outputId":"b054f1b5-906b-4cb3-b000-50812d524243"},"source":["# 실제와 가격차이가 어떻게 나는지 비교해서 보정한다.\n","\n","plt.figure(figsize=(20,6))   \n","\n","plt.plot(range(1,x_encode+1),encode_series_tail+0.00900414)\n","plt.plot(range(x_encode,x_encode+pred_steps-23),target_series+0.00900414,color='orange')\n","plt.plot(range(x_encode,x_encode+pred_steps-23),pred_series[:24*4+23-23]+0.00900414,color='teal',linestyle='--')\n","\n","plt.title('Encoder Series Tail of Length %d, Target Series, and Predictions' % 500)\n","plt.legend(['Encoding Series','Target Series','Predictions'])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f204297ae10>"]},"metadata":{},"execution_count":51},{"output_type":"display_data","data":{"image/png":"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AgCvdO2/oHvWdEHfMT/bW7YNuozkUuiLwCUA/mFeUCl1HXQWzq9FZBd0No0/o9o47IRuBPwM9IXp1QD+n1LKNL79NHQz1/u8178FwIG1Xqia0n2ZzoTu8bEWOjPph9DZDgDwagCPiy5h+haAs0fo41LrtZ+ADm7cC32ReCgC22U3nQOdfbEJusTu86OUE9byMuiMq+o/p0G/j5ugS1q+Cl1KNarAe/6/0O/5wQBWQAcCAB2QeRzAiyKyreaLjG4OgN9Av9/PQf/fzwyUNf0AutnvY9Cfpz97j0EpVYJuvPwu6MDee6HLL0ve7y7E7r8PHwTwJRHphW6KPlYD8yuhA0GrAKwEcCN0o2rHW/4u6BKwJ6A/39dC9wYDxt52JejtcQv09vkn9HY/DwCUUiug95fveK+9BpWZ38bjW9BZUzd5/9/7oJvKAzo4c6233icB3IlKeeJo2/Vn0CVUG73/87h7e411fJmIcez/X/TGvRb6/fx5jZcxvg79ubgJevv8CECLt+wLAH4quj/c24K/5H0uXwd9TNwG4HsA3qWUemoc/4Up0J+1nd44twP4f+P4PSIiigFRajIys4mIiIgml1cqswHAuUqp28Mez2hE5CYAH1N6JrFGrfM1AC5XSi0e88kxJSKPADh5nM2aiYiIaAzMJCIiIqLYEJHTRWSqV374Gej+Mrs1+1sYlFKnTXaAyCtdOkNE0iKyAHoq9fFm88WSUmo5A0RERET1wyARERERxclx0LM5bYMul3njeEvxEkCgS5V2QpebPQldpkZEREQ0Liw3IyIiIiIiIiIiZhIRERERERERERGDREREREREREREBCAd9gBGMnPmTLX33nuHPQwiIiIiIiIioqbx0EMPbVNKzaq1LLJBor333hsrVqwIexhERERERERERE1DRNaNtIzlZkRERERERERExCARERERERERERExSERERERERERERGCQiIiIiIiIiIiIwCARERERERERERGBQSIiIiIiIiIiIgKDREREREREREREBAaJiIiIiIiIiIgIDBIREREREREREREYJCIiIiIiIiIiIjBIREREREREREREYJAodtZs6Q17CERERERERETUhBgkipFH13fjlK/fhade3BX2UIiIiIiIiIioyTBIFCM7B0oAgO6BcsgjISIiIiIiIqJmwyBRjCil/3ZdFe5AiIiIiIiIiKjpMEgUI44XHHIUg0REREREREREVF8MEsWI6wWHHGYSEREREREREVGdMUgUIyZI5DKTiIiIiIiIiIjqjEGiGHFc/bfrhjsOIiIiIiIiImo+DBLFiF9uxkwiIiIiIiIiIqqzugSJROQqEdkiIv8cYbmIyGUiskZEVonIS+ux3qTxy83Yk4iIiIiIiIiI6qxemUQ/AfDqUZa/BsAS78+FAL5fp/UmCjOJiIiIiIiIiGiy1CVIpJS6C8COUZ7yBgA/U9p9AKaKyLx6rDtJTE8izm5GRERERERERPXWqJ5ECwCsD/y8wXtsCBG5UERWiMiKrVu3Nmho8WHKzDi7GRERERERERHVW6QaVyulrlBKHamUOnLWrFlhDydy/HIzzm5GREREREREk23bfcCWu8IeBTVQukHr2QhgYeDnvbzHaDc4bFxNREREREREjbLq84DTD5x6d9gjoQZpVCbR9QDe5c1ydiyAHqVUV4PW3TRMcIiNq4mIiIiIiGjSuQXALYc9CmqgumQSicivAJwIYKaIbADweQAZAFBKXQ7gRgBnAFgDYADAe+qx3qQxCUTsSURERERERESTzi0Div1OkqQuQSKl1DljLFcAPlSPdSWZmdWM5WZEREREREQ06VybQaKEaVRPIqqDSuNqBomIiIiIiIhokqkywEqWRInU7GY0Oj9IxH2UiIiIiIiIJptbBsBMoiRhkChGHG/fZLkZERERERERTTq3DCgn7FFQAzFIFCOVTCIGiYiIiIiIiGiSKfYkShoGiWLEZBCxJxERERERERFNOs5uljgMEsWIySBiuRkRERERERFNOpabJQ6DRDFiYkMsNyMiIiIiIqJJx3KzxGGQKEZMBhETiYiIiIiIiGjScXazxGGQKEZclpsRERERERFRo7DcLHEYJIoRh7ObERERERERUaOw3CxxGCSKEb/cjJlERERERERENNk4u1niMEgUI37jagaJiIiIiKjBHt/UA8WMdqLkcB0AiuVmCcMgUYyY4BDLzYiIiIiokf65sQevvexuPLqhJ+yhEFGjqLL3D2YSJQmDRDGi2LiaiIiIiELQPVD2/i6FPBIiahjX1n+z3CxRGCSKETauJiIiIqIwlF19kWg7PA8lSgyTScRys0RhkChGHHfo30REREREjeB4waEyT0SJksM1QSLu90nCIFGMmHIzNgwkIiIiokayvUyi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mswkIiKizNM0gWEVRZkeBhEREfUCpiT0spNPPhm///3v3csNDQ2YPn06Xn/9dezbtw+GYeCxxx7DnDlzMGPGDLz++uvYv38/gsEgnnrqqaSea/bs2XjyyScBWOVhTolbpObm5qhysbVr12LkSOts4CmnnIK777476rauzJ8/H3fffTeklACA999/HwCwbds2jBkzBt/73vdw1llnYd26dUn9LRTmNq6WViaRxp5ERERERERE1AsYJEqS05PI+XfDDTd0ev+bbroJDQ0NqK2txeTJk7F8+XIMHjwYt99+O0444QRMnjwZU6ZMwVlnnYXBgwdj8eLFmDVrFmbPno0JEyYkNbYrr7wSe/fuRU1NDW666SZMnDgRZWVlUfeRUuKOO+7A+PHjUV9fj5tvvhlLly4FAPzud7/D6tWrUVdXh5qaGixZsqTL5/zpT3+KYDCIuro6TJw4ET/96U8BAE8++SRqa2tRX1+P9evX45JLLknqb6EwJygUMiVCJjOJiIiIiIiIqHcIJwNENVOnTpWxK3Nt3Lgx6cBJPjEMA8FgEAUFBdi6dSvmzZuHTZs2wefzZXpocfH97J5/72jEWb9/Ew9cOhW//tsmDK8swh8vmZrpYREREREREVEWEkKskVLGPajM2p5E1FFLSwtOOOEEBINBSClxzz33KBsgou5zy81MCVNKt5E1ERERERERUToxSJRDSktLEZt9RdnPKTczpYTBcjMiIiIiIiLqJexJRKS4cCYRYMrwamdERERERERE6cQgEZHidPtTGjJNhEwTOmNERERERERE1AsYJCJSnK5ZH1NTSphm+DIRERERERFROvFok0hxTqNqw4TdkyjDAyIiIiIiIqKcxMPNJOzfvx/19fWor6/HoEGDMHToUPdye3t7Wp+rsbER99xzT8Lbb7vtNkycOBF1dXWor6/H22+/ndTjL1myBA8//HCqw6Q+4CQOmaaEIdm4moiIiIiIiHoHVzdLQlVVFdauXQsAWLx4MUpKSvDDH/6wy98LhULweJJ7qZ0g0ZVXXtnhtn/961946aWX8N5778Hv92Pfvn1JBalCoRAWLVqU1Hgoc9zG1VLCNKW72hkRERERERFROjGTKEV//OMfMW3aNEyePBlnn302WlpaAACXXXYZFi1ahBkzZuBHP/oRtm7dipkzZ2LSpEm46aabUFJS4j7Gr3/9a0ybNg11dXW4+eabAQA33HADtm7divr6elx33XVRz7l7925UV1fD7/cDAKqrqzFkyBAAwJo1azBnzhxMmTIF8+fPx+7duwEAc+fOxbXXXoupU6fiv//7v7F48WLceeedAICtW7fi1FNPxZQpU3Dcccfho48+AgA89dRTqK2txeTJk3H88cf34qtInXHKzUKmRMhkJhERERERERH1juzNJFpzLdCwNr2PWVEPTLkrqV9ZuHAhvvWtbwEAbrrpJjzwwAO4+uqrAQA7d+7EqlWroOs6zjjjDFxzzTW44IILsGTJEvf3X331VWzevBnvvPMOpJQ488wzsXLlStx+++1Yv369m7kU6ZRTTsGtt96KcePGYd68eTj//PMxZ84cBINBXH311XjhhRfQv39/PPHEE/jJT36CBx98EADQ3t6O1atXA7AyoRxXXHEFlixZgrFjx+Ltt9/GlVdeiX/84x+49dZb8be//Q1Dhw5FY2NjUq8LpY8TFDJNK5OIQSIiIiIiIiLqDdkbJFLE+vXrcdNNN6GxsRHNzc2YP3++e9u5554LXdcBWCVizz//PADgwgsvdMvUXn31Vbz66qs4+uijAQDNzc3YvHkzRowYkfA5S0pKsGbNGrzxxhtYvnw5zj//fNx+++2YOnUq1q9fj5NPPhkAYBgGBg8e7P7e+eef3+GxmpubsWrVKpx77rnudYFAAAAwe/ZsXHbZZTjvvPOwcOHCHr0+lDq33MzpScRyMyIiIiIiIuoF2RskSjLjp7dcdtlleP755zF58mQsXboUK1ascG8rLi7u8vellLjxxhvx7W9/O+r67du3d/p7uq5j7ty5mDt3LiZNmoSHHnoIU6ZMwcSJE/Gvf/0r7u/EG49pmigvL4+bsbRkyRK8/fbbePnllzFlyhSsWbMGVVVVXf5NlF6ak0kkpb26GYNERERERERElH7sSZSipqYmDB48GMFgEI8++mjC+82cORPPPPMMAODxxx93r58/fz4efPBBNDc3AwA+++wz7NmzB6WlpWhqaor7WJs2bcLmzZvdy2vXrsXIkSMxfvx47N271w0SBYNBfPjhh52Ov1+/fhg9ejSeeuopAFbQ6t///jcAq1fRjBkzcOutt6J///7YsWNHVy8H9QInc8gwJUwp3aARERERERERUToxSJSin//855gxYwZmz56No446KuH97rrrLvzmN79B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\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FHfEpRQj_7jQ"},"source":["#Prophet"]},{"cell_type":"code","metadata":{"id":"GxabcXNaR_HX"},"source":["import pandas as pd\n","from fbprophet import Prophet\n","import matplotlib.pyplot as plt\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KMFg8RedAAXL","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"940c10ac-0f04-45dc-b237-4266311ac82d"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version1.csv\", encoding='CP949')\n","df = df.drop(df.columns[0], axis=1)\n","\n","df.columns = [\"ds\",\"y\"]\n","df[\"ds\"] = pd.to_datetime(df[\"ds\"], dayfirst = True)\n","\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-07-01 00:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-07-01 01:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-07-01 02:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-07-01 03:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-07-01 04:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                   ds         y\n","0 2021-07-01 00:00:00  0.124688\n","1 2021-07-01 01:00:00  0.124688\n","2 2021-07-01 02:00:00  0.124688\n","3 2021-07-01 03:00:00  0.124688\n","4 2021-07-01 04:00:00  0.124688"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","metadata":{"id":"xv9FXHpaAELb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8b0e0b9d-a54a-415d-d86a-054fa1948fa9"},"source":["m = Prophet()\n","m.fit(df[:-24*4])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:numexpr.utils:NumExpr defaulting to 4 threads.\n","INFO:fbprophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n"]},{"output_type":"execute_result","data":{"text/plain":["<fbprophet.forecaster.Prophet at 0x7f215515e810>"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"imkZ1wN0AGgF","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"ea2b607d-08db-4628-b549-675ad39e5ce8"},"source":["future = m.make_future_dataframe(freq='H',periods=24*4)\n","future.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>716</th>\n","      <td>2021-07-30 20:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>717</th>\n","      <td>2021-07-30 21:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>718</th>\n","      <td>2021-07-30 22:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>719</th>\n","      <td>2021-07-30 23:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>720</th>\n","      <td>2021-07-31 00:00:00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                     ds\n","716 2021-07-30 20:00:00\n","717 2021-07-30 21:00:00\n","718 2021-07-30 22:00:00\n","719 2021-07-30 23:00:00\n","720 2021-07-31 00:00:00"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"xiGIX82FAIvT","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"3d64b968-033e-427c-959a-579d919e3d13"},"source":["forecast = m.predict(future)\n","forecast[['ds', 'yhat']].tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>yhat</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>716</th>\n","      <td>2021-07-30 20:00:00</td>\n","      <td>-0.288537</td>\n","    </tr>\n","    <tr>\n","      <th>717</th>\n","      <td>2021-07-30 21:00:00</td>\n","      <td>-0.282405</td>\n","    </tr>\n","    <tr>\n","      <th>718</th>\n","      <td>2021-07-30 22:00:00</td>\n","      <td>-0.284833</td>\n","    </tr>\n","    <tr>\n","      <th>719</th>\n","      <td>2021-07-30 23:00:00</td>\n","      <td>-0.287630</td>\n","    </tr>\n","    <tr>\n","      <th>720</th>\n","      <td>2021-07-31 00:00:00</td>\n","      <td>-0.281476</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                     ds      yhat\n","716 2021-07-30 20:00:00 -0.288537\n","717 2021-07-30 21:00:00 -0.282405\n","718 2021-07-30 22:00:00 -0.284833\n","719 2021-07-30 23:00:00 -0.287630\n","720 2021-07-31 00:00:00 -0.281476"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","metadata":{"id":"L-HWlN-ZAN-f","colab":{"base_uri":"https://localhost:8080/","height":320},"outputId":"aae0531b-d3a6-48cd-8fcd-ac6d5d728e5b"},"source":["plt.figure(figsize=(20,5))\n","\n","plt.plot(df[\"y\"][221:], label=\"real\")\n","plt.plot(range(720-24*4,720),forecast['yhat'][-24*4:], label=\"Prophet\")\n","plt.plot(range(720-24*4,720),pred_series[:24*4+23-23]+0.00900414, label=\"Transformer\")\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABJAAAAEvCAYAAAAadDsuAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeZwU9Z0//tenqs+5mQEE5BgUBLkERdAY7zMxUeORmI0RXI1rDje7+zVZza4xx+ZwN4n+4m83xvxCdE2MifErkqzGI2rU9UBARC655BhuZmCuvur4/P6orp7qme6eHvqoquH1fDx4QHdXd3+Y6a6qz7ve7/dHSClBRERERERERESUj+L2AIiIiIiIiIiIyNsYQCIiIiIiIiIiooIYQCIiIiIiIiIiooIYQCIiIiIiIiIiooIYQCIiIiIiIiIiooIYQCIiIiIiIiIiooICbg/gaIwcOVK2tra6PQwiIiIiIiIiomFj5cqVh6SUo3I95ssAUmtrK1asWOH2MIiIiIiIiIiIhg0hxI58j7GEjYiIiIiIiIiICmIAiYiIiIiIiIiICmIAiYiIiIiIiIiICvJlDyQiIiIiIiIi8jdN09DW1oZEIuH2UI45kUgE48ePRzAYLPo5DCARERERERERUdW1tbWhvr4era2tEEK4PZxjhpQS7e3taGtrw+TJk4t+HkvYiIiIiIiIiKjqEokEWlpaGDyqMiEEWlpahpz5xQASEREREREREbmCwSN3HM3PnQEkIiIiIiIiIqKj0NraikOHDrk9jKpgAImIiIiIiIiIjnlSSpim6fYwPKssASQhxBIhxAEhxNo8jwshxE+FEFuEEGuEEKc6HlskhNic/rOoHOMhIiIiIiIioqFZt6cTB7uTbg+jqrZv345p06bhxhtvxKxZs/Dd734Xp59+OubMmYN77rkns91VV12F0047DTNnzsRDDz3k4ojdU64MpIcBXFbg8Y8BmJr+cyuAnwGAEKIZwD0AFgJYAOAeIcSIMo2JiIiIiIiIiIr0hUdW4MG/bnV7GFW3efNmfOlLX8J9992H3bt3Y/ny5Vi9ejVWrlyJV199FQCwZMkSrFy5EitWrMBPf/pTtLe3uzzq6guU40WklK8KIVoLbHIlgP+WUkoAbwkhmoQQYwGcB+AFKWUHAAghXoAViPptOcZFRERERERERMXpTuqIpQxX3vvbf1yH9Xu6yvqaM8Y14J5Pzhx0u0mTJuGMM87AHXfcgeeffx7z5s0DAPT09GDz5s0455xz8NOf/hRPPfUUAGDXrl3YvHkzWlpayjperytLAKkIxwPY5bjdlr4v3/1EREREREREVEWaYcI0pdvDqLra2loAVg+ku+66C3/3d3+X9fgrr7yCF198EW+++SZqampw3nnnIZFIuDFUV1UrgFQyIcStsMrfMHHiRJdHQ0RERERERDS86IaEId0JIBWTKVRpl156Ke6++2587nOfQ11dHXbv3o1gMIjOzk6MGDECNTU12LhxI9566y23h+qKagWQdgOY4Lg9Pn3fblhlbM77X8n1AlLKhwA8BADz588/9kKiRERERERERBVimhK6KY/JDCTbJZdcgg0bNuDMM88EANTV1eHXv/41LrvsMjz44IM4+eSTMW3aNJxxxhkuj9Qd1QogLQPwFSHE47AaZndKKfcKIZ4D8H1H4+xLANxVpTEREREREREREQAtvXy96VIGkltaW1uxdm3fgvJf/epX8dWvfnXAds8++2zO52/fvr1SQ/OcsgSQhBC/hZVJNFII0QZrZbUgAEgpHwTwDICPA9gCIAbgpvRjHUKI7wJ4J/1S37EbahMRERERERFRdeiGFTgyjq34EQ1BuVZh++wgj0sAX87z2BIAS8oxDiIiIiIiIiIaOs1IZyAdwyVsVJji9gCIiIiIiIiIyF2anYHEABLlwQASERERERER0TEuk4F0jPVAouIxgERERERERER0jLN7IDGARPkwgERERERERER0jEulM5BYwkb5MIBEREREREREdIyzS9iOtVXYVFXF3LlzMWvWLFx33XWIxWIlv+b27dsxa9asIT1n6dKlWL9+fcnvXUkMIBEREREREREd4zIlbMdYBlI0GsXq1auxdu1ahEIhPPjgg1mP67pelXEwgEREREREREREnpdiE22cffbZ2LJlC1555RWcffbZuOKKKzBjxgwkEgncdNNNmD17NubNm4eXX34ZAPDwww/jyiuvxHnnnYepU6fi29/+dua1DMPAF77wBcycOROXXHIJ4vE4AGDr1q247LLLcNppp+Hss8/Gxo0b8cYbb2DZsmX42te+hrlz52Lr1q2u/P8HE3B7AERERERER2NvZxzLP+zAlXOPd3soRES+px/jPZB0Xcez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\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"UUMRI2j6Bocb"},"source":["#LSTMa"]},{"cell_type":"code","metadata":{"id":"7WLcYZZYBqhX"},"source":["import numpy as np \n","import pandas as pd \n","import matplotlib.pyplot as plt\n","\n","from tqdm import trange\n","import random"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hGUOrhKuBscl","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"a863af50-a981-4f24-acb1-dffbdb734f34"},"source":["data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version1.csv\", encoding='CP949')\n","\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>날짜</th>\n","      <th>종가</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2021-07-01 0:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2021-07-01 1:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2021-07-01 2:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2021-07-01 3:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2021-07-01 4:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0               날짜        종가\n","0           0  2021-07-01 0:00  0.124688\n","1           1  2021-07-01 1:00  0.124688\n","2           2  2021-07-01 2:00  0.124688\n","3           3  2021-07-01 3:00  0.124688\n","4           4  2021-07-01 4:00  0.124688"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"MR7XsjsxBtY_"},"source":["from sklearn.preprocessing import MinMaxScaler\n","min_max_scaler = MinMaxScaler()\n","data[\"종가\"] = min_max_scaler.fit_transform(data[\"종가\"].to_numpy().reshape(-1,1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LzqEQL_2Byuf"},"source":["train = data[:-24*4]\n","train = train[\"종가\"].to_numpy()\n","\n","test = data[-24*4:]\n","test = test[\"종가\"].to_numpy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Q6VbWpwB09L"},"source":["import torch\n","import torch.nn as nn\n","from torch import optim\n","import torch.nn.functional as F\n","\n","device = torch.device(\"cuda\", index=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vsgdq7a1B2Zf"},"source":["class lstm_encoder(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layers = 1):\n","        super(lstm_encoder, self).__init__()\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.num_layers = num_layers\n","\n","        self.lstm = nn.LSTM(input_size = input_size, hidden_size = hidden_size, num_layers = num_layers, batch_first=True)\n","\n","    def forward(self, x_input):\n","        lstm_out, self.hidden = self.lstm(x_input)\n","        return lstm_out, self.hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g3V7hzfIB4ua"},"source":["class lstm_decoder(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layers = 1):\n","        super(lstm_decoder, self).__init__()\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.num_layers = num_layers\n","\n","        self.lstm = nn.LSTM(input_size = input_size, hidden_size = hidden_size,num_layers = num_layers, batch_first=True)\n","        self.linear = nn.Linear(hidden_size, input_size)           \n","\n","    def forward(self, x_input, encoder_hidden_states):\n","        lstm_out, self.hidden = self.lstm(x_input.unsqueeze(-1), encoder_hidden_states)\n","        output = self.linear(lstm_out)\n","        \n","        return output, self.hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"khG35pB8B8Zb"},"source":["class lstm_encoder_decoder(nn.Module):\n","    def __init__(self, input_size, hidden_size):\n","        super(lstm_encoder_decoder, self).__init__()\n","\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","\n","        self.encoder = lstm_encoder(input_size = input_size, hidden_size = hidden_size)\n","        self.decoder = lstm_decoder(input_size = input_size, hidden_size = hidden_size)\n","\n","    def forward(self, inputs, targets, target_len, teacher_forcing_ratio):\n","        batch_size = inputs.shape[0]\n","        input_size = inputs.shape[2]\n","\n","        outputs = torch.zeros(batch_size, target_len, input_size)\n","\n","        _, hidden = self.encoder(inputs)\n","        decoder_input = inputs[:,-1, :]\n","        \n","        for t in range(target_len): \n","            out, hidden = self.decoder(decoder_input, hidden)\n","            out =  out.squeeze(1)\n","            if random.random() < teacher_forcing_ratio:\n","                decoder_input = targets[:, t, :]\n","            else:\n","                decoder_input = out\n","            outputs[:,t,:] = out\n","\n","        return outputs\n","\n","    def predict(self, inputs, target_len):\n","        inputs = inputs.unsqueeze(0)\n","        self.eval()\n","        batch_size = inputs.shape[0]\n","        input_size = inputs.shape[2]\n","        outputs = torch.zeros(batch_size, target_len, input_size)\n","        _, hidden = self.encoder(inputs)\n","        decoder_input = inputs[:,-1, :]\n","        for t in range(target_len): \n","            out, hidden = self.decoder(decoder_input, hidden)\n","            out =  out.squeeze(1)\n","            decoder_input = out\n","            outputs[:,t,:] = out\n","        return outputs.detach().numpy()[0,:,0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"euepwoDsB_AS"},"source":["from torch.utils.data import DataLoader, Dataset\n","\n","class windowDataset(Dataset):\n","    def __init__(self, y, input_window=80, output_window=20, stride=5):\n","        #총 데이터의 개수\n","        L = y.shape[0]\n","        #stride씩 움직일 때 생기는 총 sample의 개수\n","        num_samples = (L - input_window - output_window) // stride + 1\n","\n","        #input과 output\n","        X = np.zeros([input_window, num_samples])\n","        Y = np.zeros([output_window, num_samples])\n","\n","        for i in np.arange(num_samples):\n","            start_x = stride*i\n","            end_x = start_x + input_window\n","            X[:,i] = y[start_x:end_x]\n","\n","            start_y = stride*i + input_window\n","            end_y = start_y + output_window\n","            Y[:,i] = y[start_y:end_y]\n","\n","        X = X.reshape(X.shape[0], X.shape[1], 1).transpose((1,0,2))\n","        Y = Y.reshape(Y.shape[0], Y.shape[1], 1).transpose((1,0,2))\n","        self.x = X\n","        self.y = Y\n","        \n","        self.len = len(X)\n","    def __getitem__(self, i):\n","        return self.x[i], self.y[i]\n","    def __len__(self):\n","        return self.len"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fyRG-o1DCB_6"},"source":["iw = 24*8\n","ow = 24*4\n","\n","train_dataset = windowDataset(train, input_window=iw, output_window=ow, stride=1)\n","train_loader = DataLoader(train_dataset, batch_size=64)\n","# y_train_loader = DataLoader(y_train, batch_size=5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o6RRY-yGCEFL"},"source":["model = lstm_encoder_decoder(input_size=1, hidden_size=16).to(device)\n","# model.train_model(X_train.to(device), y_train.to(device), n_epochs=100, target_len=ow, batch_size=5, training_bprediction=\"mixed_teacher_forcing\", teacher_forcing_ratio=0.6, learning_rate=0.01, dynamic_tf=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zh7o6HY4CGC8"},"source":["#5000으로 할 경우 시간도 오래걸리고 에러도 커서 100으로 줄인다.\n","\n","learning_rate=0.01\n","epoch = 100\n","optimizer = optim.Adam(model.parameters(), lr = learning_rate)\n","criterion = nn.MSELoss()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zoaTXiKbCHce","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6c9d1821-95d2-443c-d432-29d8ca128f29"},"source":["from tqdm import tqdm\n","\n","model.train()\n","with tqdm(range(epoch)) as tr:\n","    for i in tr:\n","        total_loss = 0.0\n","        for x,y in train_loader:\n","            optimizer.zero_grad()\n","            x = x.to(device).float()\n","            y = y.to(device).float()\n","            output = model(x, y, ow, 0.6).to(device)\n","            loss = criterion(output, y)\n","            loss.backward()\n","            optimizer.step()\n","            total_loss += loss.cpu().item()\n","        tr.set_postfix(loss=\"{0:.5f}\".format(total_loss/len(train_loader)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [00:41<00:00,  2.43it/s, loss=0.00602]\n"]}]},{"cell_type":"code","metadata":{"id":"Shr1ZdBvCJfq"},"source":["predict = model.predict(torch.tensor(train_dataset[0][0]).to(device).float(), target_len=ow)\n","real = train_dataset[0][1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6Y_bM2yLCMSN"},"source":["predict = model.predict(torch.tensor(train[-24*4*2:]).reshape(-1,1).to(device).float(), target_len=ow)\n","real = data[\"종가\"].to_numpy()\n","\n","predict = min_max_scaler.inverse_transform(predict.reshape(-1,1))\n","real = min_max_scaler.inverse_transform(real.reshape(-1,1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AcWSBCdLCOeU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"29a8567d-f286-4ba6-947d-10ecb26a4d29"},"source":["real.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(721, 1)"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"Qe3V9gtwCPsl","colab":{"base_uri":"https://localhost:8080/","height":320},"outputId":"ff82a46c-d4f2-4914-8e71-2736eafe772a"},"source":["plt.figure(figsize=(20,5))\n","plt.plot(range(220,720), real[221:], label=\"real\")\n","plt.plot(range(720-24*4,720), predict[-24*4:], label=\"LSTMa\")\n","plt.plot(range(720-24*4,720),forecast['yhat'][-24*4:], label=\"Prophet\")\n","plt.plot(range(720-24*4,720),pred_series[:24*4+23-23]+0.00900414, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZHCM0K5uDzwc"},"source":["#Informer"]},{"cell_type":"code","metadata":{"id":"Ighg_VhkDrwT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"19b472b2-148a-4937-f830-383b292cfe2e"},"source":["!git clone https://github.com/zhouhaoyi/Informer2020.git"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'Informer2020'...\n","remote: Enumerating objects: 535, done.\u001b[K\n","remote: Total 535 (delta 0), reused 0 (delta 0), pack-reused 535\u001b[K\n","Receiving objects: 100% (535/535), 6.47 MiB | 24.55 MiB/s, done.\n","Resolving deltas: 100% (306/306), done.\n"]}]},{"cell_type":"code","metadata":{"id":"2yxRebPpD1nz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"23a27781-f2f4-4cb2-ba98-b6bb8bdb84a6"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"Q_nMD1gGD5ND"},"source":["import sys\n","if not 'Informer2020' in sys.path:\n","    sys.path += ['Informer2020']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iTVBZNqqD6sX"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import MinMaxScaler\n","\n","from datetime import timedelta\n","import torch\n","from torch import nn\n","from torch import optim\n","from torch.utils.data import DataLoader, Dataset\n","\n","from tqdm import tqdm\n","from models.model import Informer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jjqkV_XfD8jj"},"source":["class StandardScaler():\n","    def __init__(self):\n","        self.mean = 0.\n","        self.std = 1.\n","    \n","    def fit(self, data):\n","        self.mean = data.mean(0)\n","        self.std = data.std(0)\n","\n","    def transform(self, data):\n","        mean = torch.from_numpy(self.mean).type_as(data).to(data.device) if torch.is_tensor(data) else self.mean\n","        std = torch.from_numpy(self.std).type_as(data).to(data.device) if torch.is_tensor(data) else self.std\n","        return (data - mean) / std\n","\n","    def inverse_transform(self, data):\n","        mean = torch.from_numpy(self.mean).type_as(data).to(data.device) if torch.is_tensor(data) else self.mean\n","        std = torch.from_numpy(self.std).type_as(data).to(data.device) if torch.is_tensor(data) else self.std\n","        return (data * std) + mean\n","        \n","\n","def time_features(dates, freq='h'):\n","    dates['month'] = dates.date.apply(lambda row:row.month,1)\n","    dates['day'] = dates.date.apply(lambda row:row.day,1)\n","    dates['weekday'] = dates.date.apply(lambda row:row.weekday(),1)\n","    dates['hour'] = dates.date.apply(lambda row:row.hour,1)\n","    dates['minute'] = dates.date.apply(lambda row:row.minute,1)\n","    dates['minute'] = dates.minute.map(lambda x:x//15)\n","    freq_map = {\n","        'y':[],'m':['month'],'w':['month'],'d':['month','day','weekday'],\n","        'b':['month','day','weekday'],'h':['month','day','weekday','hour'],\n","        't':['month','day','weekday','hour','minute'],\n","    }\n","    return dates[freq_map[freq.lower()]].values\n","\n","def _process_one_batch(batch_x, batch_y, batch_x_mark, batch_y_mark):\n","    batch_x = batch_x.float().to(device)\n","    batch_y = batch_y.float()\n","    batch_x_mark = batch_x_mark.float().to(device)\n","    batch_y_mark = batch_y_mark.float().to(device)\n","    dec_inp = torch.zeros([batch_y.shape[0], pred_len, batch_y.shape[-1]]).float()\n","    dec_inp = torch.cat([batch_y[:,:label_len,:], dec_inp], dim=1).float().to(device)\n","    outputs = model(batch_x, batch_x_mark, dec_inp, batch_y_mark)\n","    batch_y = batch_y[:,-pred_len:,0:].to(device)\n","    return outputs, batch_y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftToXwQzD_XZ"},"source":["class Dataset_Pred(Dataset):\n","    def __init__(self, dataframe, size=None, scale=True):\n","        self.seq_len = size[0]\n","        self.label_len = size[1]\n","        self.pred_len = size[2]\n","        self.dataframe = dataframe\n","        \n","        self.scale = scale\n","        self.__read_data__()\n","\n","    def __read_data__(self):\n","        self.scaler = StandardScaler()\n","        df_raw = self.dataframe\n","        df_raw[\"date\"] = pd.to_datetime(df_raw[\"date\"])\n","\n","        delta = df_raw[\"date\"].iloc[1] - df_raw[\"date\"].iloc[0]\n","        if delta>=timedelta(hours=1):\n","            self.freq='h'\n","        else:\n","            self.freq='t'\n","\n","        \n","\n","        border1 = 0\n","        border2 = len(df_raw)\n","        cols_data = df_raw.columns[1:]\n","        df_data = df_raw[cols_data]\n","\n","\n","        if self.scale:\n","            self.scaler.fit(df_data.values)\n","            data = self.scaler.transform(df_data.values)\n","        else:\n","            data = df_data.values\n","            \n","        tmp_stamp = df_raw[['date']][border1:border2]\n","        tmp_stamp['date'] = pd.to_datetime(tmp_stamp.date)\n","        pred_dates = pd.date_range(tmp_stamp.date.values[-1], periods=self.pred_len+1, freq=self.freq)\n","        \n","        df_stamp = pd.DataFrame(columns = ['date'])\n","        df_stamp.date = list(tmp_stamp.date.values) + list(pred_dates[1:])\n","        data_stamp = time_features(df_stamp, freq=self.freq)\n","\n","        self.data_x = data[border1:border2]\n","        self.data_y = data[border1:border2]\n","        self.data_stamp = data_stamp\n","    \n","    def __getitem__(self, index):\n","        s_begin = index\n","        s_end = s_begin + self.seq_len\n","        r_begin = s_end - self.label_len\n","        r_end = r_begin + self.label_len + self.pred_len\n","\n","        seq_x = self.data_x[s_begin:s_end]\n","        seq_y = self.data_y[r_begin:r_end]\n","        seq_x_mark = self.data_stamp[s_begin:s_end]\n","        seq_y_mark = self.data_stamp[r_begin:r_end]\n","        return seq_x, seq_y, seq_x_mark, seq_y_mark\n","\n","    def __len__(self):\n","        return len(self.data_x) - self.seq_len- self.pred_len + 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HOXR317aEHvb","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"d16d8659-d359-423e-dec0-bce991400498"},"source":["data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version1.csv\", encoding='CP949')\n","\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>날짜</th>\n","      <th>종가</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2021-07-01 0:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2021-07-01 1:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2021-07-01 2:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2021-07-01 3:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2021-07-01 4:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0               날짜        종가\n","0           0  2021-07-01 0:00  0.124688\n","1           1  2021-07-01 1:00  0.124688\n","2           2  2021-07-01 2:00  0.124688\n","3           3  2021-07-01 3:00  0.124688\n","4           4  2021-07-01 4:00  0.124688"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","metadata":{"id":"cWQ9usQTEKUl"},"source":["data[\"date\"] = data[\"날짜\"]\n","data[\"date\"] = pd.to_datetime(data[\"date\"], dayfirst = True)\n","data[\"value\"] = data[\"종가\"]\n","\n","min_max_scaler = MinMaxScaler()\n","data[\"value\"] = min_max_scaler.fit_transform(data[\"value\"].to_numpy().reshape(-1,1)).reshape(-1)\n","data = data[[\"date\", \"value\"]]\n","\n","data_train = data.iloc[:-24*4].copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nrnJWkCXENIX"},"source":["pred_len = 24*4\n","\n","seq_len = pred_len#인풋 크기\n","label_len = pred_len#디코더에서 참고할 크기\n","pred_len = pred_len#예측할 크기\n","\n","batch_size = 10\n","shuffle_flag = True\n","num_workers = 0\n","drop_last = True\n","\n","\n","\n","dataset = Dataset_Pred(dataframe=data_train ,scale=True, size = (seq_len, label_len,pred_len))\n","data_loader = DataLoader(dataset,batch_size=batch_size,shuffle=shuffle_flag,num_workers=num_workers,drop_last=drop_last)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4rWuHee2EPMC"},"source":["enc_in = 1\n","dec_in = 1\n","c_out = 1\n","device = torch.device(\"cuda:0\")\n","\n","model = Informer(enc_in, dec_in, c_out, seq_len, label_len, pred_len, device = device).to(device)\n","learning_rate = 1e-4\n","criterion =  nn.MSELoss()\n","\n","model_optim = optim.Adam(model.parameters(), lr=learning_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3OuiFBlHESYz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"0f915901-2136-47b0-e493-c206417eb07f"},"source":["# Informer는 error를 100하는게 시간도 덜 걸리고 에러도 적다.\n","\n","train_epochs = 100\n","model.train()\n","progress = tqdm(range(train_epochs))\n","for epoch in progress:\n","    train_loss = []\n","    for i, (batch_x,batch_y,batch_x_mark,batch_y_mark) in enumerate(data_loader):\n","        model_optim.zero_grad()\n","        pred, true = _process_one_batch(batch_x, batch_y, batch_x_mark, batch_y_mark)\n","        loss = criterion(pred, true)\n","        train_loss.append(loss.item())\n","        loss.backward()\n","        model_optim.step()\n","    train_loss = np.average(train_loss)\n","    progress.set_description(\"loss: {:0.6f}\".format(train_loss))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/100 [00:00<?, ?it/s]/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:652: UserWarning:\n","\n","Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)\n","\n","loss: 0.069984: 100%|██████████| 100/100 [03:27<00:00,  2.08s/it]\n"]}]},{"cell_type":"code","metadata":{"id":"s0pez33IETCg","colab":{"base_uri":"https://localhost:8080/"},"outputId":"44a5ffc2-ea7f-404f-d29d-07b90d256294"},"source":["import time\n","now = time.time()\n","scaler = dataset.scaler\n","df_test = data_train.copy()\n","df_test[\"value\"] = scaler.transform(df_test[\"value\"])\n","df_test[\"date\"] = pd.to_datetime(df_test[\"date\"].values)\n","\n","delta = df_test[\"date\"][1] - df_test[\"date\"][0]\n","for i in range(pred_len):\n","    df_test = df_test.append({\"date\":df_test[\"date\"].iloc[-1]+delta}, ignore_index=True)\n","df_test = df_test.fillna(0)\n","\n","\n","df_test_x = df_test.iloc[-seq_len-pred_len:-pred_len].copy()\n","df_test_y = df_test.iloc[-label_len-pred_len:].copy()\n","\n","df_test_numpy = df_test.to_numpy()[:,1:].astype(\"float\")\n","test_time_x = time_features(df_test_x, freq=dataset.freq) #인풋 타임 스템프\n","test_data_x = df_test_numpy[-seq_len-pred_len:-pred_len] #인풋 데이터\n","\n","\n","test_time_y = time_features(df_test_y, freq=dataset.freq) #아웃풋 타임스템프\n","test_data_y =df_test_numpy[-label_len-pred_len:]\n","test_data_y[-pred_len:] = np.zeros_like(test_data_y[-pred_len:]) #예측하는 부분을 0으로 채워준다.\n","\n","\n","\n","test_time_x = test_time_x\n","test_time_y = test_time_y\n","test_data_y = test_data_y.astype(np.float64)\n","test_data_x = test_data_x.astype(np.float64)\n","\n","_test = [(test_data_x,test_data_y,test_time_x,test_time_y)]\n","_test_loader = DataLoader(_test,batch_size=1,shuffle=False)\n","\n","preds = []\n","\n","with torch.no_grad():\n","    for i, (batch_x,batch_y,batch_x_mark,batch_y_mark) in enumerate(_test_loader):\n","        \n","        batch_x = batch_x.float().to(device)\n","        batch_y = batch_y.float().to(device)\n","\n","        batch_x_mark = batch_x_mark.float().to(device)\n","        batch_y_mark = batch_y_mark.float().to(device)\n","\n","        outputs = model(batch_x, batch_x_mark, batch_y, batch_y_mark)\n","        preds = outputs.detach().cpu().numpy()\n","\n","preds = scaler.inverse_transform(preds[0])\n","\n","df_test.iloc[-pred_len:, 1:] = preds\n","print(time.time() - now)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.22490930557250977\n"]}]},{"cell_type":"code","metadata":{"id":"UKVKmhZLEWXz","colab":{"base_uri":"https://localhost:8080/","height":320},"outputId":"bb2422ef-5ce7-4d3e-8729-c9243ddbfb15"},"source":["import matplotlib.pyplot as plt\n","\n","real = data[\"value\"].to_numpy()\n","result = df_test[\"value\"].iloc[-24*4:].to_numpy()\n","\n","real = min_max_scaler.inverse_transform(real.reshape(-1,1)).reshape(-1)\n","result = min_max_scaler.inverse_transform(result.reshape(-1,1)).reshape(-1)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(range(220,720),real[221:], label=\"real\")\n","plt.plot(range(720-24*4,720),result, label=\"Informer\")\n","plt.plot(range(720-24*4,720), predict[-24*4:], label=\"LSTMa\")\n","plt.plot(range(720-24*4,720),forecast['yhat'][-24*4:], label=\"Prophet\")\n","plt.plot(range(720-24*4,720),pred_series[:24*4+23-23]+0.00900414, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"oyQIUFttGo_w"},"source":["#ARIMA"]},{"cell_type":"code","metadata":{"id":"hiLPHVi8FtJA"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U3r5vY8HFudT","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"14628f50-86ba-48e8-bc4c-6652f7bb2a24"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version1.csv\", encoding='CP949')\n","df = df.drop(df.columns[0], axis=1)\n","df.columns = [\"ds\",\"y\"]\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-07-01 0:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-07-01 1:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-07-01 2:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-07-01 3:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-07-01 4:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                ds         y\n","0  2021-07-01 0:00  0.124688\n","1  2021-07-01 1:00  0.124688\n","2  2021-07-01 2:00  0.124688\n","3  2021-07-01 3:00  0.124688\n","4  2021-07-01 4:00  0.124688"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","metadata":{"id":"3H-pHMqLF1ND"},"source":["df_train = df.iloc[:-24*4]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vVJjfCniF1xb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b5872c6a-9227-4366-d61e-551e162f43c3"},"source":["from statsmodels.tsa.seasonal import seasonal_decompose"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning:\n","\n","pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","\n"]}]},{"cell_type":"code","metadata":{"id":"1AzDqmYFF3qS","colab":{"base_uri":"https://localhost:8080/","height":506},"outputId":"dc8e5dba-43e5-4960-bb56-05dd4bf6d3d2"},"source":["import statsmodels.api as sm\n","fig = plt.figure(figsize=(20,8))\n","ax1 = fig.add_subplot(211)\n","fig = sm.graphics.tsa.plot_acf(df_train[\"y\"], lags=20, ax=ax1)\n","\n","fig = plt.figure(figsize=(20,8))\n","ax1 = fig.add_subplot(212)\n","fig = sm.graphics.tsa.plot_pacf(df_train[\"y\"], lags=20, ax=ax1)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ljPV71OzF64s"},"source":["from statsmodels.tsa.arima_model import ARIMA\n","from statsmodels.tsa.statespace.sarimax import SARIMAX\n","import itertools\n","from tqdm import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rtlXujmwF60T","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b43cb22a-1b1f-44c9-9ccb-4c37c6ba63f7"},"source":["p = range(0,3)\n","d = range(1,2)\n","q = range(0,6)\n","m = 24\n","\n","pdq = list(itertools.product(p,d,q))\n","seasonal_pdq = [(x[0],x[1], x[2], m) for x in list(itertools.product(p,d,q))]\n","\n","aic = []\n","params = []\n","\n","with tqdm(total = len(pdq) * len(seasonal_pdq)) as pg:\n","    for i in pdq:\n","        for j in seasonal_pdq:\n","            pg.update(1)\n","            try:\n","                model = SARIMAX(df_train[\"y\"], order=(i), season_order = (j))\n","                model_fit = model.fit()\n","                # print(\"SARIMA:{}{}, AIC:{}\".format(i,j, round(model_fit.aic,2)))\n","                aic.append(round(model_fit.aic,2))\n","                params.append((i,j))\n","            except:\n","                continue"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":[" 50%|█████     | 163/324 [00:26<00:37,  4.30it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 51%|█████     | 164/324 [00:26<00:52,  3.05it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 51%|█████     | 165/324 [00:27<01:02,  2.55it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 51%|█████     | 166/324 [00:27<01:08,  2.29it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 52%|█████▏    | 167/324 [00:28<01:12,  2.16it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 52%|█████▏    | 168/324 [00:28<01:16,  2.04it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 52%|█████▏    | 169/324 [00:29<01:20,  1.92it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 52%|█████▏    | 170/324 [00:30<01:21,  1.88it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 53%|█████▎    | 171/324 [00:30<01:21,  1.88it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 53%|█████▎    | 172/324 [00:31<01:21,  1.87it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 53%|█████▎    | 173/324 [00:31<01:20,  1.88it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 54%|█████▎    | 174/324 [00:32<01:20,  1.85it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 54%|█████▍    | 175/324 [00:32<01:20,  1.86it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 54%|█████▍    | 176/324 [00:33<01:19,  1.87it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 55%|█████▍    | 177/324 [00:33<01:18,  1.88it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 55%|█████▍    | 178/324 [00:34<01:17,  1.88it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 55%|█████▌    | 179/324 [00:34<01:17,  1.87it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 56%|█████▌    | 180/324 [00:35<01:17,  1.85it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 61%|██████▏   | 199/324 [00:46<01:09,  1.81it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 200/324 [00:46<01:23,  1.49it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 201/324 [00:47<01:32,  1.33it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 202/324 [00:48<01:38,  1.23it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 203/324 [00:49<01:43,  1.17it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 204/324 [00:50<01:47,  1.11it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 205/324 [00:51<01:48,  1.10it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▎   | 206/324 [00:52<01:49,  1.08it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▍   | 207/324 [00:53<01:48,  1.08it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▍   | 208/324 [00:54<01:48,  1.07it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▍   | 209/324 [00:55<01:48,  1.06it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▍   | 210/324 [00:56<01:48,  1.05it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▌   | 211/324 [00:57<01:47,  1.06it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▌   | 212/324 [00:58<01:48,  1.03it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▌   | 213/324 [00:59<01:46,  1.04it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▌   | 214/324 [01:00<01:45,  1.04it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▋   | 215/324 [01:01<01:45,  1.04it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 67%|██████▋   | 216/324 [01:02<01:44,  1.03it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 89%|████████▉ | 289/324 [01:20<00:19,  1.78it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|████████▉ | 290/324 [01:21<00:22,  1.51it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|████████▉ | 291/324 [01:21<00:24,  1.35it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|█████████ | 292/324 [01:22<00:25,  1.26it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|█████████ | 293/324 [01:23<00:25,  1.20it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████ | 294/324 [01:24<00:25,  1.17it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████ | 295/324 [01:25<00:24,  1.16it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████▏| 296/324 [01:26<00:24,  1.15it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 297/324 [01:27<00:23,  1.14it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 298/324 [01:28<00:22,  1.14it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 299/324 [01:29<00:22,  1.13it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 300/324 [01:30<00:21,  1.13it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 301/324 [01:30<00:20,  1.12it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 302/324 [01:31<00:20,  1.10it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▎| 303/324 [01:32<00:18,  1.11it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 304/324 [01:33<00:18,  1.11it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 305/324 [01:34<00:17,  1.12it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 306/324 [01:35<00:16,  1.12it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▍| 307/324 [01:36<00:15,  1.13it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▌| 308/324 [01:37<00:16,  1.00s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▌| 309/324 [01:38<00:16,  1.07s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▌| 310/324 [01:40<00:15,  1.11s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▌| 311/324 [01:41<00:14,  1.14s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▋| 312/324 [01:42<00:13,  1.16s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 313/324 [01:43<00:12,  1.17s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 314/324 [01:44<00:11,  1.18s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 315/324 [01:46<00:10,  1.19s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 316/324 [01:47<00:09,  1.20s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 317/324 [01:48<00:08,  1.21s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 318/324 [01:49<00:07,  1.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 319/324 [01:50<00:06,  1.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 320/324 [01:52<00:04,  1.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 321/324 [01:53<00:03,  1.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 322/324 [01:54<00:02,  1.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|█████████▉| 323/324 [01:55<00:01,  1.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|██████████| 324/324 [01:57<00:00,  1.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|██████████| 324/324 [01:58<00:00,  2.74it/s]\n"]}]},{"cell_type":"code","metadata":{"id":"t77yJtlmGCGl","colab":{"base_uri":"https://localhost:8080/","height":458},"outputId":"ecf8ea98-42b5-4f06-bd7a-c20244d54468"},"source":["optimal = [(params[i],j) for i,j in enumerate(aic) if j == min(aic)]\n","model_opt = SARIMAX(df_train[\"y\"], order = optimal[0][0][0], seasonal_order = optimal[0][0][1])\n","model_opt_fit = model_opt.fit()\n","model_opt_fit.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>Statespace Model Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>                  <td>y</td>               <th>  No. Observations:  </th>   <td>625</td>  \n","</tr>\n","<tr>\n","  <th>Model:</th>           <td>SARIMAX(1, 1, 3)x(0, 1, 0, 24)</td> <th>  Log Likelihood     </th> <td>33.201</td> \n","</tr>\n","<tr>\n","  <th>Date:</th>                   <td>Mon, 20 Sep 2021</td>        <th>  AIC                </th> <td>-56.402</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                       <td>05:08:52</td>            <th>  BIC                </th> <td>-34.417</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                         <td>0</td>               <th>  HQIC               </th> <td>-47.844</td>\n","</tr>\n","<tr>\n","  <th></th>                             <td> - 625</td>             <th>                     </th>    <td> </td>   \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>    <td> </td>   \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>ar.L1</th>  <td>   -0.5463</td> <td>    0.337</td> <td>   -1.620</td> <td> 0.105</td> <td>   -1.207</td> <td>    0.115</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>  <td>    0.2498</td> <td>    0.337</td> <td>    0.741</td> <td> 0.459</td> <td>   -0.411</td> <td>    0.911</td>\n","</tr>\n","<tr>\n","  <th>ma.L2</th>  <td>   -0.5184</td> <td>    0.110</td> <td>   -4.721</td> <td> 0.000</td> <td>   -0.734</td> <td>   -0.303</td>\n","</tr>\n","<tr>\n","  <th>ma.L3</th>  <td>   -0.2870</td> <td>    0.108</td> <td>   -2.657</td> <td> 0.008</td> <td>   -0.499</td> <td>   -0.075</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th> <td>    0.0524</td> <td>    0.001</td> <td>   59.256</td> <td> 0.000</td> <td>    0.051</td> <td>    0.054</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (Q):</th>          <td>180.26</td> <th>  Jarque-Bera (JB):  </th> <td>12600.76</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                 <td>0.00</td>  <th>  Prob(JB):          </th>   <td>0.00</td>  \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th>  <td>0.52</td>  <th>  Skew:              </th>   <td>-1.47</td> \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>     <td>0.00</td>  <th>  Kurtosis:          </th>   <td>25.26</td> \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."],"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                                 Statespace Model Results                                 \n","==========================================================================================\n","Dep. Variable:                                  y   No. Observations:                  625\n","Model:             SARIMAX(1, 1, 3)x(0, 1, 0, 24)   Log Likelihood                  33.201\n","Date:                            Mon, 20 Sep 2021   AIC                            -56.402\n","Time:                                    05:08:52   BIC                            -34.417\n","Sample:                                         0   HQIC                           -47.844\n","                                            - 625                                         \n","Covariance Type:                              opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","ar.L1         -0.5463      0.337     -1.620      0.105      -1.207       0.115\n","ma.L1          0.2498      0.337      0.741      0.459      -0.411       0.911\n","ma.L2         -0.5184      0.110     -4.721      0.000      -0.734      -0.303\n","ma.L3         -0.2870      0.108     -2.657      0.008      -0.499      -0.075\n","sigma2         0.0524      0.001     59.256      0.000       0.051       0.054\n","===================================================================================\n","Ljung-Box (Q):                      180.26   Jarque-Bera (JB):             12600.76\n","Prob(Q):                              0.00   Prob(JB):                         0.00\n","Heteroskedasticity (H):               0.52   Skew:                            -1.47\n","Prob(H) (two-sided):                  0.00   Kurtosis:                        25.26\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","\"\"\""]},"metadata":{},"execution_count":95}]},{"cell_type":"code","metadata":{"id":"PojlDVwHGDm9","colab":{"base_uri":"https://localhost:8080/","height":320},"outputId":"0eb20758-d8c4-45a2-c675-e7f25d5c94ce"},"source":["model = SARIMAX(df_train[\"y\"], order=optimal[0][0][0], seasonal_order=optimal[0][0][1])\n","model_fit = model.fit(disp=0)\n","ARIMA_forecast = model_fit.forecast(steps=24*4)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(range(0,720), df[\"y\"].iloc[1:], label=\"Real\")\n","\n","plt.plot(ARIMA_forecast, label=\"ARIMA\")\n","plt.plot(range(720-24*4,720),result, label=\"Informer\")\n","plt.plot(range(720-24*4,720), predict[-24*4:], label=\"LSTMa\")\n","plt.plot(range(720-24*4,720),forecast['yhat'][-24*4:], label=\"Prophet\")\n","plt.plot(range(720-24*4,720),pred_series[:24*4+23-23]+0.00900414, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"b0hfHNU0ec52","outputId":"791dcd3b-b5d7-4a6c-947d-f6937a327721"},"source":["plt.figure(figsize=(20,5))\n","plt.plot(range(220,720), df[\"y\"].iloc[221:], label=\"Real\")\n","\n","plt.plot(ARIMA_forecast, label=\"ARIMA\")\n","plt.plot(range(720-24*4,720),result, label=\"Informer\")\n","plt.plot(range(720-24*4,720), predict[-24*4:], label=\"LSTMa\")\n","plt.plot(range(720-24*4,720),forecast['yhat'][-24*4:], label=\"Prophet\")\n","plt.plot(range(720-24*4,720),pred_series[:24*4+23-23]+0.00900414, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"a3VzMw4tIcni","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f38418c2-21af-4cde-f158-bb09ba8a93d9"},"source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","\n","def MAPEval(y_pred, y_true):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n","\n","def MSE(y_true, y_pred):\n","    return np.mean(np.square((y_true - y_pred)))\n","\n","def MAE(y_true, y_pred): \n","    return np.mean(np.abs((y_true - y_pred)))\n","\n","\n","\n","print('Transformer')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(pred_series[:24*4+23-23]+0.00900414, target_series+0.00900414), mean_squared_error(target_series+0.00900414, pred_series[:24*4+23-23]+0.00900414), mean_absolute_error(target_series+0.00900414, pred_series[:24*4+23-23]+0.00900414)))\n","\n","print('Informer')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(result, real[-24*4:]), mean_squared_error(real[-24*4:], result), mean_absolute_error(real[-24*4:], result)))\n","\n","print('ARIMA')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(ARIMA_forecast, df[\"y\"].iloc[-24*4:]), mean_squared_error(df[\"y\"].iloc[-24*4:], ARIMA_forecast), mean_absolute_error(df[\"y\"].iloc[-24*4:], ARIMA_forecast)))\n","\n","print('Prophet')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(forecast['yhat'][720-24*4:],df[\"y\"][720-24*4:]), mean_squared_error(df[\"y\"][720-24*4:], forecast['yhat'][720-24*4:]), mean_absolute_error(df[\"y\"][720-24*4:], forecast['yhat'][720-24*4:])))\n","\n","print('LSTMa')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(predict[-24*4:],real[-24*4:]),  mean_squared_error(real[-24*4:], predict[-24*4:]), mean_absolute_error(real[-24*4:], predict[-24*4:])))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Transformer\n","----------------------------------------\n","MAPE: 46.75762355327606 |\n","MSE: 0.03252929449081421 |\n","MAE : 0.10447105020284653\n","\n","Informer\n","----------------------------------------\n","MAPE: 135.1435200915045 |\n","MSE: 0.0786459089255858 |\n","MAE : 0.23349443277858942\n","\n","ARIMA\n","----------------------------------------\n","MAPE: 231.46886489684894 |\n","MSE: 0.314071068741044 |\n","MAE : 0.4688113107613577\n","\n","Prophet\n","----------------------------------------\n","MAPE: 126.86248429015524 |\n","MSE: 0.10592595337296133 |\n","MAE : 0.2629327856084641\n","\n","LSTMa\n","----------------------------------------\n","MAPE: 99.24478367313696 |\n","MSE: 0.0577307294945843 |\n","MAE : 0.2104606194823313\n","\n"]}]},{"cell_type":"code","metadata":{"id":"Jfla6TUQd_tB"},"source":[""],"execution_count":null,"outputs":[]}]}