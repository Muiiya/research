{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3"},"colab":{"name":"3M_480H_ST_ipynb","provenance":[],"collapsed_sections":[],"machine_shape":"hm"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"axF7OBsg-AJs"},"source":["#Transformer"]},{"cell_type":"code","metadata":{"id":"MiFdiUPY8CAr","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6657d24a-0816-417f-89d3-923871efad6a"},"source":["from google.colab import drive\n","drive.mount('/content/drive') "],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"PtFKWnKP7mKd","colab":{"base_uri":"https://localhost:8080/","height":252},"outputId":"af3cfb18-5cf7-40af-af61-e01329f7826e"},"source":["# informer, ARIMA, Prophet, LSTMa와는 다른 형식의 CSV를 사용한다.(Version2)\n","\n","!pip install pandas\n","\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version2.csv', encoding='cp949')\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.1.5)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.19.5)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas) (2018.9)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>날짜</th>\n","      <th>2021-05-01 0:00</th>\n","      <th>2021-05-01 1:00</th>\n","      <th>2021-05-01 2:00</th>\n","      <th>2021-05-01 3:00</th>\n","      <th>2021-05-01 4:00</th>\n","      <th>2021-05-01 5:00</th>\n","      <th>2021-05-01 6:00</th>\n","      <th>2021-05-01 7:00</th>\n","      <th>2021-05-01 8:00</th>\n","      <th>2021-05-01 9:00</th>\n","      <th>2021-05-01 10:00</th>\n","      <th>2021-05-01 11:00</th>\n","      <th>2021-05-01 12:00</th>\n","      <th>2021-05-01 13:00</th>\n","      <th>2021-05-01 14:00</th>\n","      <th>2021-05-01 15:00</th>\n","      <th>2021-05-01 16:00</th>\n","      <th>2021-05-01 17:00</th>\n","      <th>2021-05-01 18:00</th>\n","      <th>2021-05-01 19:00</th>\n","      <th>2021-05-01 20:00</th>\n","      <th>2021-05-01 21:00</th>\n","      <th>2021-05-01 22:00</th>\n","      <th>2021-05-01 23:00</th>\n","      <th>2021-05-02 0:00</th>\n","      <th>2021-05-02 1:00</th>\n","      <th>2021-05-02 2:00</th>\n","      <th>2021-05-02 3:00</th>\n","      <th>2021-05-02 4:00</th>\n","      <th>2021-05-02 5:00</th>\n","      <th>2021-05-02 6:00</th>\n","      <th>2021-05-02 7:00</th>\n","      <th>2021-05-02 8:00</th>\n","      <th>2021-05-02 9:00</th>\n","      <th>2021-05-02 10:00</th>\n","      <th>2021-05-02 11:00</th>\n","      <th>2021-05-02 12:00</th>\n","      <th>2021-05-02 13:00</th>\n","      <th>2021-05-02 14:00</th>\n","      <th>...</th>\n","      <th>2021-07-29 9:00</th>\n","      <th>2021-07-29 10:00</th>\n","      <th>2021-07-29 11:00</th>\n","      <th>2021-07-29 12:00</th>\n","      <th>2021-07-29 13:00</th>\n","      <th>2021-07-29 14:00</th>\n","      <th>2021-07-29 15:00</th>\n","      <th>2021-07-29 16:00</th>\n","      <th>2021-07-29 17:00</th>\n","      <th>2021-07-29 18:00</th>\n","      <th>2021-07-29 19:00</th>\n","      <th>2021-07-29 20:00</th>\n","      <th>2021-07-29 21:00</th>\n","      <th>2021-07-29 22:00</th>\n","      <th>2021-07-29 23:00</th>\n","      <th>2021-07-30 0:00</th>\n","      <th>2021-07-30 1:00</th>\n","      <th>2021-07-30 2:00</th>\n","      <th>2021-07-30 3:00</th>\n","      <th>2021-07-30 4:00</th>\n","      <th>2021-07-30 5:00</th>\n","      <th>2021-07-30 6:00</th>\n","      <th>2021-07-30 7:00</th>\n","      <th>2021-07-30 8:00</th>\n","      <th>2021-07-30 9:00</th>\n","      <th>2021-07-30 10:00</th>\n","      <th>2021-07-30 11:00</th>\n","      <th>2021-07-30 12:00</th>\n","      <th>2021-07-30 13:00</th>\n","      <th>2021-07-30 14:00</th>\n","      <th>2021-07-30 15:00</th>\n","      <th>2021-07-30 16:00</th>\n","      <th>2021-07-30 17:00</th>\n","      <th>2021-07-30 18:00</th>\n","      <th>2021-07-30 19:00</th>\n","      <th>2021-07-30 20:00</th>\n","      <th>2021-07-30 21:00</th>\n","      <th>2021-07-30 22:00</th>\n","      <th>2021-07-30 23:00</th>\n","      <th>2021-07-31 0:00</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>종가</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>0.611995</td>\n","      <td>...</td>\n","      <td>0.255428</td>\n","      <td>1.019108</td>\n","      <td>-0.504414</td>\n","      <td>0.253485</td>\n","      <td>-0.126422</td>\n","      <td>-0.126582</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>-0.505689</td>\n","      <td>-0.505689</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 2186 columns</p>\n","</div>"],"text/plain":["   날짜  2021-05-01 0:00  ...  2021-07-30 23:00  2021-07-31 0:00\n","0  종가         0.611995  ...         -0.127065        -0.127065\n","\n","[1 rows x 2186 columns]"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","metadata":{"id":"Z3_TiLg07mKk","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f6ab6c6a-01a5-46be-c098-5d9a569157b0"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1 entries, 0 to 0\n","Columns: 2186 entries, 날짜 to 2021-07-31 0:00\n","dtypes: float64(2185), object(1)\n","memory usage: 17.2+ KB\n"]}]},{"cell_type":"code","metadata":{"id":"m6hUoeDr7mKm","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7ef4ee75-dc57-4e99-aedc-7caebfd7e2ee"},"source":["data_start_date = df.columns[1]\n","data_end_date = df.columns[-1]\n","print('Data ranges from %s to %s' % (data_start_date, data_end_date))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Data ranges from 2021-05-01 0:00 to 2021-07-31 0:00\n"]}]},{"cell_type":"markdown","metadata":{"id":"-SsCTE-O7mKo"},"source":["### Train and Validation Series Partioning\n"]},{"cell_type":"code","metadata":{"id":"OYUANKZx7mKs","colab":{"base_uri":"https://localhost:8080/"},"outputId":"04d3d864-279e-409b-ce13-a345e314bedf"},"source":["######################## CHECK #########################\n","# 기준시간이 hour이므로, 7일 예측한다면 7*24로 설정한다.\n","\n","\n","from datetime import timedelta\n","\n","pred_steps = 24*20+23\n","pred_length=timedelta(hours = pred_steps)\n","\n","first_day = pd.to_datetime(data_start_date)\n","last_day = pd.to_datetime(data_end_date)\n","\n","val_pred_start = last_day - pred_length + timedelta(1)\n","val_pred_end = last_day\n","print(val_pred_start, val_pred_end)\n","\n","train_pred_start = val_pred_start - pred_length\n","train_pred_end = val_pred_start - timedelta(days=1)\n","print(train_pred_start, train_pred_end)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-07-11 01:00:00 2021-07-31 00:00:00\n","2021-06-20 02:00:00 2021-07-10 01:00:00\n"]}]},{"cell_type":"code","metadata":{"id":"Yc-Nwfy07mKt","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9090098c-57a5-4841-fa7d-9206272ccc45"},"source":["enc_length = train_pred_start - first_day\n","print(enc_length)\n","\n","train_enc_start = first_day\n","train_enc_end = train_enc_start + enc_length - timedelta(1)\n","\n","val_enc_start = train_enc_start + pred_length\n","val_enc_end = val_enc_start + enc_length - timedelta(1)\n","print(train_enc_start, train_enc_end)\n","print(val_enc_start, val_enc_end)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["50 days 02:00:00\n","2021-05-01 00:00:00 2021-06-19 02:00:00\n","2021-05-21 23:00:00 2021-07-10 01:00:00\n"]}]},{"cell_type":"code","metadata":{"id":"_w1ZjY4o7mKv","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d1ff16a7-3fc3-4b76-fde8-0689a50f0041"},"source":["# 최종적으로 Val prediction 구간을 예측하게 된다.\n","\n","print('Train encoding:', train_enc_start, '-', train_enc_end)\n","print('Train prediction:', train_pred_start, '-', train_pred_end, '\\n')\n","print('Val encoding:', val_enc_start, '-', val_enc_end)\n","print('Val prediction:', val_pred_start, '-', val_pred_end)\n","\n","print('\\nEncoding interval:', enc_length.days)\n","print('Prediction interval:', pred_length.days)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train encoding: 2021-05-01 00:00:00 - 2021-06-19 02:00:00\n","Train prediction: 2021-06-20 02:00:00 - 2021-07-10 01:00:00 \n","\n","Val encoding: 2021-05-21 23:00:00 - 2021-07-10 01:00:00\n","Val prediction: 2021-07-11 01:00:00 - 2021-07-31 00:00:00\n","\n","Encoding interval: 50\n","Prediction interval: 20\n"]}]},{"cell_type":"markdown","metadata":{"id":"5k8nzx9H7mKw"},"source":["## Data Formatting"]},{"cell_type":"code","metadata":{"id":"YYDpaFD47mKx","colab":{"base_uri":"https://localhost:8080/"},"outputId":"50942d03-f24f-4785-b029-2e99ff4fb6e1"},"source":["#np.log 1p 해준다.\n","\n","date_to_index = pd.Series(index=pd.Index([pd.to_datetime(c) for c in df.columns[1:]]),\n","                          data=[i for i in range(len(df.columns[1:]))])\n","\n","series_array = df[df.columns[1:]].values.astype(np.float32)\n","print(series_array)\n","\n","def get_time_block_series(series_array, date_to_index, start_date, end_date):\n","    inds = date_to_index[start_date:end_date]\n","    return series_array[:,inds]\n","\n","def transform_series_encode(series_array):\n","    series_array = np.nan_to_num(series_array) # filling NaN with 0\n","    series_mean = series_array.mean(axis=1).reshape(-1,1)\n","    series_array = series_array - series_mean\n","    series_array = series_array.reshape((series_array.shape[0],series_array.shape[1], 1))\n","\n","    return series_array, series_mean\n","\n","def transform_series_decode(series_array, encode_series_mean):\n","    series_array = np.nan_to_num(series_array) # filling NaN with 0\n","    series_array = series_array - encode_series_mean\n","    series_array = series_array.reshape((series_array.shape[0],series_array.shape[1], 1))    \n","    \n","    return series_array"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.6119951   0.6119951   0.6119951  ... -0.12706481 -0.12706481\n","  -0.12706481]]\n"]}]},{"cell_type":"code","metadata":{"id":"feu8hw4N7mKy"},"source":["# sample of series from train_enc_start to train_enc_end  \n","encoder_input_data = get_time_block_series(series_array, date_to_index, \n","                                           train_enc_start, train_enc_end)\n","\n","\n","encoder_input_data, encode_series_mean = transform_series_encode(encoder_input_data)\n","\n","\n","# sample of series from train_pred_start to train_pred_end \n","decoder_target_data = get_time_block_series(series_array, date_to_index, \n","                                            train_pred_start, train_pred_end)\n","\n","decoder_target_data = transform_series_decode(decoder_target_data, encode_series_mean)\n","\n","\n","encoder_input_val_data = get_time_block_series(series_array, date_to_index, val_enc_start, val_enc_end)\n","encoder_input_val_data, encode_series_mean = transform_series_encode(encoder_input_val_data)\n","\n","decoder_target_val_data = get_time_block_series(series_array, date_to_index, val_pred_start, val_pred_end)\n","decoder_target_val_data = transform_series_decode(decoder_target_val_data, encode_series_mean)\n","\n","#for d in encoder_input_data:\n","#    print(d.shape)\n","\n","#train_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_data, decoder_target_data))\n","#train_dataset = train_dataset.batch(54)\n","\n","#for d in train_dataset:\n","#    #print(f'features:{features_tensor} target:{target_tensor}')\n","#    print(\"-----\")\n","#    print(d)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xZe8F9KP7mKz"},"source":["### Transformer model"]},{"cell_type":"code","metadata":{"id":"2HymE_Lx7mK1","colab":{"base_uri":"https://localhost:8080/"},"outputId":"0af35d5c-96d4-405e-a272-28b221254a04"},"source":["!pip install tensorflow_datasets\n","\n","import tensorflow_datasets as tfds\n","import tensorflow as tf\n","\n","import time\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow_datasets in /usr/local/lib/python3.7/dist-packages (4.0.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (4.62.2)\n","Requirement already satisfied: termcolor in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.1.0)\n","Requirement already satisfied: tensorflow-metadata in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.2.0)\n","Requirement already satisfied: dm-tree in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.1.6)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (5.2.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.19.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.15.0)\n","Requirement already satisfied: attrs>=18.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (21.2.0)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.12.0)\n","Requirement already satisfied: promise in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (2.3)\n","Requirement already satisfied: dill in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.3.4)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.16.0)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (3.17.3)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (2.23.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (2021.5.30)\n","Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.7/dist-packages (from importlib-resources->tensorflow_datasets) (3.5.0)\n","Requirement already satisfied: googleapis-common-protos<2,>=1.52.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-metadata->tensorflow_datasets) (1.53.0)\n"]}]},{"cell_type":"code","metadata":{"id":"p9HiWaBB7mK3"},"source":["train_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_data, decoder_target_data))\n","val_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_val_data, decoder_target_val_data))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mp70_nYj7mK3"},"source":["### position\n","def get_angles(pos, i, d_model):\n","    angle_rates = 1 / np.power(10000, (2 * (i//2)) / np.float32(d_model))\n","    return pos * angle_rates\n","\n","\n","def positional_encoding(position, d_model):\n","    angle_rads = get_angles(np.arange(position)[:, np.newaxis],\n","                            np.arange(d_model)[np.newaxis, :],\n","                            d_model)\n","  \n","    # apply sin to even indices in the array; 2i\n","    sines = np.sin(angle_rads[:, 0::2])\n","  \n","    # apply cos to odd indices in the array; 2i+1\n","    cosines = np.cos(angle_rads[:, 1::2])\n","  \n","    pos_encoding = np.concatenate([sines, cosines], axis=-1)\n","  \n","    pos_encoding = pos_encoding[np.newaxis, ...]\n","    \n","    return tf.cast(pos_encoding, dtype=tf.float32)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yqDIhFln7mK3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ba3a5756-7d92-4fee-8614-485e30cc158d"},"source":["# Masking\n","def create_padding_mask(seq):\n","    seq = tf.cast(tf.math.equal(seq, 0), tf.float32)\n","  \n","    # add extra dimensions so that we can add the padding\n","    # to the attention logits.\n","    return seq[:, tf.newaxis, tf.newaxis, :]  # (batch_size, 1, 1, seq_len)\n","\n","x = tf.constant([[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]])\n","print(create_padding_mask(x))\n","\n","def create_look_ahead_mask(size):\n","    mask = 1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)\n","    return mask  # (seq_len, seq_len)\n","\n","x = tf.random.uniform((1, 4))\n","temp = create_look_ahead_mask(x.shape[1])\n","print(temp)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[[[0. 0. 1. 1. 0.]]]\n","\n","\n"," [[[0. 0. 0. 1. 1.]]]\n","\n","\n"," [[[1. 1. 1. 0. 0.]]]], shape=(3, 1, 1, 5), dtype=float32)\n","tf.Tensor(\n","[[0. 1. 1. 1.]\n"," [0. 0. 1. 1.]\n"," [0. 0. 0. 1.]\n"," [0. 0. 0. 0.]], shape=(4, 4), dtype=float32)\n"]}]},{"cell_type":"code","metadata":{"id":"bZhflMS47mK4"},"source":["# Scaled dot product attention\n","def scaled_dot_product_attention(q, k, v, mask):\n","    \"\"\"Calculate the attention weights.\n","      q, k, v must have matching leading dimensions.\n","      The mask has different shapes depending on its type(padding or look ahead) \n","      but it must be broadcastable for addition.\n","  \n","    Args:\n","        q: query shape == (..., seq_len_q, depth)\n","        k: key shape == (..., seq_len_k, depth)\n","        v: value shape == (..., seq_len_v, depth)\n","        mask: Float tensor with shape broadcastable \n","            to (..., seq_len_q, seq_len_k). Defaults to None.\n","    \n","    Returns:\n","        output, attention_weights\n","    \"\"\"\n","\n","    matmul_qk = tf.matmul(q, k, transpose_b=True)  # (..., seq_len_q, seq_len_k)\n","  \n","    # scale matmul_qk\n","    dk = tf.cast(tf.shape(k)[-1], tf.float32)\n","    scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n","\n","    # add the mask to the scaled tensor.\n","    if mask is not None:\n","        scaled_attention_logits += (mask * -1e9)\n","\n","    # softmax is normalized on the last axis (seq_len_k) so that the scores\n","    # add up to 1.\n","    attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)  # (..., seq_len_q, seq_len_k)\n","\n","    output = tf.matmul(attention_weights, v)  # (..., seq_len_v, depth)\n","\n","    return output, attention_weights"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wTun4caK7mK7","colab":{"base_uri":"https://localhost:8080/"},"outputId":"da8fbddb-5221-478e-f26f-2c80c05faa46"},"source":["# scaled dot product attetion test\n","def print_out(q, k, v):\n","    temp_out, temp_attn = scaled_dot_product_attention(\n","        q, k, v, None)\n","    print ('Attention weights are:')\n","    print (temp_attn)\n","    print ('Output is:')\n","    print (temp_out)\n","\n","np.set_printoptions(suppress=True)\n","\n","temp_k = tf.constant([[10,0,0],\n","                      [0,10,0],\n","                      [0,0,10],\n","                      [0,0,10]], dtype=tf.float32)  # (4, 3)\n","\n","temp_v = tf.constant([[   1,0],\n","                      [  10,0],\n","                      [ 100,5],\n","                      [1000,6]], dtype=tf.float32)  # (4, 3)\n","\n","# This `query` aligns with the second `key`,\n","# so the second `value` is returned.\n","temp_q = tf.constant([[0, 10, 0]], dtype=tf.float32)  # (1, 3)\n","print_out(temp_q, temp_k, temp_v)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Attention weights are:\n","tf.Tensor([[0. 1. 0. 0.]], shape=(1, 4), dtype=float32)\n","Output is:\n","tf.Tensor([[10.  0.]], shape=(1, 2), dtype=float32)\n"]}]},{"cell_type":"code","metadata":{"id":"Tf9CrG-j7mK8"},"source":["# Multi Head Attention\n","\n","class MultiHeadAttention(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads):\n","        super(MultiHeadAttention, self).__init__()\n","        self.num_heads = num_heads\n","        self.d_model = d_model\n","    \n","        assert d_model % self.num_heads == 0\n","        \n","        self.depth = d_model // self.num_heads\n","        \n","        self.wq = tf.keras.layers.Dense(d_model)\n","        self.wk = tf.keras.layers.Dense(d_model)\n","        self.wv = tf.keras.layers.Dense(d_model)\n","        \n","        self.dense = tf.keras.layers.Dense(d_model)\n","        \n","    def split_heads(self, x, batch_size):\n","        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n","        return tf.transpose(x, perm=[0, 2, 1, 3])\n","    \n","    def call(self, v, k, q, mask):\n","        batch_size = tf.shape(q)[0]\n","        \n","        q = self.wq(q)\n","        k = self.wk(k)\n","        v = self.wv(v) # (batch_size, seq_len, d_model)\n","        \n","        q = self.split_heads(q, batch_size)\n","        k = self.split_heads(k, batch_size)\n","        v = self.split_heads(v, batch_size) #(batch_size, num_head, seq_len_v, depth)\n","        # scaled_attention.shape == (batch_size, num_heads, seq_len_v, depth)\n","        # attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)\n","        scaled_attention, attention_weights = scaled_dot_product_attention(\n","            q, k, v, mask)\n","    \n","        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])  # (batch_size, seq_len_v, num_heads, depth)\n","\n","        concat_attention = tf.reshape(scaled_attention, \n","                                      (batch_size, -1, self.d_model))  # (batch_size, seq_len_v, d_model)\n","\n","        output = self.dense(concat_attention)  # (batch_size, seq_len_v, d_model)\n","        \n","        return output, attention_weights\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vrKTDbzp7mK9","colab":{"base_uri":"https://localhost:8080/"},"outputId":"58b2714f-bf43-470d-ed43-f6301e6a59a3"},"source":["# multhead attention test\n","temp_mha = MultiHeadAttention(d_model=512, num_heads=8)\n","y = tf.random.uniform((1, 60, 512))  # (batch_size, encoder_sequence, d_model)\n","out, attn = temp_mha(y, k=y, q=y, mask=None)\n","out.shape, attn.shape\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([1, 60, 512]), TensorShape([1, 8, 60, 60]))"]},"metadata":{},"execution_count":119}]},{"cell_type":"code","metadata":{"id":"h4jCVAuU7mK-"},"source":["# activation – the activation function of encoder/decoder intermediate layer, relu or gelu (default=relu).\n","\n","# Point wise feed forward network\n","def point_wise_feed_forward_network(d_model, dff):\n","    return tf.keras.Sequential([\n","        tf.keras.layers.Dense(dff, activation='relu'),  # (batch_size, seq_len, dff)\n","        tf.keras.layers.Dense(d_model)  # (batch_size, seq_len, d_model)\n","    ])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kR78pzaU7mK_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"72e5e1ab-63ad-4228-97c0-95bbf70c2059"},"source":["# Point wise feed forward network test\n","sample_ffn = point_wise_feed_forward_network(512, 2048)\n","sample_ffn(tf.random.uniform((64, 50, 512))).shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 50, 512])"]},"metadata":{},"execution_count":121}]},{"cell_type":"markdown","metadata":{"id":"0JHQxZvp7mK_"},"source":["### Encoder and Decoder"]},{"cell_type":"code","metadata":{"id":"y_ja4MiQ7mLC"},"source":["# Encoder Layer\n","class EncoderLayer(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads, dff, rate=0.1):\n","        super(EncoderLayer, self).__init__()\n","        \n","        self.mha = MultiHeadAttention(d_model, num_heads)\n","        self.ffn = point_wise_feed_forward_network(d_model, dff)\n","        \n","        self.layernorm1 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm2 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","    \n","        self.dropout1 = tf.keras.layers.Dropout(rate)\n","        self.dropout2 = tf.keras.layers.Dropout(rate)\n","    \n","    def call(self, x, training, mask):\n","        attn_output, _ = self.mha(x, x, x, mask) # (batch_size, input_seq_len, d_model)\n","        attn_output = self.dropout1(attn_output, training=training)\n","        out1 = self.layernorm1(x + attn_output)\n","        \n","        ffn_output = self.ffn(out1) # (batch_size, input_seq_len, d_model)\n","        ffn_output = self.dropout2(ffn_output, training=training)\n","        out2 = self.layernorm2(out1 + ffn_output) # (batch_size, input_seq_len, d_model)\n","        \n","        return out2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"msUwz7Bx7mLD","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8e81c8b2-ef53-43f9-ad6c-373f5ccac208"},"source":["# Encoder Layer Test\n","sample_encoder_layer = EncoderLayer(512, 8, 2048)\n","\n","sample_encoder_layer_output = sample_encoder_layer(\n","    tf.random.uniform((64, 43, 512)), False, None)\n","\n","sample_encoder_layer_output.shape  # (batch_size, input_seq_len, d_model)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 43, 512])"]},"metadata":{},"execution_count":123}]},{"cell_type":"code","metadata":{"id":"V-c2G1Cp7mLE"},"source":["# Decoder Layer\n","class DecoderLayer(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads, dff, rate=0.1):\n","        super(DecoderLayer, self).__init__()\n","        \n","        self.mha1 = MultiHeadAttention(d_model, num_heads)\n","        self.mha2 = MultiHeadAttention(d_model, num_heads)\n","        \n","        self.ffn = point_wise_feed_forward_network(d_model, dff)\n","        \n","        self.layernorm1 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm2 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm3 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","    \n","        self.dropout1 = tf.keras.layers.Dropout(rate)\n","        self.dropout2 = tf.keras.layers.Dropout(rate)\n","        self.dropout3 = tf.keras.layers.Dropout(rate)\n","                                            \n","    def call(self, x, enc_output, training,\n","            look_ahead_mask, padding_mask):\n","        # enc_output.shape == (batch_size, input_seq_len, d_model)\n","        attn1, attn_weights_block1 = self.mha1(x, x, x, look_ahead_mask)\n","        attn1 = self.dropout1(attn1, training=training)\n","        out1 = self.layernorm1(attn1 + x)\n","        \n","        attn2, attn_weights_block2 = self.mha2(\n","            enc_output, enc_output, out1, padding_mask)\n","        attn2 = self.dropout2(attn2, training=training)\n","        out2 = self.layernorm2(attn2 + out1)\n","        \n","        ffn_output = self.ffn(out2)\n","        ffn_output = self.dropout3(ffn_output, training=training)\n","        out3 = self.layernorm3(ffn_output + out2)\n","        \n","        return out3, attn_weights_block1, attn_weights_block2\n","    \n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s2HBk8KS7mLE","colab":{"base_uri":"https://localhost:8080/"},"outputId":"de44170f-46f7-4146-c364-7a910792426d"},"source":["# Decoder layer test\n","sample_decoder_layer = DecoderLayer(512, 8, 2048)\n","\n","sample_decoder_layer_output, _, _ = sample_decoder_layer(\n","    tf.random.uniform((64, 50, 512)), sample_encoder_layer_output, \n","    False, None, None)\n","\n","sample_decoder_layer_output.shape  # (batch_size, target_seq_len, d_model)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 50, 512])"]},"metadata":{},"execution_count":125}]},{"cell_type":"code","metadata":{"id":"-X496L3Y7mLF"},"source":["# Encoder\n","\n","class Encoder(tf.keras.layers.Layer):\n","    def __init__(self, num_layers, d_model, num_heads, dff, max_len=5000,\n","                rate=0.1):\n","        super(Encoder, self).__init__()\n","        self.d_model = d_model\n","        self.num_layers = num_layers\n","        self.embedding = tf.keras.layers.Dense(d_model, use_bias=False)\n","        self.pos_encoding = positional_encoding(max_len, self.d_model)\n","        \n","        self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate) \n","                       for _ in range(num_layers)]\n","        \n","        self.dropout = tf.keras.layers.Dropout(rate)\n","        \n","    def call(self, x, training, mask):\n","        seq_len = tf.shape(x)[1]\n","        \n","        # adding embedding and position encoding\n","        x = self.embedding(x)\n","        # (batch_size, input_seq_len, d_model)\n","        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        x += self.pos_encoding[:, :seq_len, :]\n","        \n","        x = self.dropout(x, training=training)\n","        \n","        for i in range(self.num_layers):\n","            x = self.enc_layers[i](x, training, mask)\n","        \n","        return x\n","                          "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YSO73qPR7mLF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9d69935d-b82c-44b9-e031-71c52653410b"},"source":["sample_encoder = Encoder(num_layers=2, d_model=512, num_heads=8, \n","                         dff=2048)\n","\n","sample_encoder_output = sample_encoder(tf.random.uniform((64, 62,1)), \n","                                       training=False, mask=None)\n","\n","print (sample_encoder_output.shape)  # (batch_size, input_seq_len, d_model)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(64, 62, 512)\n"]}]},{"cell_type":"code","metadata":{"id":"iApaMNvC7mLG"},"source":["# Decoder\n","class Decoder(tf.keras.layers.Layer):\n","    def __init__(self, num_layers, d_model, num_heads, dff, max_len=5000, rate=0.1):\n","        super(Decoder, self).__init__()\n","        \n","        self.d_model = d_model\n","        self.num_layers = num_layers\n","        \n","        self.embedding = tf.keras.layers.Dense(d_model, use_bias=False)\n","        self.pos_encoding = positional_encoding(max_len, self.d_model)\n","    \n","        self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate) \n","                            for _ in range(num_layers)]\n","        self.dropout = tf.keras.layers.Dropout(rate)\n","        \n","    def call(self, x, enc_output, training,\n","                look_ahead_mask, padding_mask):\n","        \n","        seq_len = tf.shape(x)[1]\n","        attention_weights = {}\n","        \n","        x = self.embedding(x)\n","        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        x += self.pos_encoding[:, :seq_len, :]\n","        \n","        x = self.dropout(x, training=training)\n","        \n","        for i in range(self.num_layers):\n","            x, block1, block2 = self.dec_layers[i](x, enc_output, training,\n","                                                  look_ahead_mask, padding_mask)\n","            attention_weights['decoder_layer{}_block1'.format(i+1)] = block1\n","            attention_weights['decoder_layer{}_block2'.format(i+1)] = block2\n","            \n","        \n","        \n","        return x, attention_weights\n","    \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lyz4sJBn7mLG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"1f40ef60-d461-44c2-fd05-55a41acf6572"},"source":["sample_decoder = Decoder(num_layers=2, d_model=512, num_heads=8, \n","                         dff=2048)\n","\n","output, attn = sample_decoder(tf.random.uniform((64, 26,3)), \n","                              enc_output=sample_encoder_output, \n","                              training=False, look_ahead_mask=None, \n","                              padding_mask=None)\n","\n","output.shape, attn['decoder_layer2_block2'].shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([64, 26, 512]), TensorShape([64, 8, 26, 62]))"]},"metadata":{},"execution_count":129}]},{"cell_type":"markdown","metadata":{"id":"cDMZbb2D7mLH"},"source":["### Transfomer for TS\n"]},{"cell_type":"code","metadata":{"id":"3Wff4gY-7mLH"},"source":["class Transformer(tf.keras.Model):\n","    def __init__(self, num_layers, d_model, num_heads, dff, out_dim, max_len=5000,\n","                rate=0.1):\n","        super(Transformer, self).__init__()\n","        \n","        self.encoder = Encoder(num_layers, d_model, num_heads, dff,\n","                              max_len, rate)\n","        self.decoder = Decoder(num_layers, d_model, num_heads, dff,\n","                               max_len, rate)\n","        \n","        self.final_layer = tf.keras.layers.Dense(out_dim)\n","        \n","    def call(self, inp, tar, training, enc_padding_mask,\n","             look_ahead_mask, dec_padding_mask):\n","        enc_output = self.encoder(inp, training, enc_padding_mask)\n","        \n","        dec_output, attention_weights = self.decoder(\n","            tar, enc_output, training, look_ahead_mask, dec_padding_mask)\n","        final_output = self.final_layer(dec_output)\n","        \n","        return final_output, attention_weights\n","    \n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zy2jyCC27mLH","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c092e423-300c-4179-b6d7-45ab23cbf8e2"},"source":["sample_transformer = Transformer(\n","    num_layers=2, d_model=512, num_heads=8, dff=2048, \n","    out_dim=1)\n","\n","temp_input = tf.random.uniform((64, 62,1))\n","temp_target = tf.random.uniform((64, 23,1))\n","\n","fn_out, _ = sample_transformer(temp_input, temp_target,training=False, \n","                               enc_padding_mask=None, \n","                               look_ahead_mask=None,\n","                               dec_padding_mask=None)\n","\n","fn_out.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 23, 1])"]},"metadata":{},"execution_count":131}]},{"cell_type":"code","metadata":{"id":"vkBfkgGy7mLI"},"source":["# Set hyperparameters\n","# 트랜스포머 기준으로 바꿔볼까? \n","# d_model – the number of expected features in the encoder/decoder inputs (default=512).\n","# nhead – the number of heads in the multiheadattention models (default=8).\n","# num_encoder_layers – the number of sub-encoder-layers in the encoder & decoder (default=6).\n","# num_decoder_layers – the number of sub-decoder-layers in the decoder (default=6).\n","# dff(dim_feedforward) – the dimension of the feedforward network model (default=2048).\n","# dropout – the dropout value (default=0.1).\n","\n","\n","num_layers = 1\n","d_model = 64\n","dff = 256\n","num_heads = 4\n","\n","dropout_rate = 0.1\n","input_sequence_length = 2184-(24*20+23) # Length of the sequence used by the encoder\n","target_sequence_length = 24*20+23 # Length of the sequence predicted by the decoder\n","batch_size = 2*11\n","\n","train_dataset = train_dataset.batch(batch_size)\n","val_dataset = val_dataset.batch(batch_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dwNIQKry7mLI"},"source":["# Optimizizer\n","class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n","    def __init__(self, d_model, warmup_steps=4000):\n","        super(CustomSchedule, self).__init__()\n","    \n","        self.d_model = d_model\n","        self.d_model = tf.cast(self.d_model, tf.float32)\n","\n","        self.warmup_steps = warmup_steps\n","    \n","    def __call__(self, step):\n","        arg1 = tf.math.rsqrt(step)\n","        arg2 = step * (self.warmup_steps ** -1.5)\n","    \n","        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EHuh2wWR7mLI"},"source":["learning_rate = CustomSchedule(64)\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, \n","                                     epsilon=1e-9)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftwg7b_Z7mLI","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"37e243d2-30f8-4945-9c64-4d7adb0cdff7"},"source":["temp_learning_rate_schedule = CustomSchedule(512)\n","\n","plt.plot(temp_learning_rate_schedule(tf.range(40000, dtype=tf.float32)))\n","plt.ylabel(\"Learning Rate\")\n","plt.xlabel(\"Train Step\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Train Step')"]},"metadata":{},"execution_count":135},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Tn59NBXK7mLI"},"source":["# Loss and metrics\n","loss_object = tf.keras.losses.MeanAbsoluteError()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0BwT16Z77mLJ"},"source":["def loss_function(real, pred):\n","    mask = tf.math.logical_not(tf.math.equal(real, 0))\n","    loss_ = loss_object(real, pred)\n","\n","    mask = tf.cast(mask, dtype=loss_.dtype)\n","    loss_ *= mask\n","  \n","    return tf.reduce_mean(loss_)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vlFkoDfS7mLJ"},"source":["train_loss = tf.keras.metrics.Mean(name='train_loss')\n","#train_accuracy = tf.keras.metrics.mean_absolute_error()\n","\n","test_loss = tf.keras.metrics.Mean(name='test_loss')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wpZb8zHP7mLJ"},"source":["# Training and checkpoint\n","transformer = Transformer(num_layers, d_model, num_heads, dff,\n","                          out_dim=1, rate=dropout_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"shPhCuBM7mLJ"},"source":["def create_masks(inp, tar):\n","    inp = inp.reshape()\n","    # Encoder padding mask\n","    enc_padding_mask = create_padding_mask(inp)\n","  \n","    # Used in the 2nd attention block in the decoder.\n","    # This padding mask is used to mask the encoder outputs.\n","    dec_padding_mask = create_padding_mask(inp)\n","  \n","    # Used in the 1st attention block in the decoder.\n","    # It is used to pad and mask future tokens in the input received by \n","    # the decoder.\n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    dec_target_padding_mask = create_padding_mask(tar)\n","    combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask)\n","  \n","    return enc_padding_mask, combined_mask, dec_padding_mask"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r9ENhH-s7mLK","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8eadc45f-2cf7-422f-b7cd-8c9be65b7815"},"source":["# check point\n","checkpoint_path = \"./checkpoints/train\"\n","\n","ckpt = tf.train.Checkpoint(transformer=transformer,\n","                           optimizer=optimizer)\n","\n","ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)\n","\n","# if a checkpoint exists, restore the latest checkpoint.\n","if ckpt_manager.latest_checkpoint:\n","    ckpt.restore(ckpt_manager.latest_checkpoint)\n","    print ('Latest checkpoint restored!!')\n","    "],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Latest checkpoint restored!!\n"]}]},{"cell_type":"code","metadata":{"id":"zf4S65Ud7mLK"},"source":["# EPOCHS\n","EPOCHS=100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dN2lAMeP7mLK"},"source":["@tf.function\n","def train_step(inp, tar):\n","    last_inp = tf.expand_dims(inp[:,0,:],-1)\n","    tar_inp = tf.concat([last_inp, tar[:,:-1,:]], axis=1)\n","    tar_real = tar\n","  \n","    #enc_padding_mask, combined_mask, dec_padding_mask = create_masks(inp, tar_inp)\n","    #print(enc_padding_mask)\n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    \n","    with tf.GradientTape() as tape:\n","        predictions, _ = transformer(inp, tar_inp, \n","                                     True, \n","                                     None, \n","                                     look_ahead_mask, \n","                                     None)\n","        loss = loss_function(tar_real, predictions)\n","\n","    gradients = tape.gradient(loss, transformer.trainable_variables)    \n","    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n","  \n","    train_loss(loss)\n","    #train_accuracy(tar_real, predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aFzrcnAU7mLK"},"source":["@tf.function\n","def test_step(inp, tar):\n","    #print(inp)\n","    #print(tar)\n","    last_inp = tf.expand_dims(inp[:,0,:],-1)\n","    #print(last_inp)\n","    tar_inp = tf.concat([last_inp, tar[:,:-1,:]], axis=1)\n","    tar_real = tar\n","    \n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    \n","    with tf.GradientTape() as tape:\n","        predictions, _ = transformer(inp, tar_inp, \n","                                     False, \n","                                     None, \n","                                     look_ahead_mask, \n","                                     None)\n","        loss = loss_function(tar_real, predictions)\n","\n","    gradients = tape.gradient(loss, transformer.trainable_variables)    \n","    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n","\n","    test_loss(loss)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"VU9sFkFu7mLL","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a9d9f507-6c8b-4eba-e6ec-cc1a81583267"},"source":["# Val_dataset을 돌려서 Val_prediction 구간을 예측한다\n","\n","for epoch in range(EPOCHS):\n","    start = time.time()\n","\n","    train_loss.reset_states()\n","    test_loss.reset_states()\n","    \n","    # validation:\n","    for (batch, (inp, tar)) in enumerate(val_dataset):\n","        #print(inp, tar)\n","        test_step(inp, tar)\n","        \n","    if (epoch + 1) % 5 == 0:\n","        ckpt_save_path = ckpt_manager.save()\n","        print ('Saving checkpoint for epoch {} at {}'.format(epoch+1,\n","                                                         ckpt_save_path))\n","    \n","    #print ('Epoch {} Train Loss {:.4f}'.format(epoch + 1, \n","                                                #train_loss.result())) \n","                                                #train_accuracy.result()))\n","    print ('Epoch {} Test Loss {:.4f}'.format(epoch + 1, \n","                                                test_loss.result())) \n","    print ('Time taken for 1 epoch: {} secs\\n'.format(time.time() - start))\n","    \n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1 Test Loss 0.1148\n","Time taken for 1 epoch: 1.964536428451538 secs\n","\n","Epoch 2 Test Loss 0.1163\n","Time taken for 1 epoch: 0.01073908805847168 secs\n","\n","Epoch 3 Test Loss 0.1115\n","Time taken for 1 epoch: 0.010633707046508789 secs\n","\n","Epoch 4 Test Loss 0.1073\n","Time taken for 1 epoch: 0.010242223739624023 secs\n","\n","Saving checkpoint for epoch 5 at ./checkpoints/train/ckpt-41\n","Epoch 5 Test Loss 0.1041\n","Time taken for 1 epoch: 0.06747245788574219 secs\n","\n","Epoch 6 Test Loss 0.1048\n","Time taken for 1 epoch: 0.01060938835144043 secs\n","\n","Epoch 7 Test Loss 0.1076\n","Time taken for 1 epoch: 0.010278701782226562 secs\n","\n","Epoch 8 Test Loss 0.1038\n","Time taken for 1 epoch: 0.010024070739746094 secs\n","\n","Epoch 9 Test Loss 0.0986\n","Time taken for 1 epoch: 0.010308027267456055 secs\n","\n","Saving checkpoint for epoch 10 at ./checkpoints/train/ckpt-42\n","Epoch 10 Test Loss 0.0967\n","Time taken for 1 epoch: 0.08205628395080566 secs\n","\n","Epoch 11 Test Loss 0.0976\n","Time taken for 1 epoch: 0.011016130447387695 secs\n","\n","Epoch 12 Test Loss 0.0998\n","Time taken for 1 epoch: 0.01073598861694336 secs\n","\n","Epoch 13 Test Loss 0.0957\n","Time taken for 1 epoch: 0.010085821151733398 secs\n","\n","Epoch 14 Test Loss 0.0925\n","Time taken for 1 epoch: 0.010174036026000977 secs\n","\n","Saving checkpoint for epoch 15 at ./checkpoints/train/ckpt-43\n","Epoch 15 Test Loss 0.0901\n","Time taken for 1 epoch: 0.0697331428527832 secs\n","\n","Epoch 16 Test Loss 0.0921\n","Time taken for 1 epoch: 0.010533332824707031 secs\n","\n","Epoch 17 Test Loss 0.0968\n","Time taken for 1 epoch: 0.010051250457763672 secs\n","\n","Epoch 18 Test Loss 0.0922\n","Time taken for 1 epoch: 0.010176658630371094 secs\n","\n","Epoch 19 Test Loss 0.0876\n","Time taken for 1 epoch: 0.009978294372558594 secs\n","\n","Saving checkpoint for epoch 20 at ./checkpoints/train/ckpt-44\n","Epoch 20 Test Loss 0.0851\n","Time taken for 1 epoch: 0.0714716911315918 secs\n","\n","Epoch 21 Test Loss 0.0848\n","Time taken for 1 epoch: 0.010378360748291016 secs\n","\n","Epoch 22 Test Loss 0.0865\n","Time taken for 1 epoch: 0.010538578033447266 secs\n","\n","Epoch 23 Test Loss 0.0890\n","Time taken for 1 epoch: 0.010601282119750977 secs\n","\n","Epoch 24 Test Loss 0.0903\n","Time taken for 1 epoch: 0.009738922119140625 secs\n","\n","Saving checkpoint for epoch 25 at ./checkpoints/train/ckpt-45\n","Epoch 25 Test Loss 0.0853\n","Time taken for 1 epoch: 0.06486678123474121 secs\n","\n","Epoch 26 Test Loss 0.0817\n","Time taken for 1 epoch: 0.010011434555053711 secs\n","\n","Epoch 27 Test Loss 0.0796\n","Time taken for 1 epoch: 0.010248422622680664 secs\n","\n","Epoch 28 Test Loss 0.0788\n","Time taken for 1 epoch: 0.009741067886352539 secs\n","\n","Epoch 29 Test Loss 0.0780\n","Time taken for 1 epoch: 0.010033607482910156 secs\n","\n","Saving checkpoint for epoch 30 at ./checkpoints/train/ckpt-46\n","Epoch 30 Test Loss 0.0775\n","Time taken for 1 epoch: 0.07246565818786621 secs\n","\n","Epoch 31 Test Loss 0.0781\n","Time taken for 1 epoch: 0.01048588752746582 secs\n","\n","Epoch 32 Test Loss 0.0846\n","Time taken for 1 epoch: 0.011972904205322266 secs\n","\n","Epoch 33 Test Loss 0.0982\n","Time taken for 1 epoch: 0.01078176498413086 secs\n","\n","Epoch 34 Test Loss 0.0814\n","Time taken for 1 epoch: 0.01129603385925293 secs\n","\n","Saving checkpoint for epoch 35 at ./checkpoints/train/ckpt-47\n","Epoch 35 Test Loss 0.0748\n","Time taken for 1 epoch: 0.06980466842651367 secs\n","\n","Epoch 36 Test Loss 0.0742\n","Time taken for 1 epoch: 0.010045051574707031 secs\n","\n","Epoch 37 Test Loss 0.0778\n","Time taken for 1 epoch: 0.010494709014892578 secs\n","\n","Epoch 38 Test Loss 0.0941\n","Time taken for 1 epoch: 0.010764837265014648 secs\n","\n","Epoch 39 Test Loss 0.0795\n","Time taken for 1 epoch: 0.010341882705688477 secs\n","\n","Saving checkpoint for epoch 40 at ./checkpoints/train/ckpt-48\n","Epoch 40 Test Loss 0.0738\n","Time taken for 1 epoch: 0.07096576690673828 secs\n","\n","Epoch 41 Test Loss 0.0717\n","Time taken for 1 epoch: 0.01119232177734375 secs\n","\n","Epoch 42 Test Loss 0.0717\n","Time taken for 1 epoch: 0.010676383972167969 secs\n","\n","Epoch 43 Test Loss 0.0779\n","Time taken for 1 epoch: 0.009964942932128906 secs\n","\n","Epoch 44 Test Loss 0.0812\n","Time taken for 1 epoch: 0.009966135025024414 secs\n","\n","Saving checkpoint for epoch 45 at ./checkpoints/train/ckpt-49\n","Epoch 45 Test Loss 0.0827\n","Time taken for 1 epoch: 0.0701606273651123 secs\n","\n","Epoch 46 Test Loss 0.0708\n","Time taken for 1 epoch: 0.010171175003051758 secs\n","\n","Epoch 47 Test Loss 0.0692\n","Time taken for 1 epoch: 0.010296344757080078 secs\n","\n","Epoch 48 Test Loss 0.0755\n","Time taken for 1 epoch: 0.009870529174804688 secs\n","\n","Epoch 49 Test Loss 0.0835\n","Time taken for 1 epoch: 0.010043144226074219 secs\n","\n","Saving checkpoint for epoch 50 at ./checkpoints/train/ckpt-50\n","Epoch 50 Test Loss 0.0785\n","Time taken for 1 epoch: 0.0739738941192627 secs\n","\n","Epoch 51 Test Loss 0.0682\n","Time taken for 1 epoch: 0.010206222534179688 secs\n","\n","Epoch 52 Test Loss 0.0706\n","Time taken for 1 epoch: 0.010071039199829102 secs\n","\n","Epoch 53 Test Loss 0.0853\n","Time taken for 1 epoch: 0.010295391082763672 secs\n","\n","Epoch 54 Test Loss 0.0739\n","Time taken for 1 epoch: 0.010225534439086914 secs\n","\n","Saving checkpoint for epoch 55 at ./checkpoints/train/ckpt-51\n","Epoch 55 Test Loss 0.0674\n","Time taken for 1 epoch: 0.07285380363464355 secs\n","\n","Epoch 56 Test Loss 0.0668\n","Time taken for 1 epoch: 0.009927511215209961 secs\n","\n","Epoch 57 Test Loss 0.0727\n","Time taken for 1 epoch: 0.011495351791381836 secs\n","\n","Epoch 58 Test Loss 0.0867\n","Time taken for 1 epoch: 0.010605335235595703 secs\n","\n","Epoch 59 Test Loss 0.0677\n","Time taken for 1 epoch: 0.009993314743041992 secs\n","\n","Saving checkpoint for epoch 60 at ./checkpoints/train/ckpt-52\n","Epoch 60 Test Loss 0.0655\n","Time taken for 1 epoch: 0.0746300220489502 secs\n","\n","Epoch 61 Test Loss 0.0732\n","Time taken for 1 epoch: 0.010149002075195312 secs\n","\n","Epoch 62 Test Loss 0.0744\n","Time taken for 1 epoch: 0.009992361068725586 secs\n","\n","Epoch 63 Test Loss 0.0719\n","Time taken for 1 epoch: 0.009839296340942383 secs\n","\n","Epoch 64 Test Loss 0.0643\n","Time taken for 1 epoch: 0.010289907455444336 secs\n","\n","Saving checkpoint for epoch 65 at ./checkpoints/train/ckpt-53\n","Epoch 65 Test Loss 0.0627\n","Time taken for 1 epoch: 0.07297921180725098 secs\n","\n","Epoch 66 Test Loss 0.0640\n","Time taken for 1 epoch: 0.010320186614990234 secs\n","\n","Epoch 67 Test Loss 0.0685\n","Time taken for 1 epoch: 0.011309623718261719 secs\n","\n","Epoch 68 Test Loss 0.0774\n","Time taken for 1 epoch: 0.010267496109008789 secs\n","\n","Epoch 69 Test Loss 0.0677\n","Time taken for 1 epoch: 0.010299444198608398 secs\n","\n","Saving checkpoint for epoch 70 at ./checkpoints/train/ckpt-54\n","Epoch 70 Test Loss 0.0633\n","Time taken for 1 epoch: 0.06699681282043457 secs\n","\n","Epoch 71 Test Loss 0.0639\n","Time taken for 1 epoch: 0.010648965835571289 secs\n","\n","Epoch 72 Test Loss 0.0713\n","Time taken for 1 epoch: 0.010392427444458008 secs\n","\n","Epoch 73 Test Loss 0.0690\n","Time taken for 1 epoch: 0.01036381721496582 secs\n","\n","Epoch 74 Test Loss 0.0691\n","Time taken for 1 epoch: 0.009982109069824219 secs\n","\n","Saving checkpoint for epoch 75 at ./checkpoints/train/ckpt-55\n","Epoch 75 Test Loss 0.0618\n","Time taken for 1 epoch: 0.06337380409240723 secs\n","\n","Epoch 76 Test Loss 0.0602\n","Time taken for 1 epoch: 0.010417461395263672 secs\n","\n","Epoch 77 Test Loss 0.0605\n","Time taken for 1 epoch: 0.012012004852294922 secs\n","\n","Epoch 78 Test Loss 0.0639\n","Time taken for 1 epoch: 0.009891271591186523 secs\n","\n","Epoch 79 Test Loss 0.0700\n","Time taken for 1 epoch: 0.010612726211547852 secs\n","\n","Saving checkpoint for epoch 80 at ./checkpoints/train/ckpt-56\n","Epoch 80 Test Loss 0.0720\n","Time taken for 1 epoch: 0.07245635986328125 secs\n","\n","Epoch 81 Test Loss 0.0628\n","Time taken for 1 epoch: 0.01062464714050293 secs\n","\n","Epoch 82 Test Loss 0.0592\n","Time taken for 1 epoch: 0.009842395782470703 secs\n","\n","Epoch 83 Test Loss 0.0602\n","Time taken for 1 epoch: 0.010227441787719727 secs\n","\n","Epoch 84 Test Loss 0.0669\n","Time taken for 1 epoch: 0.009895563125610352 secs\n","\n","Saving checkpoint for epoch 85 at ./checkpoints/train/ckpt-57\n","Epoch 85 Test Loss 0.0717\n","Time taken for 1 epoch: 0.0675818920135498 secs\n","\n","Epoch 86 Test Loss 0.0700\n","Time taken for 1 epoch: 0.01055765151977539 secs\n","\n","Epoch 87 Test Loss 0.0600\n","Time taken for 1 epoch: 0.010049819946289062 secs\n","\n","Epoch 88 Test Loss 0.0560\n","Time taken for 1 epoch: 0.010223150253295898 secs\n","\n","Epoch 89 Test Loss 0.0581\n","Time taken for 1 epoch: 0.009786605834960938 secs\n","\n","Saving checkpoint for epoch 90 at ./checkpoints/train/ckpt-58\n","Epoch 90 Test Loss 0.0661\n","Time taken for 1 epoch: 0.06810998916625977 secs\n","\n","Epoch 91 Test Loss 0.0776\n","Time taken for 1 epoch: 0.010272979736328125 secs\n","\n","Epoch 92 Test Loss 0.0592\n","Time taken for 1 epoch: 0.01069784164428711 secs\n","\n","Epoch 93 Test Loss 0.0556\n","Time taken for 1 epoch: 0.009946346282958984 secs\n","\n","Epoch 94 Test Loss 0.0683\n","Time taken for 1 epoch: 0.01032567024230957 secs\n","\n","Saving checkpoint for epoch 95 at ./checkpoints/train/ckpt-59\n","Epoch 95 Test Loss 0.0760\n","Time taken for 1 epoch: 0.06767988204956055 secs\n","\n","Epoch 96 Test Loss 0.0640\n","Time taken for 1 epoch: 0.009966611862182617 secs\n","\n","Epoch 97 Test Loss 0.0554\n","Time taken for 1 epoch: 0.01014089584350586 secs\n","\n","Epoch 98 Test Loss 0.0614\n","Time taken for 1 epoch: 0.010466814041137695 secs\n","\n","Epoch 99 Test Loss 0.0840\n","Time taken for 1 epoch: 0.010460853576660156 secs\n","\n","Saving checkpoint for epoch 100 at ./checkpoints/train/ckpt-60\n","Epoch 100 Test Loss 0.0557\n","Time taken for 1 epoch: 0.07788205146789551 secs\n","\n"]}]},{"cell_type":"code","metadata":{"id":"cU4kkZys7mLL"},"source":["MAX_LENGTH = target_sequence_length\n","\n","def evaluate(inp):\n","    encoder_input = inp\n","    #print(encoder_input)\n","    output = tf.expand_dims(encoder_input[:,-1,:],-1)\n","    #print(output)\n","    \n","    for i in range(MAX_LENGTH):\n","        look_ahead_mask = create_look_ahead_mask(tf.shape(output)[1])\n","        predictions, attention_weights = transformer(encoder_input, \n","                                                     output, \n","                                                     False, \n","                                                     None, \n","                                                     look_ahead_mask, \n","                                                     None)\n","        \n","        # select the last word from the seq_len dimension\n","        predictions = predictions[: ,-1:, :]  # (batch_size, 1)\n","        #print(\"pred:\", predictions) #\n","        output = tf.concat([output, predictions], axis=1)\n","        #print(output)\n","        \n","    return tf.squeeze(output, axis=0), attention_weights"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8gnQAWpsA0Vs"},"source":["def mape(y_pred, y_true):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VrZLCCbpjmN0"},"source":["def MAE(y_true, y_pred): \n","    return np.mean(np.abs((y_true - y_pred)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iN7slOWlk-x0"},"source":["def MSE(y_true, y_pred):\n","    return np.mean(np.square((y_true - y_pred)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7khHQRegMByM"},"source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y8O2fiewMEaG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4e900106-efe2-42ad-fcff-4f7ddf6e4ed0"},"source":["encode_series = encoder_input_val_data[0:1,:,:] \n","#print(encode_series)\n","\n","pred_series, _ = evaluate(encode_series)\n","pred_series = np.array([pred_series])\n","encode_series = encode_series.reshape(-1,1)\n","pred_series = pred_series.reshape(-1,1)[1:,:]   \n","target_series = decoder_target_val_data[0,:,:1].reshape(-1,1) \n","\n","encode_series_tail = np.concatenate([encode_series[-1000:],target_series[:1]])\n","x_encode = encode_series_tail.shape[0]\n","\n","print(mape(pred_series[:24*20+23-23]+0.013913, target_series+0.013913))\n","\n","print(MSE(target_series+0.013913, pred_series[:24*20+23-23]+0.013913))\n","\n","print(MAE(target_series+0.013913, pred_series[:24*20+23-23]+0.013913))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["94.82817053794861\n","0.070121385\n","0.16881214\n"]}]},{"cell_type":"code","metadata":{"id":"gRxmWFiyPIOG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c8af6faf-88c4-44b6-a482-a9d372529d37"},"source":["x_encode"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1001"]},"metadata":{},"execution_count":152}]},{"cell_type":"code","metadata":{"id":"pzq3ApNZMHx6","colab":{"base_uri":"https://localhost:8080/","height":406},"outputId":"b168caa9-e12e-4eaa-addd-db6c3e119388"},"source":["# 실제와 가격차이가 어떻게 나는지 비교해서 보정한다.\n","\n","plt.figure(figsize=(20,6))   \n","\n","plt.plot(range(1,x_encode+1),encode_series_tail+0.013913)\n","plt.plot(range(x_encode,x_encode+pred_steps-23),target_series+0.013913,color='orange')\n","plt.plot(range(x_encode,x_encode+pred_steps-23),pred_series[:24*20+23-23]+0.013913,color='teal',linestyle='--')\n","\n","plt.title('Encoder Series Tail of Length %d, Target Series, and Predictions' % 1000)\n","plt.legend(['Encoding Series','Target Series','Predictions'])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7ff71d992610>"]},"metadata":{},"execution_count":153},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FHfEpRQj_7jQ"},"source":["#Prophet"]},{"cell_type":"code","metadata":{"id":"GxabcXNaR_HX"},"source":["import pandas as pd\n","from fbprophet import Prophet\n","import matplotlib.pyplot as plt\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KMFg8RedAAXL","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"0b064659-4328-42bf-cee1-31cf1fae6842"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version1.csv\", encoding='CP949')\n","df = df.drop(df.columns[0], axis=1)\n","\n","df.columns = [\"ds\",\"y\"]\n","df[\"ds\"] = pd.to_datetime(df[\"ds\"], dayfirst = True)\n","\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-05-01 00:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-05-01 01:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-05-01 02:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-05-01 03:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-05-01 04:00:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                   ds         y\n","0 2021-05-01 00:00:00  0.611995\n","1 2021-05-01 01:00:00  0.611995\n","2 2021-05-01 02:00:00  0.611995\n","3 2021-05-01 03:00:00  0.611995\n","4 2021-05-01 04:00:00  0.611995"]},"metadata":{},"execution_count":155}]},{"cell_type":"code","metadata":{"id":"xv9FXHpaAELb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"532ca676-f0a9-4aa6-bb39-2c5b66c6cc92"},"source":["m = Prophet()\n","m.fit(df[:-24*20])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:numexpr.utils:NumExpr defaulting to 4 threads.\n","INFO:fbprophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n"]},{"output_type":"execute_result","data":{"text/plain":["<fbprophet.forecaster.Prophet at 0x7ff62d54ed90>"]},"metadata":{},"execution_count":156}]},{"cell_type":"code","metadata":{"id":"imkZ1wN0AGgF","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"aeef3f34-9396-40a9-d78a-2b9b0ba9a338"},"source":["future = m.make_future_dataframe(freq='H',periods=24*20)\n","future.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2180</th>\n","      <td>2021-07-30 20:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>2181</th>\n","      <td>2021-07-30 21:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>2182</th>\n","      <td>2021-07-30 22:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>2183</th>\n","      <td>2021-07-30 23:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>2184</th>\n","      <td>2021-07-31 00:00:00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                      ds\n","2180 2021-07-30 20:00:00\n","2181 2021-07-30 21:00:00\n","2182 2021-07-30 22:00:00\n","2183 2021-07-30 23:00:00\n","2184 2021-07-31 00:00:00"]},"metadata":{},"execution_count":157}]},{"cell_type":"code","metadata":{"id":"xiGIX82FAIvT","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"ebea7834-0080-4b10-a61b-7085c7d9a33d"},"source":["forecast = m.predict(future)\n","forecast[['ds', 'yhat']].tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>yhat</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2180</th>\n","      <td>2021-07-30 20:00:00</td>\n","      <td>0.020921</td>\n","    </tr>\n","    <tr>\n","      <th>2181</th>\n","      <td>2021-07-30 21:00:00</td>\n","      <td>0.029642</td>\n","    </tr>\n","    <tr>\n","      <th>2182</th>\n","      <td>2021-07-30 22:00:00</td>\n","      <td>0.030394</td>\n","    </tr>\n","    <tr>\n","      <th>2183</th>\n","      <td>2021-07-30 23:00:00</td>\n","      <td>0.025959</td>\n","    </tr>\n","    <tr>\n","      <th>2184</th>\n","      <td>2021-07-31 00:00:00</td>\n","      <td>0.024453</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                      ds      yhat\n","2180 2021-07-30 20:00:00  0.020921\n","2181 2021-07-30 21:00:00  0.029642\n","2182 2021-07-30 22:00:00  0.030394\n","2183 2021-07-30 23:00:00  0.025959\n","2184 2021-07-31 00:00:00  0.024453"]},"metadata":{},"execution_count":158}]},{"cell_type":"code","metadata":{"id":"L-HWlN-ZAN-f","colab":{"base_uri":"https://localhost:8080/","height":322},"outputId":"74d6bf0d-a6af-4244-a8cb-3d9fb20df17d"},"source":["plt.figure(figsize=(20,5))\n","\n","plt.plot(df[\"y\"][1184:], label=\"real\")\n","plt.plot(range(2184-24*20,2184),forecast['yhat'][-24*20:], label=\"Prophet\")\n","plt.plot(range(2184-24*20,2184),pred_series[:24*20+23-23]+0.013913, label=\"Transformer\")\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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wFNPPYXPfOYzuPXWW/HQQw9h9uzZeOedd3Dbbbfh1Vdfxbp16/Cxj30MN954o7mvAY2ZJgRYcEZERERERES5JneDRBni9/uxdOlSAOFMoi9+8YvYsWMHVq5ciZkzZwIAtm/fjttvvx0AMG/ePEyfPj0SJLrssstQXl4OALj++uuxfft2XHvttZg5c2Zku+eddx7q6+vR19eHHTt24KabborsPxgMpu1vpdHRtPB/RERERERERLkkd4NECWb8mE3vSTRYfn5+Qr8vSVLM751OZ+RnVqsVfr8fmqahpKQk5v4oe6mCeURERERERESUe9iTKAXWrFmDxx57DABw9OhRnDx5EnPnzgUAvPzyy+js7ITf78fmzZtx4YUXxt1OUVERZs6ciSeeeAIAIITA/v37AQCFhYXo7e1N8V9Co6FqAoKNq4mIiIiIiCjHMEiUArfddhs0TcPixYtx8803Y+PGjZFMoZUrV+KGG27AOeecgxtuuAHLly8fdluPPfYY/vu//xtLlizBwoUL8fTTTwMAPvnJT+JnP/sZli1bxsbVWUQPDjFGRERERERERLlGytaMh+XLl4tdu3ZF/ezw4cOYP39+hkY0dhs3bsSuXbvw4IMPZnooo5Lrr386KKqGs7+7BXMqC/DS//5wpodDREREREREFEWSpN1CiJgZK8wkIjKR2h901bIz9kpEREREREQUF4NEabR+/fqczSKixOirmmVrhh4RnTm2HWvDH7fVZXoYRERERJRDGCQiMpGm9yTK8DiIiJ7d34Q/MEhERERERElgkIjIRCobVxNRltAES1+JiIiIKDkMEhGZSNP0IBFnZkSUWZomeCwiIiIioqQwSERkIlVj42oiyg6aEDwWEREREVFSGCRKQkdHB5YuXYqlS5eiqqoKU6ZMiXwfCoVM3VdNTQ2WLl2KZcuWoba21tRtU+roEzLBrkRElGGaGAhcExERERElwpbpAeSS8vJy7Nu3DwDw7//+7ygoKMA3v/nNyOOKosBmM+cl3bx5M2688UbcfffdCT1fiHBZgcViTtzPzL/lTKKxJxERZYlwJhEPRkRERESUOGYSjdH69evx1a9+FatWrcKdd96JnTt34vzzz8eyZctwwQUX4MiRIwCAjRs34vrrr8eVV16J2bNn48477wQAqKqK9evXY9GiRVi8eDF++ctf4h//+Ad+9atf4Xe/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\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"UUMRI2j6Bocb"},"source":["#LSTMa"]},{"cell_type":"code","metadata":{"id":"7WLcYZZYBqhX"},"source":["import numpy as np \n","import pandas as pd \n","import matplotlib.pyplot as plt\n","\n","from tqdm import trange\n","import random"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hGUOrhKuBscl","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"27df7b57-939f-4600-bd11-86497aa67740"},"source":["data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version1.csv\", encoding='CP949')\n","\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>날짜</th>\n","      <th>종가</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2021-05-01 0:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2021-05-01 1:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2021-05-01 2:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2021-05-01 3:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2021-05-01 4:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0               날짜        종가\n","0           0  2021-05-01 0:00  0.611995\n","1           1  2021-05-01 1:00  0.611995\n","2           2  2021-05-01 2:00  0.611995\n","3           3  2021-05-01 3:00  0.611995\n","4           4  2021-05-01 4:00  0.611995"]},"metadata":{},"execution_count":161}]},{"cell_type":"code","metadata":{"id":"MR7XsjsxBtY_"},"source":["from sklearn.preprocessing import MinMaxScaler\n","min_max_scaler = MinMaxScaler()\n","data[\"종가\"] = min_max_scaler.fit_transform(data[\"종가\"].to_numpy().reshape(-1,1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LzqEQL_2Byuf"},"source":["train = data[:-24*20]\n","train = train[\"종가\"].to_numpy()\n","\n","test = data[-24*20:]\n","test = test[\"종가\"].to_numpy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Q6VbWpwB09L"},"source":["import torch\n","import torch.nn as nn\n","from torch import optim\n","import torch.nn.functional as F\n","\n","device = torch.device(\"cuda\", index=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vsgdq7a1B2Zf"},"source":["class lstm_encoder(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layers = 1):\n","        super(lstm_encoder, self).__init__()\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.num_layers = num_layers\n","\n","        self.lstm = nn.LSTM(input_size = input_size, hidden_size = hidden_size, num_layers = num_layers, batch_first=True)\n","\n","    def forward(self, x_input):\n","        lstm_out, self.hidden = self.lstm(x_input)\n","        return lstm_out, self.hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g3V7hzfIB4ua"},"source":["class lstm_decoder(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layers = 1):\n","        super(lstm_decoder, self).__init__()\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.num_layers = num_layers\n","\n","        self.lstm = nn.LSTM(input_size = input_size, hidden_size = hidden_size,num_layers = num_layers, batch_first=True)\n","        self.linear = nn.Linear(hidden_size, input_size)           \n","\n","    def forward(self, x_input, encoder_hidden_states):\n","        lstm_out, self.hidden = self.lstm(x_input.unsqueeze(-1), encoder_hidden_states)\n","        output = self.linear(lstm_out)\n","        \n","        return output, self.hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"khG35pB8B8Zb"},"source":["class lstm_encoder_decoder(nn.Module):\n","    def __init__(self, input_size, hidden_size):\n","        super(lstm_encoder_decoder, self).__init__()\n","\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","\n","        self.encoder = lstm_encoder(input_size = input_size, hidden_size = hidden_size)\n","        self.decoder = lstm_decoder(input_size = input_size, hidden_size = hidden_size)\n","\n","    def forward(self, inputs, targets, target_len, teacher_forcing_ratio):\n","        batch_size = inputs.shape[0]\n","        input_size = inputs.shape[2]\n","\n","        outputs = torch.zeros(batch_size, target_len, input_size)\n","\n","        _, hidden = self.encoder(inputs)\n","        decoder_input = inputs[:,-1, :]\n","        \n","        for t in range(target_len): \n","            out, hidden = self.decoder(decoder_input, hidden)\n","            out =  out.squeeze(1)\n","            if random.random() < teacher_forcing_ratio:\n","                decoder_input = targets[:, t, :]\n","            else:\n","                decoder_input = out\n","            outputs[:,t,:] = out\n","\n","        return outputs\n","\n","    def predict(self, inputs, target_len):\n","        inputs = inputs.unsqueeze(0)\n","        self.eval()\n","        batch_size = inputs.shape[0]\n","        input_size = inputs.shape[2]\n","        outputs = torch.zeros(batch_size, target_len, input_size)\n","        _, hidden = self.encoder(inputs)\n","        decoder_input = inputs[:,-1, :]\n","        for t in range(target_len): \n","            out, hidden = self.decoder(decoder_input, hidden)\n","            out =  out.squeeze(1)\n","            decoder_input = out\n","            outputs[:,t,:] = out\n","        return outputs.detach().numpy()[0,:,0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"euepwoDsB_AS"},"source":["from torch.utils.data import DataLoader, Dataset\n","\n","class windowDataset(Dataset):\n","    def __init__(self, y, input_window=80, output_window=20, stride=5):\n","        #총 데이터의 개수\n","        L = y.shape[0]\n","        #stride씩 움직일 때 생기는 총 sample의 개수\n","        num_samples = (L - input_window - output_window) // stride + 1\n","\n","        #input과 output\n","        X = np.zeros([input_window, num_samples])\n","        Y = np.zeros([output_window, num_samples])\n","\n","        for i in np.arange(num_samples):\n","            start_x = stride*i\n","            end_x = start_x + input_window\n","            X[:,i] = y[start_x:end_x]\n","\n","            start_y = stride*i + input_window\n","            end_y = start_y + output_window\n","            Y[:,i] = y[start_y:end_y]\n","\n","        X = X.reshape(X.shape[0], X.shape[1], 1).transpose((1,0,2))\n","        Y = Y.reshape(Y.shape[0], Y.shape[1], 1).transpose((1,0,2))\n","        self.x = X\n","        self.y = Y\n","        \n","        self.len = len(X)\n","    def __getitem__(self, i):\n","        return self.x[i], self.y[i]\n","    def __len__(self):\n","        return self.len"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fyRG-o1DCB_6"},"source":["iw = 24*40\n","ow = 24*20\n","\n","train_dataset = windowDataset(train, input_window=iw, output_window=ow, stride=1)\n","train_loader = DataLoader(train_dataset, batch_size=64)\n","# y_train_loader = DataLoader(y_train, batch_size=5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o6RRY-yGCEFL"},"source":["model = lstm_encoder_decoder(input_size=1, hidden_size=16).to(device)\n","# model.train_model(X_train.to(device), y_train.to(device), n_epochs=100, target_len=ow, batch_size=5, training_bprediction=\"mixed_teacher_forcing\", teacher_forcing_ratio=0.6, learning_rate=0.01, dynamic_tf=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zh7o6HY4CGC8"},"source":["#5000으로 할 경우 시간도 오래걸리고 에러도 커서 100으로 줄인다.\n","\n","learning_rate=0.01\n","epoch = 100\n","optimizer = optim.Adam(model.parameters(), lr = learning_rate)\n","criterion = nn.MSELoss()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zoaTXiKbCHce","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a19d0143-f04a-43fa-f3dc-5eedd9d7a1cb"},"source":["from tqdm import tqdm\n","\n","model.train()\n","with tqdm(range(epoch)) as tr:\n","    for i in tr:\n","        total_loss = 0.0\n","        for x,y in train_loader:\n","            optimizer.zero_grad()\n","            x = x.to(device).float()\n","            y = y.to(device).float()\n","            output = model(x, y, ow, 0.6).to(device)\n","            loss = criterion(output, y)\n","            loss.backward()\n","            optimizer.step()\n","            total_loss += loss.cpu().item()\n","        tr.set_postfix(loss=\"{0:.5f}\".format(total_loss/len(train_loader)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [02:41<00:00,  1.62s/it, loss=0.00154]\n"]}]},{"cell_type":"code","metadata":{"id":"Shr1ZdBvCJfq"},"source":["predict = model.predict(torch.tensor(train_dataset[0][0]).to(device).float(), target_len=ow)\n","real = train_dataset[0][1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6Y_bM2yLCMSN"},"source":["predict = model.predict(torch.tensor(train[-24*20*2:]).reshape(-1,1).to(device).float(), target_len=ow)\n","real = data[\"종가\"].to_numpy()\n","\n","predict = min_max_scaler.inverse_transform(predict.reshape(-1,1))\n","real = min_max_scaler.inverse_transform(real.reshape(-1,1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AcWSBCdLCOeU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a903ccbb-8e7a-4120-facb-cd4808c015e6"},"source":["real.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2185, 1)"]},"metadata":{},"execution_count":175}]},{"cell_type":"code","metadata":{"id":"Qe3V9gtwCPsl","colab":{"base_uri":"https://localhost:8080/","height":322},"outputId":"6b87e3b8-8b79-4ac1-f535-b762dfb65d23"},"source":["plt.figure(figsize=(20,5))\n","plt.plot(range(1183,2184), real[1184:], label=\"real\")\n","plt.plot(range(2184-24*20,2184), predict[-24*20:], label=\"LSTMa\")\n","plt.plot(range(2184-24*20,2184),forecast['yhat'][-24*20:], label=\"Prophet\")\n","plt.plot(range(2184-24*20,2184),pred_series[:24*20+23-23]+0.013913, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZHCM0K5uDzwc"},"source":["#Informer"]},{"cell_type":"code","metadata":{"id":"Ighg_VhkDrwT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"1559e6df-b73e-4591-cf14-713a18e02ef3"},"source":["!git clone https://github.com/zhouhaoyi/Informer2020.git"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'Informer2020'...\n","remote: Enumerating objects: 535, done.\u001b[K\n","remote: Total 535 (delta 0), reused 0 (delta 0), pack-reused 535\u001b[K\n","Receiving objects: 100% (535/535), 6.47 MiB | 10.26 MiB/s, done.\n","Resolving deltas: 100% (306/306), done.\n"]}]},{"cell_type":"code","metadata":{"id":"2yxRebPpD1nz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"05400d3e-15c2-4ee4-c8ab-9bc0cf584b02"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"Q_nMD1gGD5ND"},"source":["import sys\n","if not 'Informer2020' in sys.path:\n","    sys.path += ['Informer2020']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iTVBZNqqD6sX"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import MinMaxScaler\n","\n","from datetime import timedelta\n","import torch\n","from torch import nn\n","from torch import optim\n","from torch.utils.data import DataLoader, Dataset\n","\n","from tqdm import tqdm\n","from models.model import Informer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jjqkV_XfD8jj"},"source":["class StandardScaler():\n","    def __init__(self):\n","        self.mean = 0.\n","        self.std = 1.\n","    \n","    def fit(self, data):\n","        self.mean = data.mean(0)\n","        self.std = data.std(0)\n","\n","    def transform(self, data):\n","        mean = torch.from_numpy(self.mean).type_as(data).to(data.device) if torch.is_tensor(data) else self.mean\n","        std = torch.from_numpy(self.std).type_as(data).to(data.device) if torch.is_tensor(data) else self.std\n","        return (data - mean) / std\n","\n","    def inverse_transform(self, data):\n","        mean = torch.from_numpy(self.mean).type_as(data).to(data.device) if torch.is_tensor(data) else self.mean\n","        std = torch.from_numpy(self.std).type_as(data).to(data.device) if torch.is_tensor(data) else self.std\n","        return (data * std) + mean\n","        \n","\n","def time_features(dates, freq='h'):\n","    dates['month'] = dates.date.apply(lambda row:row.month,1)\n","    dates['day'] = dates.date.apply(lambda row:row.day,1)\n","    dates['weekday'] = dates.date.apply(lambda row:row.weekday(),1)\n","    dates['hour'] = dates.date.apply(lambda row:row.hour,1)\n","    dates['minute'] = dates.date.apply(lambda row:row.minute,1)\n","    dates['minute'] = dates.minute.map(lambda x:x//15)\n","    freq_map = {\n","        'y':[],'m':['month'],'w':['month'],'d':['month','day','weekday'],\n","        'b':['month','day','weekday'],'h':['month','day','weekday','hour'],\n","        't':['month','day','weekday','hour','minute'],\n","    }\n","    return dates[freq_map[freq.lower()]].values\n","\n","def _process_one_batch(batch_x, batch_y, batch_x_mark, batch_y_mark):\n","    batch_x = batch_x.float().to(device)\n","    batch_y = batch_y.float()\n","    batch_x_mark = batch_x_mark.float().to(device)\n","    batch_y_mark = batch_y_mark.float().to(device)\n","    dec_inp = torch.zeros([batch_y.shape[0], pred_len, batch_y.shape[-1]]).float()\n","    dec_inp = torch.cat([batch_y[:,:label_len,:], dec_inp], dim=1).float().to(device)\n","    outputs = model(batch_x, batch_x_mark, dec_inp, batch_y_mark)\n","    batch_y = batch_y[:,-pred_len:,0:].to(device)\n","    return outputs, batch_y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftToXwQzD_XZ"},"source":["class Dataset_Pred(Dataset):\n","    def __init__(self, dataframe, size=None, scale=True):\n","        self.seq_len = size[0]\n","        self.label_len = size[1]\n","        self.pred_len = size[2]\n","        self.dataframe = dataframe\n","        \n","        self.scale = scale\n","        self.__read_data__()\n","\n","    def __read_data__(self):\n","        self.scaler = StandardScaler()\n","        df_raw = self.dataframe\n","        df_raw[\"date\"] = pd.to_datetime(df_raw[\"date\"])\n","\n","        delta = df_raw[\"date\"].iloc[1] - df_raw[\"date\"].iloc[0]\n","        if delta>=timedelta(hours=1):\n","            self.freq='h'\n","        else:\n","            self.freq='t'\n","\n","        \n","\n","        border1 = 0\n","        border2 = len(df_raw)\n","        cols_data = df_raw.columns[1:]\n","        df_data = df_raw[cols_data]\n","\n","\n","        if self.scale:\n","            self.scaler.fit(df_data.values)\n","            data = self.scaler.transform(df_data.values)\n","        else:\n","            data = df_data.values\n","            \n","        tmp_stamp = df_raw[['date']][border1:border2]\n","        tmp_stamp['date'] = pd.to_datetime(tmp_stamp.date)\n","        pred_dates = pd.date_range(tmp_stamp.date.values[-1], periods=self.pred_len+1, freq=self.freq)\n","        \n","        df_stamp = pd.DataFrame(columns = ['date'])\n","        df_stamp.date = list(tmp_stamp.date.values) + list(pred_dates[1:])\n","        data_stamp = time_features(df_stamp, freq=self.freq)\n","\n","        self.data_x = data[border1:border2]\n","        self.data_y = data[border1:border2]\n","        self.data_stamp = data_stamp\n","    \n","    def __getitem__(self, index):\n","        s_begin = index\n","        s_end = s_begin + self.seq_len\n","        r_begin = s_end - self.label_len\n","        r_end = r_begin + self.label_len + self.pred_len\n","\n","        seq_x = self.data_x[s_begin:s_end]\n","        seq_y = self.data_y[r_begin:r_end]\n","        seq_x_mark = self.data_stamp[s_begin:s_end]\n","        seq_y_mark = self.data_stamp[r_begin:r_end]\n","        return seq_x, seq_y, seq_x_mark, seq_y_mark\n","\n","    def __len__(self):\n","        return len(self.data_x) - self.seq_len- self.pred_len + 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HOXR317aEHvb","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"7c229d64-6995-41c4-889e-650ee2c5a0d0"},"source":["data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version1.csv\", encoding='CP949')\n","\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>날짜</th>\n","      <th>종가</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2021-05-01 0:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2021-05-01 1:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2021-05-01 2:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2021-05-01 3:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2021-05-01 4:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0               날짜        종가\n","0           0  2021-05-01 0:00  0.611995\n","1           1  2021-05-01 1:00  0.611995\n","2           2  2021-05-01 2:00  0.611995\n","3           3  2021-05-01 3:00  0.611995\n","4           4  2021-05-01 4:00  0.611995"]},"metadata":{},"execution_count":183}]},{"cell_type":"code","metadata":{"id":"cWQ9usQTEKUl"},"source":["data[\"date\"] = data[\"날짜\"]\n","data[\"date\"] = pd.to_datetime(data[\"date\"], dayfirst = True)\n","data[\"value\"] = data[\"종가\"]\n","\n","min_max_scaler = MinMaxScaler()\n","data[\"value\"] = min_max_scaler.fit_transform(data[\"value\"].to_numpy().reshape(-1,1)).reshape(-1)\n","data = data[[\"date\", \"value\"]]\n","\n","data_train = data.iloc[:-24*20].copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nrnJWkCXENIX"},"source":["pred_len = 24*20\n","\n","seq_len = pred_len#인풋 크기\n","label_len = pred_len#디코더에서 참고할 크기\n","pred_len = pred_len#예측할 크기\n","\n","batch_size = 10\n","shuffle_flag = True\n","num_workers = 0\n","drop_last = True\n","\n","\n","\n","dataset = Dataset_Pred(dataframe=data_train ,scale=True, size = (seq_len, label_len,pred_len))\n","data_loader = DataLoader(dataset,batch_size=batch_size,shuffle=shuffle_flag,num_workers=num_workers,drop_last=drop_last)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4rWuHee2EPMC"},"source":["enc_in = 1\n","dec_in = 1\n","c_out = 1\n","device = torch.device(\"cuda:0\")\n","\n","model = Informer(enc_in, dec_in, c_out, seq_len, label_len, pred_len, device = device).to(device)\n","learning_rate = 1e-4\n","criterion =  nn.MSELoss()\n","\n","model_optim = optim.Adam(model.parameters(), lr=learning_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3OuiFBlHESYz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"cb87eaf6-99a6-4b4a-8f81-fde61194d4e7"},"source":["# Informer는 error를 100하는게 시간도 덜 걸리고 에러도 적다.\n","\n","train_epochs = 100\n","model.train()\n","progress = tqdm(range(train_epochs))\n","for epoch in progress:\n","    train_loss = []\n","    for i, (batch_x,batch_y,batch_x_mark,batch_y_mark) in enumerate(data_loader):\n","        model_optim.zero_grad()\n","        pred, true = _process_one_batch(batch_x, batch_y, batch_x_mark, batch_y_mark)\n","        loss = criterion(pred, true)\n","        train_loss.append(loss.item())\n","        loss.backward()\n","        model_optim.step()\n","    train_loss = np.average(train_loss)\n","    progress.set_description(\"loss: {:0.6f}\".format(train_loss))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/100 [00:00<?, ?it/s]/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:652: UserWarning:\n","\n","Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)\n","\n","loss: 0.270055: 100%|██████████| 100/100 [18:15<00:00, 10.96s/it]\n"]}]},{"cell_type":"code","metadata":{"id":"s0pez33IETCg","colab":{"base_uri":"https://localhost:8080/"},"outputId":"18117285-81d6-4e41-fd4e-1e1791bade4f"},"source":["import time\n","now = time.time()\n","scaler = dataset.scaler\n","df_test = data_train.copy()\n","df_test[\"value\"] = scaler.transform(df_test[\"value\"])\n","df_test[\"date\"] = pd.to_datetime(df_test[\"date\"].values)\n","\n","delta = df_test[\"date\"][1] - df_test[\"date\"][0]\n","for i in range(pred_len):\n","    df_test = df_test.append({\"date\":df_test[\"date\"].iloc[-1]+delta}, ignore_index=True)\n","df_test = df_test.fillna(0)\n","\n","\n","df_test_x = df_test.iloc[-seq_len-pred_len:-pred_len].copy()\n","df_test_y = df_test.iloc[-label_len-pred_len:].copy()\n","\n","df_test_numpy = df_test.to_numpy()[:,1:].astype(\"float\")\n","test_time_x = time_features(df_test_x, freq=dataset.freq) #인풋 타임 스템프\n","test_data_x = df_test_numpy[-seq_len-pred_len:-pred_len] #인풋 데이터\n","\n","\n","test_time_y = time_features(df_test_y, freq=dataset.freq) #아웃풋 타임스템프\n","test_data_y =df_test_numpy[-label_len-pred_len:]\n","test_data_y[-pred_len:] = np.zeros_like(test_data_y[-pred_len:]) #예측하는 부분을 0으로 채워준다.\n","\n","\n","\n","test_time_x = test_time_x\n","test_time_y = test_time_y\n","test_data_y = test_data_y.astype(np.float64)\n","test_data_x = test_data_x.astype(np.float64)\n","\n","_test = [(test_data_x,test_data_y,test_time_x,test_time_y)]\n","_test_loader = DataLoader(_test,batch_size=1,shuffle=False)\n","\n","preds = []\n","\n","with torch.no_grad():\n","    for i, (batch_x,batch_y,batch_x_mark,batch_y_mark) in enumerate(_test_loader):\n","        \n","        batch_x = batch_x.float().to(device)\n","        batch_y = batch_y.float().to(device)\n","\n","        batch_x_mark = batch_x_mark.float().to(device)\n","        batch_y_mark = batch_y_mark.float().to(device)\n","\n","        outputs = model(batch_x, batch_x_mark, batch_y, batch_y_mark)\n","        preds = outputs.detach().cpu().numpy()\n","\n","preds = scaler.inverse_transform(preds[0])\n","\n","df_test.iloc[-pred_len:, 1:] = preds\n","print(time.time() - now)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0444989204406738\n"]}]},{"cell_type":"code","metadata":{"id":"UKVKmhZLEWXz","colab":{"base_uri":"https://localhost:8080/","height":322},"outputId":"c52957a3-b1fd-4508-ffb5-fd824a6b7fd2"},"source":["import matplotlib.pyplot as plt\n","\n","real = data[\"value\"].to_numpy()\n","result = df_test[\"value\"].iloc[-24*20:].to_numpy()\n","\n","real = min_max_scaler.inverse_transform(real.reshape(-1,1)).reshape(-1)\n","result = min_max_scaler.inverse_transform(result.reshape(-1,1)).reshape(-1)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(range(1183,2184),real[1184:], label=\"real\")\n","plt.plot(range(2184-24*20,2184),result, label=\"Informer\")\n","plt.plot(range(2184-24*20,2184), predict[-24*20:], label=\"LSTMa\")\n","plt.plot(range(2184-24*20,2184),forecast['yhat'][-24*20:], label=\"Prophet\")\n","plt.plot(range(2184-24*20,2184),pred_series[:24*20+23-23]+0.013913, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABIkAAAEyCAYAAAB+h4BJAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd3wc9Zk/8M9sX/XqKhcZXLAtW8YVjMHAxZALZxJsCCSEMxwh5ZJw4ZdwIQcJKZdcEsKRcIUkQCAJIbTDkEJzwMHGgAEXkG254iLbsnrZPuX7+2N2VrvSSlpJs7uz0uf9evklacvsd9e7s/N95nmerySEABERERERERERjW22bA+AiIiIiIiIiIiyj0EiIiIiIiIiIiJikIiIiIiIiIiIiBgkIiIiIiIiIiIiMEhERERERERERERgkIiIiIiIiIiIiGBSkEiSpIclSWqSJKmun+tXS5LUKUnSrui/b5nxuEREREREREREZA6HSdt5BMB/AfjNALfZIoS4wqTHIyIiIiIiIiIiE5mSSSSEeB1AmxnbIiIiIiIiIiKizDMrkygV50mStBvAKQBfE0Ls6X0DSZJuAXALAOTn5y+eM2dOBodHRERERERERDS6vffeey1CiMpk12UqSLQDwDQhhE+SpL8HsBHAzN43EkL8EsAvAWDJkiXi3XffzdDwiIiIiIiIiIhGP0mSjvV3XUZWNxNCdAkhfNHf/wLAKUlSRSYem4iIiIiIiIiIBpeRIJEkSRMkSZKivy+LPm5rJh6biIiIiIiIiIgGZ0q5mSRJjwNYDaBCkqQGAN8G4AQAIcQDANYD+IIkSQqAIIBrhRDCjMcmIiIiIiIiIqKRMyVIJIS4bpDr/wvAf430cWRZRkNDA0Kh0Eg3RUPk8XhQVVUFp9OZ7aEQERERERERURpkcnWzEWtoaEBhYSGmT5+OaPUaZYAQAq2trWhoaEB1dXW2h0NEREREREREaZCRnkRmCYVCKC8vZ4AowyRJQnl5OTO4iIiIiIiIiEaxnAoSAWCAKEv4uhMRERERERGNbjkXJCIiIiIiIiIiIvMxSJRh06dPR0tLS7aHQURERERERESUgEGiERBCQNO0bA+DLOZIsw8n2gLZHgYRERERERHRkDBINERHjx7F7NmzccMNN2D+/Pn43ve+h6VLl2LBggX49re/Hbvdxz/+cSxevBjz5s3DL3/5yyyOmDLtG//3Ab7/573ZHgYRERERERHRkDiyPYDh+s4f92DvqS5Ttzl3UhG+/Q/zBr3dwYMH8eijj6KrqwtPP/00tm/fDiEE1q5di9dffx0XXnghHn74YZSVlSEYDGLp0qVYt24dysvLTR0vWVMgosDjtGd7GERERERERERDwkyiYZg2bRpWrFiBl19+GS+//DIWLVqEc889F/X19Th48CAA4Oc//zkWLlyIFStW4MSJE7HLafRTNb0UkYiIiIiIiCiX5GwmUSoZP+mSn58PQA8E3HHHHfjc5z6XcP3mzZuxadMmvPnmm8jLy8Pq1asRCoWyMVTKAk0TYIyIiIiIiIiIcg0ziUbgsssuw8MPPwyfzwcAOHnyJJqamtDZ2YnS0lLk5eWhvr4eb731VpZHSpmkCQGNUSIiIiIiIiLKMTmbSWQFa9aswb59+3DeeecBAAoKCvC73/0Ol19+OR544AGcc845mD17NlasWJHlkVImqYKZRERERERERJR7GCQaounTp6Ouri7296233opbb721z+1eeOGFpPc/evRouoZGFqFpAgKMEhEREREREVFuYbkZkclUIaAxRkREREREREQ5hkEiIpNpGsBEIiIiIiIiIso1DBIRmYyNq4mIiIiIiCgXMUhEZDJVY0ciIiIiIiIiyj0MEhGZTBMCgplERERERERElGMYJCIymSbAxtVERERERESUcxgkGqKCgoJBb7NlyxbMmzcPtbW1CAaDGRgVWQnLzYiIiIiIiCgXMUiUBo899hjuuOMO7Nq1C16vd9DbK4pi6uObvT0aGk0TAMvNiIiIiIiIKMcwSDRMmzdvxurVq7F+/XrMmTMHn/70pyGEwIMPPognn3wSd911V+yyr3/965g/fz5qamrwxBNPxO6/atUqrF27FnPnzsXmzZtx0UUX4corr8SMGTPwjW98A4899hiWLVuGmpoaHD58GADQ3NyMdevWYenSpVi6dCneeOMNAMDdd9+Nz3zmM1i5ciU+85nPZO11IUAVguVmRERERERElHMc2R7AsL3wDaDxA3O3OaEG+Oh/pHzznTt3Ys+ePZg0aRJWrlyJN954AzfffDO2bt2KK664AuvXr8czzzyDXbt2Yffu3WhpacHSpUtx4YUXAgB27NiBuro6VFdXY/Pmzdi9ezf27duHsrIyzJgxAzfffDO2b9+On/3sZ7j//vtx33334dZbb8VXv/pVXHDBBTh+/Dguu+wy7Nu3DwCwd+9ebN26NaXsJUofTQiw4IyIiIiIiIhyTe4GiSxg2bJlqKqqAgDU1tbi6NGjuOCCCxJus3XrVlx33XWw2+0YP348LrroIrzzzjsoKirCsmXLUF1dHbvt0qVLMXHiRADAWWedhTVr1gAAampq8NprrwEANm3ahL1798bu09XVBZ/PBwBYu3YtA0QWoGn6PyIiIiIiIqJckrtBoiFk/KSL2+2O/W6324fcCyg/P7/f7dlsttjfNpsttm1N0/DWW2/B4/EMuj3KDlUwj4iIiIiIiIhyD3sSpdmqVavwxBNPQFVVNDc34/XXX8eyZcuGvb01a9bg/vvvj/29a9cuM4ZJJlI1AcHG1URERERERJRjGCRKs0984hNYsGABFi5ciEsuuQQ//vGPMWHChGFv7+c//zneffddLFiwAHPnzsUDDzxg4mhppIzgEGNERERERERElGskq2Y8LFmyRLz77rsJl+3btw/nnHNOlkZEfP0Hp6gazv63FzBrfAFe/upF2R4OERERERERUQJJkt4TQixJdh0ziYhMpEaDrpo1Y69ERERERERE/WKQiMhExqpmVs3QI6KxY8vBZjy45Ui2h0FEREREOYRBIiITaUZPoiyPg4joj7tP4VcMEhERERHREDBIRGQilY2ricgiNMHSVyIiIiIaGgaJiEykaUaQiDMzIsouTRPcFxERERHRkDBIRGQiVWPjaiKyBk0I7ouIiIiIaEgYJBqigoKCPpft378fq1evRm1tLc455xzccssteOmll1BbW4va2loUFBRg9uzZqK2txQ033IDNmzdDkiQ8+OCDsW3s2rULkiThnnvuyeTTIZMZEzLBrkRElGWa6AlcExERERGlwpHtAYwGX/nKV/DVr34VV155JQDggw8+QE1NDS677DIAwOrVq3HPPfdgyZIlAIDNmzdj/vz5ePLJJ3HzzTcDAB5//HEsXLgwO0+ATKOxJxERWYSeScSdERERERGljplEJjh9+jSqqqpif9fU1Ax6n2nTpiEUCuHMmTMQQuDFF1/ERz/60dj1v/rVr7B06VIsXLgQ69atQyAQSMvYyVyqxiAREVmDENwXEREREdHQ5Gwm0Y+2/wj1bfWmbnNO2Rz867J/HfL9vvrVr+KS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\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"oyQIUFttGo_w"},"source":["#ARIMA"]},{"cell_type":"code","metadata":{"id":"hiLPHVi8FtJA"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U3r5vY8HFudT","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"cc98cccb-6232-4e72-8902-3398d16ab493"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_3M_ST_Version1.csv\", encoding='CP949')\n","df = df.drop(df.columns[0], axis=1)\n","df.columns = [\"ds\",\"y\"]\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-05-01 0:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-05-01 1:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-05-01 2:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-05-01 3:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-05-01 4:00</td>\n","      <td>0.611995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                ds         y\n","0  2021-05-01 0:00  0.611995\n","1  2021-05-01 1:00  0.611995\n","2  2021-05-01 2:00  0.611995\n","3  2021-05-01 3:00  0.611995\n","4  2021-05-01 4:00  0.611995"]},"metadata":{},"execution_count":191}]},{"cell_type":"code","metadata":{"id":"3H-pHMqLF1ND"},"source":["df_train = df.iloc[:-24*20]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vVJjfCniF1xb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"25df2440-aa87-4b53-d257-fbc51cc6be73"},"source":["from statsmodels.tsa.seasonal import seasonal_decompose"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning:\n","\n","pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","\n"]}]},{"cell_type":"code","metadata":{"id":"1AzDqmYFF3qS","colab":{"base_uri":"https://localhost:8080/","height":506},"outputId":"9d8971e5-73ac-4708-c667-2a1532de24ee"},"source":["import statsmodels.api as sm\n","fig = plt.figure(figsize=(20,8))\n","ax1 = fig.add_subplot(211)\n","fig = sm.graphics.tsa.plot_acf(df_train[\"y\"], lags=20, ax=ax1)\n","\n","fig = plt.figure(figsize=(20,8))\n","ax1 = fig.add_subplot(212)\n","fig = sm.graphics.tsa.plot_pacf(df_train[\"y\"], lags=20, ax=ax1)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ljPV71OzF64s"},"source":["from statsmodels.tsa.arima_model import ARIMA\n","from statsmodels.tsa.statespace.sarimax import SARIMAX\n","import itertools\n","from tqdm import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rtlXujmwF60T","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a501a11b-1435-439c-cb00-438305534e30"},"source":["p = range(0,3)\n","d = range(1,2)\n","q = range(0,6)\n","m = 24\n","\n","pdq = list(itertools.product(p,d,q))\n","seasonal_pdq = [(x[0],x[1], x[2], m) for x in list(itertools.product(p,d,q))]\n","\n","aic = []\n","params = []\n","\n","with tqdm(total = len(pdq) * len(seasonal_pdq)) as pg:\n","    for i in pdq:\n","        for j in seasonal_pdq:\n","            pg.update(1)\n","            try:\n","                model = SARIMAX(df_train[\"y\"], order=(i), season_order = (j))\n","                model_fit = model.fit()\n","                # print(\"SARIMA:{}{}, AIC:{}\".format(i,j, round(model_fit.aic,2)))\n","                aic.append(round(model_fit.aic,2))\n","                params.append((i,j))\n","            except:\n","                continue"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["  0%|          | 0/324 [00:00<?, ?it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  1%|          | 2/324 [00:00<00:27, 11.51it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  1%|          | 4/324 [00:00<00:35,  9.02it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  2%|▏         | 5/324 [00:00<00:36,  8.76it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  2%|▏         | 6/324 [00:00<00:36,  8.62it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  2%|▏         | 7/324 [00:00<00:37,  8.52it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  2%|▏         | 8/324 [00:00<00:37,  8.47it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  3%|▎         | 9/324 [00:01<00:37,  8.40it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  3%|▎         | 10/324 [00:01<00:39,  8.04it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  3%|▎         | 11/324 [00:01<00:40,  7.80it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  4%|▎         | 12/324 [00:01<00:39,  7.84it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  4%|▍         | 13/324 [00:01<00:39,  7.95it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  4%|▍         | 14/324 [00:01<00:38,  8.09it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  5%|▍         | 15/324 [00:01<00:37,  8.16it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  5%|▍         | 16/324 [00:01<00:38,  8.10it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  5%|▌         | 17/324 [00:02<00:37,  8.13it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","  6%|▌         | 18/324 [00:02<00:37,  8.12it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 61%|██████▏   | 199/324 [01:08<01:18,  1.60it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 200/324 [01:10<02:05,  1.01s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 201/324 [01:12<02:36,  1.27s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 202/324 [01:13<02:57,  1.46s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 203/324 [01:15<03:11,  1.59s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 204/324 [01:17<03:19,  1.67s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 205/324 [01:19<03:25,  1.73s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▎   | 206/324 [01:21<03:28,  1.76s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▍   | 207/324 [01:23<03:30,  1.80s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▍   | 208/324 [01:25<03:31,  1.82s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▍   | 209/324 [01:27<03:31,  1.84s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▍   | 210/324 [01:28<03:30,  1.85s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▌   | 211/324 [01:30<03:29,  1.85s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▌   | 212/324 [01:32<03:27,  1.85s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▌   | 213/324 [01:34<03:25,  1.85s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▌   | 214/324 [01:36<03:24,  1.86s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▋   | 215/324 [01:38<03:22,  1.86s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 67%|██████▋   | 216/324 [01:40<03:21,  1.87s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 89%|████████▉ | 289/324 [02:13<00:42,  1.23s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|████████▉ | 290/324 [02:15<00:46,  1.38s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|████████▉ | 291/324 [02:17<00:48,  1.48s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|█████████ | 292/324 [02:18<00:49,  1.56s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|█████████ | 293/324 [02:20<00:49,  1.60s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████ | 294/324 [02:22<00:49,  1.65s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████ | 295/324 [02:24<00:48,  1.67s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████▏| 296/324 [02:25<00:47,  1.69s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 297/324 [02:27<00:45,  1.70s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 298/324 [02:29<00:44,  1.71s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 299/324 [02:30<00:43,  1.72s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 300/324 [02:32<00:41,  1.72s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 301/324 [02:34<00:40,  1.74s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 302/324 [02:36<00:38,  1.76s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▎| 303/324 [02:38<00:37,  1.77s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 304/324 [02:39<00:35,  1.78s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 305/324 [02:41<00:33,  1.79s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 306/324 [02:43<00:32,  1.79s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▍| 307/324 [02:45<00:30,  1.78s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▌| 308/324 [02:47<00:30,  1.90s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▌| 309/324 [02:49<00:29,  1.97s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▌| 310/324 [02:51<00:28,  2.04s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▌| 311/324 [02:53<00:27,  2.08s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▋| 312/324 [02:56<00:25,  2.11s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 313/324 [02:58<00:23,  2.13s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 314/324 [03:00<00:21,  2.14s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 315/324 [03:02<00:19,  2.15s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 316/324 [03:04<00:17,  2.15s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 317/324 [03:06<00:15,  2.17s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 318/324 [03:09<00:13,  2.17s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 319/324 [03:11<00:10,  2.17s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 320/324 [03:13<00:08,  2.18s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 321/324 [03:15<00:06,  2.20s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 322/324 [03:17<00:04,  2.19s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|█████████▉| 323/324 [03:20<00:02,  2.19s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|██████████| 324/324 [03:22<00:00,  2.18s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|██████████| 324/324 [03:24<00:00,  1.58it/s]\n"]}]},{"cell_type":"code","metadata":{"id":"t77yJtlmGCGl","colab":{"base_uri":"https://localhost:8080/","height":500},"outputId":"095a9523-d5b9-4200-86d1-905ae007d5e5"},"source":["optimal = [(params[i],j) for i,j in enumerate(aic) if j == min(aic)]\n","model_opt = SARIMAX(df_train[\"y\"], order = optimal[0][0][0], seasonal_order = optimal[0][0][1])\n","model_opt_fit = model_opt.fit()\n","model_opt_fit.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>Statespace Model Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>                  <td>y</td>               <th>  No. Observations:  </th>   <td>1705</td>  \n","</tr>\n","<tr>\n","  <th>Model:</th>           <td>SARIMAX(1, 1, 5)x(0, 1, 0, 24)</td> <th>  Log Likelihood     </th> <td>-345.610</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>                   <td>Thu, 23 Sep 2021</td>        <th>  AIC                </th>  <td>705.221</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                       <td>11:12:20</td>            <th>  BIC                </th>  <td>743.207</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                         <td>0</td>               <th>  HQIC               </th>  <td>719.292</td>\n","</tr>\n","<tr>\n","  <th></th>                             <td> - 1705</td>            <th>                     </th>     <td> </td>   \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>     <td> </td>   \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>ar.L1</th>  <td>   -0.6820</td> <td>    9.662</td> <td>   -0.071</td> <td> 0.944</td> <td>  -19.619</td> <td>   18.256</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>  <td>    0.0528</td> <td>    9.662</td> <td>    0.005</td> <td> 0.996</td> <td>  -18.885</td> <td>   18.991</td>\n","</tr>\n","<tr>\n","  <th>ma.L2</th>  <td>   -0.5099</td> <td>    6.079</td> <td>   -0.084</td> <td> 0.933</td> <td>  -12.424</td> <td>   11.404</td>\n","</tr>\n","<tr>\n","  <th>ma.L3</th>  <td>   -0.0896</td> <td>    0.782</td> <td>   -0.115</td> <td> 0.909</td> <td>   -1.622</td> <td>    1.443</td>\n","</tr>\n","<tr>\n","  <th>ma.L4</th>  <td>   -0.0103</td> <td>    0.336</td> <td>   -0.031</td> <td> 0.975</td> <td>   -0.669</td> <td>    0.648</td>\n","</tr>\n","<tr>\n","  <th>ma.L5</th>  <td>    0.0049</td> <td>    0.131</td> <td>    0.038</td> <td> 0.970</td> <td>   -0.252</td> <td>    0.262</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th> <td>    0.0883</td> <td>    0.001</td> <td>  126.036</td> <td> 0.000</td> <td>    0.087</td> <td>    0.090</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (Q):</th>          <td>448.03</td> <th>  Jarque-Bera (JB):  </th> <td>99652.10</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                 <td>0.00</td>  <th>  Prob(JB):          </th>   <td>0.00</td>  \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th>  <td>0.58</td>  <th>  Skew:              </th>   <td>-0.60</td> \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>     <td>0.00</td>  <th>  Kurtosis:          </th>   <td>40.71</td> \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."],"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                                 Statespace Model Results                                 \n","==========================================================================================\n","Dep. Variable:                                  y   No. Observations:                 1705\n","Model:             SARIMAX(1, 1, 5)x(0, 1, 0, 24)   Log Likelihood                -345.610\n","Date:                            Thu, 23 Sep 2021   AIC                            705.221\n","Time:                                    11:12:20   BIC                            743.207\n","Sample:                                         0   HQIC                           719.292\n","                                           - 1705                                         \n","Covariance Type:                              opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","ar.L1         -0.6820      9.662     -0.071      0.944     -19.619      18.256\n","ma.L1          0.0528      9.662      0.005      0.996     -18.885      18.991\n","ma.L2         -0.5099      6.079     -0.084      0.933     -12.424      11.404\n","ma.L3         -0.0896      0.782     -0.115      0.909      -1.622       1.443\n","ma.L4         -0.0103      0.336     -0.031      0.975      -0.669       0.648\n","ma.L5          0.0049      0.131      0.038      0.970      -0.252       0.262\n","sigma2         0.0883      0.001    126.036      0.000       0.087       0.090\n","===================================================================================\n","Ljung-Box (Q):                      448.03   Jarque-Bera (JB):             99652.10\n","Prob(Q):                              0.00   Prob(JB):                         0.00\n","Heteroskedasticity (H):               0.58   Skew:                            -0.60\n","Prob(H) (two-sided):                  0.00   Kurtosis:                        40.71\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","\"\"\""]},"metadata":{},"execution_count":197}]},{"cell_type":"code","metadata":{"id":"PojlDVwHGDm9","colab":{"base_uri":"https://localhost:8080/","height":320},"outputId":"be302db8-406b-4b12-cccc-33eddf288936"},"source":["model = SARIMAX(df_train[\"y\"], order=optimal[0][0][0], seasonal_order=optimal[0][0][1])\n","model_fit = model.fit(disp=0)\n","ARIMA_forecast = model_fit.forecast(steps=24*20)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(range(0,2184), df[\"y\"].iloc[1:], label=\"Real\")\n","\n","plt.plot(ARIMA_forecast, label=\"ARIMA\")\n","plt.plot(range(2184-24*20,2184),result, label=\"Informer\")\n","plt.plot(range(2184-24*20,2184), predict[-24*20:], label=\"LSTMa\")\n","plt.plot(range(2184-24*20,2184),forecast['yhat'][-24*20:], label=\"Prophet\")\n","plt.plot(range(2184-24*20,2184),pred_series[:24*20+23-23]+0.013913, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"b0hfHNU0ec52","colab":{"base_uri":"https://localhost:8080/","height":314},"outputId":"8570efcd-3b55-4a55-ff1b-a6dece53aa2b"},"source":["plt.figure(figsize=(20,5))\n","plt.plot(range(1183,2184), df[\"y\"].iloc[1184:], label=\"Real\")\n","\n","plt.plot(ARIMA_forecast, label=\"ARIMA\")\n","plt.plot(range(2184-24*20,2184),result, label=\"Informer\")\n","plt.plot(range(2184-24*20,2184), predict[-24*20:], label=\"LSTMa\")\n","plt.plot(range(2184-24*20,2184),forecast['yhat'][-24*20:], label=\"Prophet\")\n","plt.plot(range(2184-24*20,2184),pred_series[:24*20+23-23]+0.013913, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"a3VzMw4tIcni","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f12eed02-6a8c-4073-a0fa-1deecfc97850"},"source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","\n","def MAPEval(y_pred, y_true):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n","\n","def MSE(y_true, y_pred):\n","    return np.mean(np.square((y_true - y_pred)))\n","\n","def MAE(y_true, y_pred): \n","    return np.mean(np.abs((y_true - y_pred)))\n","\n","\n","\n","print('Transformer')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(pred_series[:24*20+23-23]+0.013913, target_series+0.013913), mean_squared_error(target_series+0.013913, pred_series[:24*20+23-23]+0.013913), mean_absolute_error(target_series+0.013913, pred_series[:24*20+23-23]+0.013913)))\n","\n","print('Informer')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(result, real[-24*20:]), mean_squared_error(real[-24*20:], result), mean_absolute_error(real[-24*20:], result)))\n","\n","print('ARIMA')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(ARIMA_forecast, df[\"y\"].iloc[-24*20:]), mean_squared_error(df[\"y\"].iloc[-24*20:], ARIMA_forecast), mean_absolute_error(df[\"y\"].iloc[-24*20:], ARIMA_forecast)))\n","\n","print('Prophet')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(forecast['yhat'][2184-24*20:],df[\"y\"][2184-24*20:]), mean_squared_error(df[\"y\"][2184-24*20:], forecast['yhat'][2184-24*20:]), mean_absolute_error(df[\"y\"][2184-24*20:], forecast['yhat'][2184-24*20:])))\n","\n","print('LSTMa')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(predict[-24*20:],real[-24*20:]),  mean_squared_error(real[-24*20:], predict[-24*20:]), mean_absolute_error(real[-24*20:], predict[-24*20:])))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Transformer\n","----------------------------------------\n","MAPE: 94.82817053794861 |\n","MSE: 0.0701213851571083 |\n","MAE : 0.16881214082241058\n","\n","Informer\n","----------------------------------------\n","MAPE: 133.7038386154826 |\n","MSE: 0.09066262448359584 |\n","MAE : 0.23463683846490693\n","\n","ARIMA\n","----------------------------------------\n","MAPE: 395.2096513473796 |\n","MSE: 0.44294929695453283 |\n","MAE : 0.5860668741422366\n","\n","Prophet\n","----------------------------------------\n","MAPE: 98.39737716882591 |\n","MSE: 0.05070705887048551 |\n","MAE : 0.182111803203062\n","\n","LSTMa\n","----------------------------------------\n","MAPE: 101.06254321532103 |\n","MSE: 0.05948132479904776 |\n","MAE : 0.18693528133021153\n","\n"]}]},{"cell_type":"code","metadata":{"id":"zqM44SO8XsUm"},"source":[""],"execution_count":null,"outputs":[]}]}