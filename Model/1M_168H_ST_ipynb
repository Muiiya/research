{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3"},"colab":{"name":"1M_168H_ST_ipynb","provenance":[],"collapsed_sections":[],"machine_shape":"hm"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"axF7OBsg-AJs"},"source":["#Transformer"]},{"cell_type":"code","metadata":{"id":"MiFdiUPY8CAr","colab":{"base_uri":"https://localhost:8080/"},"outputId":"0cf0369d-0084-46d6-d59a-5a0e334f6d0d"},"source":["from google.colab import drive\n","drive.mount('/content/drive') "],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"PtFKWnKP7mKd","colab":{"base_uri":"https://localhost:8080/","height":252},"outputId":"edef8cb1-6157-433f-c425-44875c779753"},"source":["# informer, ARIMA, Prophet, LSTMa와는 다른 형식의 CSV를 사용한다.(Version2)\n","\n","!pip install pandas\n","\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version2.csv', encoding='cp949')\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.1.5)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.19.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>날짜</th>\n","      <th>2021-07-01 0:00</th>\n","      <th>2021-07-01 1:00</th>\n","      <th>2021-07-01 2:00</th>\n","      <th>2021-07-01 3:00</th>\n","      <th>2021-07-01 4:00</th>\n","      <th>2021-07-01 5:00</th>\n","      <th>2021-07-01 6:00</th>\n","      <th>2021-07-01 7:00</th>\n","      <th>2021-07-01 8:00</th>\n","      <th>2021-07-01 9:00</th>\n","      <th>2021-07-01 10:00</th>\n","      <th>2021-07-01 11:00</th>\n","      <th>2021-07-01 12:00</th>\n","      <th>2021-07-01 13:00</th>\n","      <th>2021-07-01 14:00</th>\n","      <th>2021-07-01 15:00</th>\n","      <th>2021-07-01 16:00</th>\n","      <th>2021-07-01 17:00</th>\n","      <th>2021-07-01 18:00</th>\n","      <th>2021-07-01 19:00</th>\n","      <th>2021-07-01 20:00</th>\n","      <th>2021-07-01 21:00</th>\n","      <th>2021-07-01 22:00</th>\n","      <th>2021-07-01 23:00</th>\n","      <th>2021-07-02 0:00</th>\n","      <th>2021-07-02 1:00</th>\n","      <th>2021-07-02 2:00</th>\n","      <th>2021-07-02 3:00</th>\n","      <th>2021-07-02 4:00</th>\n","      <th>2021-07-02 5:00</th>\n","      <th>2021-07-02 6:00</th>\n","      <th>2021-07-02 7:00</th>\n","      <th>2021-07-02 8:00</th>\n","      <th>2021-07-02 9:00</th>\n","      <th>2021-07-02 10:00</th>\n","      <th>2021-07-02 11:00</th>\n","      <th>2021-07-02 12:00</th>\n","      <th>2021-07-02 13:00</th>\n","      <th>2021-07-02 14:00</th>\n","      <th>...</th>\n","      <th>2021-07-29 9:00</th>\n","      <th>2021-07-29 10:00</th>\n","      <th>2021-07-29 11:00</th>\n","      <th>2021-07-29 12:00</th>\n","      <th>2021-07-29 13:00</th>\n","      <th>2021-07-29 14:00</th>\n","      <th>2021-07-29 15:00</th>\n","      <th>2021-07-29 16:00</th>\n","      <th>2021-07-29 17:00</th>\n","      <th>2021-07-29 18:00</th>\n","      <th>2021-07-29 19:00</th>\n","      <th>2021-07-29 20:00</th>\n","      <th>2021-07-29 21:00</th>\n","      <th>2021-07-29 22:00</th>\n","      <th>2021-07-29 23:00</th>\n","      <th>2021-07-30 0:00</th>\n","      <th>2021-07-30 1:00</th>\n","      <th>2021-07-30 2:00</th>\n","      <th>2021-07-30 3:00</th>\n","      <th>2021-07-30 4:00</th>\n","      <th>2021-07-30 5:00</th>\n","      <th>2021-07-30 6:00</th>\n","      <th>2021-07-30 7:00</th>\n","      <th>2021-07-30 8:00</th>\n","      <th>2021-07-30 9:00</th>\n","      <th>2021-07-30 10:00</th>\n","      <th>2021-07-30 11:00</th>\n","      <th>2021-07-30 12:00</th>\n","      <th>2021-07-30 13:00</th>\n","      <th>2021-07-30 14:00</th>\n","      <th>2021-07-30 15:00</th>\n","      <th>2021-07-30 16:00</th>\n","      <th>2021-07-30 17:00</th>\n","      <th>2021-07-30 18:00</th>\n","      <th>2021-07-30 19:00</th>\n","      <th>2021-07-30 20:00</th>\n","      <th>2021-07-30 21:00</th>\n","      <th>2021-07-30 22:00</th>\n","      <th>2021-07-30 23:00</th>\n","      <th>2021-07-31 0:00</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>종가</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>0.124688</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>-0.124533</td>\n","      <td>0.124688</td>\n","      <td>-0.249066</td>\n","      <td>0.124844</td>\n","      <td>0.124844</td>\n","      <td>-0.124688</td>\n","      <td>...</td>\n","      <td>0.255428</td>\n","      <td>1.019108</td>\n","      <td>-0.504414</td>\n","      <td>0.253485</td>\n","      <td>-0.126422</td>\n","      <td>-0.126582</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>0.253485</td>\n","      <td>-0.505689</td>\n","      <td>-0.505689</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","      <td>-0.127065</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 722 columns</p>\n","</div>"],"text/plain":["   날짜  2021-07-01 0:00  ...  2021-07-30 23:00  2021-07-31 0:00\n","0  종가         0.124688  ...         -0.127065        -0.127065\n","\n","[1 rows x 722 columns]"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"Z3_TiLg07mKk","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c195b189-a85b-4e6b-e184-ba57f21dbbae"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1 entries, 0 to 0\n","Columns: 722 entries, 날짜 to 2021-07-31 0:00\n","dtypes: float64(721), object(1)\n","memory usage: 5.8+ KB\n"]}]},{"cell_type":"code","metadata":{"id":"m6hUoeDr7mKm","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e37e823c-6170-4f9c-f14b-e708a9aca0cf"},"source":["data_start_date = df.columns[1]\n","data_end_date = df.columns[-1]\n","print('Data ranges from %s to %s' % (data_start_date, data_end_date))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Data ranges from 2021-07-01 0:00 to 2021-07-31 0:00\n"]}]},{"cell_type":"markdown","metadata":{"id":"-SsCTE-O7mKo"},"source":["### Train and Validation Series Partioning\n"]},{"cell_type":"code","metadata":{"id":"OYUANKZx7mKs","colab":{"base_uri":"https://localhost:8080/"},"outputId":"aaa31cb3-c225-4c61-9f35-8843e2c08bd9"},"source":["######################## CHECK #########################\n","# 기준시간이 hour이므로, 7일 예측한다면 7*24로 설정한다.\n","\n","\n","from datetime import timedelta\n","\n","pred_steps = 24*7+23\n","pred_length=timedelta(hours = pred_steps)\n","\n","first_day = pd.to_datetime(data_start_date)\n","last_day = pd.to_datetime(data_end_date)\n","\n","val_pred_start = last_day - pred_length + timedelta(1)\n","val_pred_end = last_day\n","print(val_pred_start, val_pred_end)\n","\n","train_pred_start = val_pred_start - pred_length\n","train_pred_end = val_pred_start - timedelta(days=1)\n","print(train_pred_start, train_pred_end)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-07-24 01:00:00 2021-07-31 00:00:00\n","2021-07-16 02:00:00 2021-07-23 01:00:00\n"]}]},{"cell_type":"code","metadata":{"id":"Yc-Nwfy07mKt","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d687d1ec-3e8b-452e-fba9-3c8e57bdf48a"},"source":["enc_length = train_pred_start - first_day\n","print(enc_length)\n","\n","train_enc_start = first_day\n","train_enc_end = train_enc_start + enc_length - timedelta(1)\n","\n","val_enc_start = train_enc_start + pred_length\n","val_enc_end = val_enc_start + enc_length - timedelta(1)\n","print(train_enc_start, train_enc_end)\n","print(val_enc_start, val_enc_end)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15 days 02:00:00\n","2021-07-01 00:00:00 2021-07-15 02:00:00\n","2021-07-08 23:00:00 2021-07-23 01:00:00\n"]}]},{"cell_type":"code","metadata":{"id":"_w1ZjY4o7mKv","colab":{"base_uri":"https://localhost:8080/"},"outputId":"08177c2d-8f7b-4f9f-f793-f3cf483c5204"},"source":["# 최종적으로 Val prediction 구간을 예측하게 된다.\n","\n","print('Train encoding:', train_enc_start, '-', train_enc_end)\n","print('Train prediction:', train_pred_start, '-', train_pred_end, '\\n')\n","print('Val encoding:', val_enc_start, '-', val_enc_end)\n","print('Val prediction:', val_pred_start, '-', val_pred_end)\n","\n","print('\\nEncoding interval:', enc_length.days)\n","print('Prediction interval:', pred_length.days)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train encoding: 2021-07-01 00:00:00 - 2021-07-15 02:00:00\n","Train prediction: 2021-07-16 02:00:00 - 2021-07-23 01:00:00 \n","\n","Val encoding: 2021-07-08 23:00:00 - 2021-07-23 01:00:00\n","Val prediction: 2021-07-24 01:00:00 - 2021-07-31 00:00:00\n","\n","Encoding interval: 15\n","Prediction interval: 7\n"]}]},{"cell_type":"markdown","metadata":{"id":"5k8nzx9H7mKw"},"source":["## Data Formatting"]},{"cell_type":"code","metadata":{"id":"YYDpaFD47mKx","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f2b0541d-a43c-463c-b2ca-e31fedae549d"},"source":["#np.log 1p 해준다.\n","\n","date_to_index = pd.Series(index=pd.Index([pd.to_datetime(c) for c in df.columns[1:]]),\n","                          data=[i for i in range(len(df.columns[1:]))])\n","\n","series_array = df[df.columns[1:]].values.astype(np.float32)\n","print(series_array)\n","\n","def get_time_block_series(series_array, date_to_index, start_date, end_date):\n","    inds = date_to_index[start_date:end_date]\n","    return series_array[:,inds]\n","\n","def transform_series_encode(series_array):\n","    series_array = np.nan_to_num(series_array) # filling NaN with 0\n","    series_mean = series_array.mean(axis=1).reshape(-1,1)\n","    series_array = series_array - series_mean\n","    series_array = series_array.reshape((series_array.shape[0],series_array.shape[1], 1))\n","\n","    return series_array, series_mean\n","\n","def transform_series_decode(series_array, encode_series_mean):\n","    series_array = np.nan_to_num(series_array) # filling NaN with 0\n","    series_array = series_array - encode_series_mean\n","    series_array = series_array.reshape((series_array.shape[0],series_array.shape[1], 1))    \n","    \n","    return series_array"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.12468828  0.12468828  0.12468828  0.12468828  0.12468828  0.12468828\n","   0.12468828  0.12468828  0.12468828  0.12468828  0.12468828  0.12468828\n","   0.12468828 -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533    0.12468828 -0.249066\n","   0.12484395  0.12484395 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828 -0.12468828\n","  -0.12468828 -0.12468828 -0.12468828 -0.12468828  0.37453184  0.24875621\n","   0.24875621  0.24875621 -0.12406948 -0.24844721 -0.24844721 -0.24844721\n","  -0.24844721 -0.24844721 -0.24844721 -0.24844721 -0.24844721 -0.24844721\n","  -0.24844721 -0.24844721 -0.24844721 -0.24844721 -0.24844721 -0.24844721\n","  -0.24844721 -0.24844721 -0.24844721 -0.24844721  1.120797   -0.12315271\n","  -0.3699137  -0.3699137   0.12376238  0.12360939  0.12360939  0.12360939\n","   0.12360939  0.12360939  0.12360939  0.12360939  0.12360939  0.12360939\n","   0.12360939  0.12360939  0.12360939  0.12360939  0.12360939  0.12360939\n","   0.12360939  0.12360939  0.12360939  0.12360939 -0.49382716 -0.49382716\n","  -0.49382716 -0.49382716 -0.24813896  0.24875621  0.24875621  0.24875621\n","   0.24875621  0.24875621  0.24875621  0.24875621  0.24875621  0.24875621\n","   0.24875621  0.24875621  0.24875621  0.24875621  0.24875621  0.24875621\n","   0.24875621  0.24875621  0.24875621  0.24875621  0.24875621  0.24875621\n","  -0.12406948 -0.24844721 -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -0.124533   -0.124533\n","  -0.124533   -0.124533   -0.124533   -0.124533   -1.2468828  -1.2468828\n","  -0.12626262  0.12642226  0.12642226  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.25252524  0.25252524\n","   0.25252524  0.25252524  0.25252524  0.25252524  0.7556675  -0.375\n","  -0.375       0.12547052 -0.12531328 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052  0.5025126   0.125\n","  -0.12484395 -0.12484395 -0.12484395 -0.125      -0.125      -0.125\n","  -0.125      -0.125      -0.125      -0.125      -0.125      -0.125\n","  -0.125      -0.125      -0.125      -0.125      -0.125      -0.125\n","  -0.125      -0.125      -0.125      -0.125      -0.62578225 -0.62578225\n","  -0.62578225 -0.62578225 -0.12594458  0.1261034   0.1261034   0.1261034\n","   0.1261034   0.1261034   0.1261034   0.1261034   0.1261034   0.1261034\n","   0.1261034   0.1261034   0.1261034   0.1261034   0.1261034   0.1261034\n","   0.1261034   0.1261034   0.1261034   0.1261034   0.6297229   0.12515645\n","  -0.125       0.2503129   0.2503129   0.37453184  0.37453184  0.37453184\n","   0.37453184  0.37453184  0.37453184  0.37453184  0.37453184  0.37453184\n","   0.37453184  0.37453184  0.37453184  0.37453184  0.37453184  0.37453184\n","   0.37453184  0.37453184  0.37453184  0.37453184 -0.8706468  -0.8706468\n","  -0.12547052  0.12562814  0.12562814  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052  0.12547052  0.12547052\n","   0.12547052  0.12547052  0.12547052  0.12547052 -1.0025063  -1.0025063\n","  -0.12658228  0.1267427   0.1267427   0.1267427   0.1267427   0.1267427\n","   0.1267427   0.1267427   0.1267427   0.1267427   0.1267427   0.1267427\n","   0.1267427   0.1267427   0.1267427   0.1267427   0.1267427   0.1267427\n","   0.1267427   0.1267427   0.1267427   0.1267427  -0.5063291   0.12722646\n","   0.12706481 -0.2538071  -0.2538071   0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646 -0.12706481 -0.12706481\n","  -0.12706481 -0.12706481 -0.12706481  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.12722646  0.12722646\n","   0.12722646  0.12722646  0.12722646  0.12722646  0.88945365  0.25188917\n","   0.25188917 -0.12562814  0.25157234 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052 -0.12547052\n","  -0.12547052 -0.12547052 -0.12547052 -0.12547052  0.12562814 -0.12547052\n","  -0.12547052 -0.12562814 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.12578617\n","  -0.12578617 -0.12578617 -0.12578617 -0.12578617 -0.25188917 -0.25252524\n","  -0.12658228  0.1267427   0.1267427  -0.25316456 -0.25316456 -0.25316456\n","  -0.25316456 -0.25316456 -0.25316456 -0.25316456 -0.25316456 -0.25316456\n","  -0.25316456 -0.25316456 -0.25316456 -0.25316456 -0.25316456 -0.25316456\n","  -0.25316456 -0.25316456 -0.25316456 -0.25316456  0.12690355  0.1267427\n","   0.1267427   0.1267427  -0.25316456 -0.12690355 -0.12690355 -0.12690355\n","  -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355\n","  -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355\n","  -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12690355 -0.12706481\n","  -0.12706481 -0.12722646 -0.25477707  0.25542784  0.25542784  0.25542784\n","   0.25542784  0.25542784  0.25542784  0.25542784  0.25542784  0.25542784\n","   0.25542784  0.25542784  0.25542784  0.25542784  0.25542784  0.25542784\n","   0.25542784  0.25542784  0.25542784  0.25542784  1.0191083  -0.5044136\n","   0.2534854  -0.12642226 -0.12658228  0.2534854   0.2534854   0.2534854\n","   0.2534854   0.2534854   0.2534854   0.2534854   0.2534854   0.2534854\n","   0.2534854   0.2534854   0.2534854   0.2534854   0.2534854   0.2534854\n","   0.2534854   0.2534854   0.2534854   0.2534854  -0.505689   -0.505689\n","  -0.12706481 -0.12706481 -0.12706481 -0.12706481 -0.12706481 -0.12706481\n","  -0.12706481 -0.12706481 -0.12706481 -0.12706481 -0.12706481 -0.12706481\n","  -0.12706481]]\n"]}]},{"cell_type":"code","metadata":{"id":"feu8hw4N7mKy"},"source":["# sample of series from train_enc_start to train_enc_end  \n","encoder_input_data = get_time_block_series(series_array, date_to_index, \n","                                           train_enc_start, train_enc_end)\n","\n","\n","encoder_input_data, encode_series_mean = transform_series_encode(encoder_input_data)\n","\n","\n","# sample of series from train_pred_start to train_pred_end \n","decoder_target_data = get_time_block_series(series_array, date_to_index, \n","                                            train_pred_start, train_pred_end)\n","\n","decoder_target_data = transform_series_decode(decoder_target_data, encode_series_mean)\n","\n","\n","encoder_input_val_data = get_time_block_series(series_array, date_to_index, val_enc_start, val_enc_end)\n","encoder_input_val_data, encode_series_mean = transform_series_encode(encoder_input_val_data)\n","\n","decoder_target_val_data = get_time_block_series(series_array, date_to_index, val_pred_start, val_pred_end)\n","decoder_target_val_data = transform_series_decode(decoder_target_val_data, encode_series_mean)\n","\n","#for d in encoder_input_data:\n","#    print(d.shape)\n","\n","#train_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_data, decoder_target_data))\n","#train_dataset = train_dataset.batch(54)\n","\n","#for d in train_dataset:\n","#    #print(f'features:{features_tensor} target:{target_tensor}')\n","#    print(\"-----\")\n","#    print(d)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xZe8F9KP7mKz"},"source":["### Transformer model"]},{"cell_type":"code","metadata":{"id":"2HymE_Lx7mK1","colab":{"base_uri":"https://localhost:8080/"},"outputId":"1dbca622-e623-490a-c256-231b7b26c524"},"source":["!pip install tensorflow_datasets\n","\n","import tensorflow_datasets as tfds\n","import tensorflow as tf\n","\n","import time\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow_datasets in /usr/local/lib/python3.7/dist-packages (4.0.1)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (5.2.2)\n","Requirement already satisfied: termcolor in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.1.0)\n","Requirement already satisfied: attrs>=18.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (21.2.0)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.12.0)\n","Requirement already satisfied: promise in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (2.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.15.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (4.62.2)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (3.17.3)\n","Requirement already satisfied: dm-tree in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.1.6)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (2.23.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.19.5)\n","Requirement already satisfied: dill in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.3.4)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (0.16.0)\n","Requirement already satisfied: tensorflow-metadata in /usr/local/lib/python3.7/dist-packages (from tensorflow_datasets) (1.2.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (2021.5.30)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->tensorflow_datasets) (3.0.4)\n","Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.7/dist-packages (from importlib-resources->tensorflow_datasets) (3.5.0)\n","Requirement already satisfied: googleapis-common-protos<2,>=1.52.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-metadata->tensorflow_datasets) (1.53.0)\n"]}]},{"cell_type":"code","metadata":{"id":"p9HiWaBB7mK3"},"source":["train_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_data, decoder_target_data))\n","val_dataset = tf.data.Dataset.from_tensor_slices((encoder_input_val_data, decoder_target_val_data))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mp70_nYj7mK3"},"source":["### position\n","def get_angles(pos, i, d_model):\n","    angle_rates = 1 / np.power(10000, (2 * (i//2)) / np.float32(d_model))\n","    return pos * angle_rates\n","\n","\n","def positional_encoding(position, d_model):\n","    angle_rads = get_angles(np.arange(position)[:, np.newaxis],\n","                            np.arange(d_model)[np.newaxis, :],\n","                            d_model)\n","  \n","    # apply sin to even indices in the array; 2i\n","    sines = np.sin(angle_rads[:, 0::2])\n","  \n","    # apply cos to odd indices in the array; 2i+1\n","    cosines = np.cos(angle_rads[:, 1::2])\n","  \n","    pos_encoding = np.concatenate([sines, cosines], axis=-1)\n","  \n","    pos_encoding = pos_encoding[np.newaxis, ...]\n","    \n","    return tf.cast(pos_encoding, dtype=tf.float32)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yqDIhFln7mK3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6211c5b9-766c-4842-a85c-258e70b34f8a"},"source":["# Masking\n","def create_padding_mask(seq):\n","    seq = tf.cast(tf.math.equal(seq, 0), tf.float32)\n","  \n","    # add extra dimensions so that we can add the padding\n","    # to the attention logits.\n","    return seq[:, tf.newaxis, tf.newaxis, :]  # (batch_size, 1, 1, seq_len)\n","\n","x = tf.constant([[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]])\n","print(create_padding_mask(x))\n","\n","def create_look_ahead_mask(size):\n","    mask = 1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)\n","    return mask  # (seq_len, seq_len)\n","\n","x = tf.random.uniform((1, 4))\n","temp = create_look_ahead_mask(x.shape[1])\n","print(temp)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[[[0. 0. 1. 1. 0.]]]\n","\n","\n"," [[[0. 0. 0. 1. 1.]]]\n","\n","\n"," [[[1. 1. 1. 0. 0.]]]], shape=(3, 1, 1, 5), dtype=float32)\n","tf.Tensor(\n","[[0. 1. 1. 1.]\n"," [0. 0. 1. 1.]\n"," [0. 0. 0. 1.]\n"," [0. 0. 0. 0.]], shape=(4, 4), dtype=float32)\n"]}]},{"cell_type":"code","metadata":{"id":"bZhflMS47mK4"},"source":["# Scaled dot product attention\n","def scaled_dot_product_attention(q, k, v, mask):\n","    \"\"\"Calculate the attention weights.\n","      q, k, v must have matching leading dimensions.\n","      The mask has different shapes depending on its type(padding or look ahead) \n","      but it must be broadcastable for addition.\n","  \n","    Args:\n","        q: query shape == (..., seq_len_q, depth)\n","        k: key shape == (..., seq_len_k, depth)\n","        v: value shape == (..., seq_len_v, depth)\n","        mask: Float tensor with shape broadcastable \n","            to (..., seq_len_q, seq_len_k). Defaults to None.\n","    \n","    Returns:\n","        output, attention_weights\n","    \"\"\"\n","\n","    matmul_qk = tf.matmul(q, k, transpose_b=True)  # (..., seq_len_q, seq_len_k)\n","  \n","    # scale matmul_qk\n","    dk = tf.cast(tf.shape(k)[-1], tf.float32)\n","    scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n","\n","    # add the mask to the scaled tensor.\n","    if mask is not None:\n","        scaled_attention_logits += (mask * -1e9)\n","\n","    # softmax is normalized on the last axis (seq_len_k) so that the scores\n","    # add up to 1.\n","    attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)  # (..., seq_len_q, seq_len_k)\n","\n","    output = tf.matmul(attention_weights, v)  # (..., seq_len_v, depth)\n","\n","    return output, attention_weights"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wTun4caK7mK7","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c485d92f-a0c5-4d1f-ea94-d7529ee2c6e1"},"source":["# scaled dot product attetion test\n","def print_out(q, k, v):\n","    temp_out, temp_attn = scaled_dot_product_attention(\n","        q, k, v, None)\n","    print ('Attention weights are:')\n","    print (temp_attn)\n","    print ('Output is:')\n","    print (temp_out)\n","\n","np.set_printoptions(suppress=True)\n","\n","temp_k = tf.constant([[10,0,0],\n","                      [0,10,0],\n","                      [0,0,10],\n","                      [0,0,10]], dtype=tf.float32)  # (4, 3)\n","\n","temp_v = tf.constant([[   1,0],\n","                      [  10,0],\n","                      [ 100,5],\n","                      [1000,6]], dtype=tf.float32)  # (4, 3)\n","\n","# This `query` aligns with the second `key`,\n","# so the second `value` is returned.\n","temp_q = tf.constant([[0, 10, 0]], dtype=tf.float32)  # (1, 3)\n","print_out(temp_q, temp_k, temp_v)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Attention weights are:\n","tf.Tensor([[0. 1. 0. 0.]], shape=(1, 4), dtype=float32)\n","Output is:\n","tf.Tensor([[10.  0.]], shape=(1, 2), dtype=float32)\n"]}]},{"cell_type":"code","metadata":{"id":"Tf9CrG-j7mK8"},"source":["# Multi Head Attention\n","\n","class MultiHeadAttention(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads):\n","        super(MultiHeadAttention, self).__init__()\n","        self.num_heads = num_heads\n","        self.d_model = d_model\n","    \n","        assert d_model % self.num_heads == 0\n","        \n","        self.depth = d_model // self.num_heads\n","        \n","        self.wq = tf.keras.layers.Dense(d_model)\n","        self.wk = tf.keras.layers.Dense(d_model)\n","        self.wv = tf.keras.layers.Dense(d_model)\n","        \n","        self.dense = tf.keras.layers.Dense(d_model)\n","        \n","    def split_heads(self, x, batch_size):\n","        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n","        return tf.transpose(x, perm=[0, 2, 1, 3])\n","    \n","    def call(self, v, k, q, mask):\n","        batch_size = tf.shape(q)[0]\n","        \n","        q = self.wq(q)\n","        k = self.wk(k)\n","        v = self.wv(v) # (batch_size, seq_len, d_model)\n","        \n","        q = self.split_heads(q, batch_size)\n","        k = self.split_heads(k, batch_size)\n","        v = self.split_heads(v, batch_size) #(batch_size, num_head, seq_len_v, depth)\n","        # scaled_attention.shape == (batch_size, num_heads, seq_len_v, depth)\n","        # attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)\n","        scaled_attention, attention_weights = scaled_dot_product_attention(\n","            q, k, v, mask)\n","    \n","        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])  # (batch_size, seq_len_v, num_heads, depth)\n","\n","        concat_attention = tf.reshape(scaled_attention, \n","                                      (batch_size, -1, self.d_model))  # (batch_size, seq_len_v, d_model)\n","\n","        output = self.dense(concat_attention)  # (batch_size, seq_len_v, d_model)\n","        \n","        return output, attention_weights\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vrKTDbzp7mK9","colab":{"base_uri":"https://localhost:8080/"},"outputId":"804d298b-9e29-41fc-ca9a-22f268351a18"},"source":["# multhead attention test\n","temp_mha = MultiHeadAttention(d_model=512, num_heads=8)\n","y = tf.random.uniform((1, 60, 512))  # (batch_size, encoder_sequence, d_model)\n","out, attn = temp_mha(y, k=y, q=y, mask=None)\n","out.shape, attn.shape\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([1, 60, 512]), TensorShape([1, 8, 60, 60]))"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"h4jCVAuU7mK-"},"source":["# activation – the activation function of encoder/decoder intermediate layer, relu or gelu (default=relu).\n","\n","# Point wise feed forward network\n","def point_wise_feed_forward_network(d_model, dff):\n","    return tf.keras.Sequential([\n","        tf.keras.layers.Dense(dff, activation='relu'),  # (batch_size, seq_len, dff)\n","        tf.keras.layers.Dense(d_model)  # (batch_size, seq_len, d_model)\n","    ])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kR78pzaU7mK_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"263949d1-b2c7-4344-c661-be803e4327ef"},"source":["# Point wise feed forward network test\n","sample_ffn = point_wise_feed_forward_network(512, 2048)\n","sample_ffn(tf.random.uniform((64, 50, 512))).shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 50, 512])"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"0JHQxZvp7mK_"},"source":["### Encoder and Decoder"]},{"cell_type":"code","metadata":{"id":"y_ja4MiQ7mLC"},"source":["# Encoder Layer\n","class EncoderLayer(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads, dff, rate=0.1):\n","        super(EncoderLayer, self).__init__()\n","        \n","        self.mha = MultiHeadAttention(d_model, num_heads)\n","        self.ffn = point_wise_feed_forward_network(d_model, dff)\n","        \n","        self.layernorm1 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm2 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","    \n","        self.dropout1 = tf.keras.layers.Dropout(rate)\n","        self.dropout2 = tf.keras.layers.Dropout(rate)\n","    \n","    def call(self, x, training, mask):\n","        attn_output, _ = self.mha(x, x, x, mask) # (batch_size, input_seq_len, d_model)\n","        attn_output = self.dropout1(attn_output, training=training)\n","        out1 = self.layernorm1(x + attn_output)\n","        \n","        ffn_output = self.ffn(out1) # (batch_size, input_seq_len, d_model)\n","        ffn_output = self.dropout2(ffn_output, training=training)\n","        out2 = self.layernorm2(out1 + ffn_output) # (batch_size, input_seq_len, d_model)\n","        \n","        return out2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"msUwz7Bx7mLD","colab":{"base_uri":"https://localhost:8080/"},"outputId":"85cbe9bc-3e3f-4c91-9eca-d1d557f2cacf"},"source":["# Encoder Layer Test\n","sample_encoder_layer = EncoderLayer(512, 8, 2048)\n","\n","sample_encoder_layer_output = sample_encoder_layer(\n","    tf.random.uniform((64, 43, 512)), False, None)\n","\n","sample_encoder_layer_output.shape  # (batch_size, input_seq_len, d_model)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 43, 512])"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"V-c2G1Cp7mLE"},"source":["# Decoder Layer\n","class DecoderLayer(tf.keras.layers.Layer):\n","    def __init__(self, d_model, num_heads, dff, rate=0.1):\n","        super(DecoderLayer, self).__init__()\n","        \n","        self.mha1 = MultiHeadAttention(d_model, num_heads)\n","        self.mha2 = MultiHeadAttention(d_model, num_heads)\n","        \n","        self.ffn = point_wise_feed_forward_network(d_model, dff)\n","        \n","        self.layernorm1 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm2 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","        self.layernorm3 = tf.keras.layers.BatchNormalization(epsilon=1e-6)\n","    \n","        self.dropout1 = tf.keras.layers.Dropout(rate)\n","        self.dropout2 = tf.keras.layers.Dropout(rate)\n","        self.dropout3 = tf.keras.layers.Dropout(rate)\n","                                            \n","    def call(self, x, enc_output, training,\n","            look_ahead_mask, padding_mask):\n","        # enc_output.shape == (batch_size, input_seq_len, d_model)\n","        attn1, attn_weights_block1 = self.mha1(x, x, x, look_ahead_mask)\n","        attn1 = self.dropout1(attn1, training=training)\n","        out1 = self.layernorm1(attn1 + x)\n","        \n","        attn2, attn_weights_block2 = self.mha2(\n","            enc_output, enc_output, out1, padding_mask)\n","        attn2 = self.dropout2(attn2, training=training)\n","        out2 = self.layernorm2(attn2 + out1)\n","        \n","        ffn_output = self.ffn(out2)\n","        ffn_output = self.dropout3(ffn_output, training=training)\n","        out3 = self.layernorm3(ffn_output + out2)\n","        \n","        return out3, attn_weights_block1, attn_weights_block2\n","    \n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s2HBk8KS7mLE","colab":{"base_uri":"https://localhost:8080/"},"outputId":"79b3ed32-5ea0-4a30-bf7f-139dd42aab87"},"source":["# Decoder layer test\n","sample_decoder_layer = DecoderLayer(512, 8, 2048)\n","\n","sample_decoder_layer_output, _, _ = sample_decoder_layer(\n","    tf.random.uniform((64, 50, 512)), sample_encoder_layer_output, \n","    False, None, None)\n","\n","sample_decoder_layer_output.shape  # (batch_size, target_seq_len, d_model)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 50, 512])"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"-X496L3Y7mLF"},"source":["# Encoder\n","\n","class Encoder(tf.keras.layers.Layer):\n","    def __init__(self, num_layers, d_model, num_heads, dff, max_len=5000,\n","                rate=0.1):\n","        super(Encoder, self).__init__()\n","        self.d_model = d_model\n","        self.num_layers = num_layers\n","        self.embedding = tf.keras.layers.Dense(d_model, use_bias=False)\n","        self.pos_encoding = positional_encoding(max_len, self.d_model)\n","        \n","        self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate) \n","                       for _ in range(num_layers)]\n","        \n","        self.dropout = tf.keras.layers.Dropout(rate)\n","        \n","    def call(self, x, training, mask):\n","        seq_len = tf.shape(x)[1]\n","        \n","        # adding embedding and position encoding\n","        x = self.embedding(x)\n","        # (batch_size, input_seq_len, d_model)\n","        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        x += self.pos_encoding[:, :seq_len, :]\n","        \n","        x = self.dropout(x, training=training)\n","        \n","        for i in range(self.num_layers):\n","            x = self.enc_layers[i](x, training, mask)\n","        \n","        return x\n","                          "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YSO73qPR7mLF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a84df811-638a-4595-d999-39fe2c3e397b"},"source":["sample_encoder = Encoder(num_layers=2, d_model=512, num_heads=8, \n","                         dff=2048)\n","\n","sample_encoder_output = sample_encoder(tf.random.uniform((64, 62,1)), \n","                                       training=False, mask=None)\n","\n","print (sample_encoder_output.shape)  # (batch_size, input_seq_len, d_model)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(64, 62, 512)\n"]}]},{"cell_type":"code","metadata":{"id":"iApaMNvC7mLG"},"source":["# Decoder\n","class Decoder(tf.keras.layers.Layer):\n","    def __init__(self, num_layers, d_model, num_heads, dff, max_len=5000, rate=0.1):\n","        super(Decoder, self).__init__()\n","        \n","        self.d_model = d_model\n","        self.num_layers = num_layers\n","        \n","        self.embedding = tf.keras.layers.Dense(d_model, use_bias=False)\n","        self.pos_encoding = positional_encoding(max_len, self.d_model)\n","    \n","        self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate) \n","                            for _ in range(num_layers)]\n","        self.dropout = tf.keras.layers.Dropout(rate)\n","        \n","    def call(self, x, enc_output, training,\n","                look_ahead_mask, padding_mask):\n","        \n","        seq_len = tf.shape(x)[1]\n","        attention_weights = {}\n","        \n","        x = self.embedding(x)\n","        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        x += self.pos_encoding[:, :seq_len, :]\n","        \n","        x = self.dropout(x, training=training)\n","        \n","        for i in range(self.num_layers):\n","            x, block1, block2 = self.dec_layers[i](x, enc_output, training,\n","                                                  look_ahead_mask, padding_mask)\n","            attention_weights['decoder_layer{}_block1'.format(i+1)] = block1\n","            attention_weights['decoder_layer{}_block2'.format(i+1)] = block2\n","            \n","        \n","        \n","        return x, attention_weights\n","    \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lyz4sJBn7mLG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"df0fbbe4-0fa1-4142-e9ff-2ac91ce9ace6"},"source":["sample_decoder = Decoder(num_layers=2, d_model=512, num_heads=8, \n","                         dff=2048)\n","\n","output, attn = sample_decoder(tf.random.uniform((64, 26,3)), \n","                              enc_output=sample_encoder_output, \n","                              training=False, look_ahead_mask=None, \n","                              padding_mask=None)\n","\n","output.shape, attn['decoder_layer2_block2'].shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([64, 26, 512]), TensorShape([64, 8, 26, 62]))"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"cDMZbb2D7mLH"},"source":["### Transfomer for TS\n"]},{"cell_type":"code","metadata":{"id":"3Wff4gY-7mLH"},"source":["class Transformer(tf.keras.Model):\n","    def __init__(self, num_layers, d_model, num_heads, dff, out_dim, max_len=5000,\n","                rate=0.1):\n","        super(Transformer, self).__init__()\n","        \n","        self.encoder = Encoder(num_layers, d_model, num_heads, dff,\n","                              max_len, rate)\n","        self.decoder = Decoder(num_layers, d_model, num_heads, dff,\n","                               max_len, rate)\n","        \n","        self.final_layer = tf.keras.layers.Dense(out_dim)\n","        \n","    def call(self, inp, tar, training, enc_padding_mask,\n","             look_ahead_mask, dec_padding_mask):\n","        enc_output = self.encoder(inp, training, enc_padding_mask)\n","        \n","        dec_output, attention_weights = self.decoder(\n","            tar, enc_output, training, look_ahead_mask, dec_padding_mask)\n","        final_output = self.final_layer(dec_output)\n","        \n","        return final_output, attention_weights\n","    \n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zy2jyCC27mLH","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4b5ce557-49ef-4f94-c9dc-a7b537399efb"},"source":["sample_transformer = Transformer(\n","    num_layers=2, d_model=512, num_heads=8, dff=2048, \n","    out_dim=1)\n","\n","temp_input = tf.random.uniform((64, 62,1))\n","temp_target = tf.random.uniform((64, 23,1))\n","\n","fn_out, _ = sample_transformer(temp_input, temp_target,training=False, \n","                               enc_padding_mask=None, \n","                               look_ahead_mask=None,\n","                               dec_padding_mask=None)\n","\n","fn_out.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 23, 1])"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"vkBfkgGy7mLI"},"source":["# Set hyperparameters\n","# 트랜스포머 기준으로 바꿔볼까? \n","# d_model – the number of expected features in the encoder/decoder inputs (default=512).\n","# nhead – the number of heads in the multiheadattention models (default=8).\n","# num_encoder_layers – the number of sub-encoder-layers in the encoder & decoder (default=6).\n","# num_decoder_layers – the number of sub-decoder-layers in the decoder (default=6).\n","# dff(dim_feedforward) – the dimension of the feedforward network model (default=2048).\n","# dropout – the dropout value (default=0.1).\n","\n","\n","num_layers = 1\n","d_model = 64\n","dff = 256\n","num_heads = 4\n","\n","dropout_rate = 0.1\n","input_sequence_length = 720-(24*7+23) # Length of the sequence used by the encoder\n","target_sequence_length = 24*7+23 # Length of the sequence predicted by the decoder\n","batch_size = 2*11\n","\n","train_dataset = train_dataset.batch(batch_size)\n","val_dataset = val_dataset.batch(batch_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dwNIQKry7mLI"},"source":["# Optimizizer\n","class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n","    def __init__(self, d_model, warmup_steps=4000):\n","        super(CustomSchedule, self).__init__()\n","    \n","        self.d_model = d_model\n","        self.d_model = tf.cast(self.d_model, tf.float32)\n","\n","        self.warmup_steps = warmup_steps\n","    \n","    def __call__(self, step):\n","        arg1 = tf.math.rsqrt(step)\n","        arg2 = step * (self.warmup_steps ** -1.5)\n","    \n","        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EHuh2wWR7mLI"},"source":["learning_rate = CustomSchedule(64)\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, \n","                                     epsilon=1e-9)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftwg7b_Z7mLI","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"86e2439a-2110-4506-e4f5-df4d22481d72"},"source":["temp_learning_rate_schedule = CustomSchedule(512)\n","\n","plt.plot(temp_learning_rate_schedule(tf.range(40000, dtype=tf.float32)))\n","plt.ylabel(\"Learning Rate\")\n","plt.xlabel(\"Train Step\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Train Step')"]},"metadata":{},"execution_count":33},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Tn59NBXK7mLI"},"source":["# Loss and metrics\n","loss_object = tf.keras.losses.MeanAbsoluteError()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0BwT16Z77mLJ"},"source":["def loss_function(real, pred):\n","    mask = tf.math.logical_not(tf.math.equal(real, 0))\n","    loss_ = loss_object(real, pred)\n","\n","    mask = tf.cast(mask, dtype=loss_.dtype)\n","    loss_ *= mask\n","  \n","    return tf.reduce_mean(loss_)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vlFkoDfS7mLJ"},"source":["train_loss = tf.keras.metrics.Mean(name='train_loss')\n","#train_accuracy = tf.keras.metrics.mean_absolute_error()\n","\n","test_loss = tf.keras.metrics.Mean(name='test_loss')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wpZb8zHP7mLJ"},"source":["# Training and checkpoint\n","transformer = Transformer(num_layers, d_model, num_heads, dff,\n","                          out_dim=1, rate=dropout_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"shPhCuBM7mLJ"},"source":["def create_masks(inp, tar):\n","    inp = inp.reshape()\n","    # Encoder padding mask\n","    enc_padding_mask = create_padding_mask(inp)\n","  \n","    # Used in the 2nd attention block in the decoder.\n","    # This padding mask is used to mask the encoder outputs.\n","    dec_padding_mask = create_padding_mask(inp)\n","  \n","    # Used in the 1st attention block in the decoder.\n","    # It is used to pad and mask future tokens in the input received by \n","    # the decoder.\n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    dec_target_padding_mask = create_padding_mask(tar)\n","    combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask)\n","  \n","    return enc_padding_mask, combined_mask, dec_padding_mask"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r9ENhH-s7mLK"},"source":["# check point\n","checkpoint_path = \"./checkpoints/train\"\n","\n","ckpt = tf.train.Checkpoint(transformer=transformer,\n","                           optimizer=optimizer)\n","\n","ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)\n","\n","# if a checkpoint exists, restore the latest checkpoint.\n","if ckpt_manager.latest_checkpoint:\n","    ckpt.restore(ckpt_manager.latest_checkpoint)\n","    print ('Latest checkpoint restored!!')\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zf4S65Ud7mLK"},"source":["# EPOCHS\n","EPOCHS=100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dN2lAMeP7mLK"},"source":["@tf.function\n","def train_step(inp, tar):\n","    last_inp = tf.expand_dims(inp[:,0,:],-1)\n","    tar_inp = tf.concat([last_inp, tar[:,:-1,:]], axis=1)\n","    tar_real = tar\n","  \n","    #enc_padding_mask, combined_mask, dec_padding_mask = create_masks(inp, tar_inp)\n","    #print(enc_padding_mask)\n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    \n","    with tf.GradientTape() as tape:\n","        predictions, _ = transformer(inp, tar_inp, \n","                                     True, \n","                                     None, \n","                                     look_ahead_mask, \n","                                     None)\n","        loss = loss_function(tar_real, predictions)\n","\n","    gradients = tape.gradient(loss, transformer.trainable_variables)    \n","    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n","  \n","    train_loss(loss)\n","    #train_accuracy(tar_real, predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aFzrcnAU7mLK"},"source":["@tf.function\n","def test_step(inp, tar):\n","    #print(inp)\n","    #print(tar)\n","    last_inp = tf.expand_dims(inp[:,0,:],-1)\n","    #print(last_inp)\n","    tar_inp = tf.concat([last_inp, tar[:,:-1,:]], axis=1)\n","    tar_real = tar\n","    \n","    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","    \n","    with tf.GradientTape() as tape:\n","        predictions, _ = transformer(inp, tar_inp, \n","                                     False, \n","                                     None, \n","                                     look_ahead_mask, \n","                                     None)\n","        loss = loss_function(tar_real, predictions)\n","\n","    gradients = tape.gradient(loss, transformer.trainable_variables)    \n","    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n","\n","    test_loss(loss)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"VU9sFkFu7mLL","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9fdf77f9-33d2-4f94-e3fb-8df26315cad9"},"source":["# Val_dataset을 돌려서 Val_prediction 구간을 예측한다\n","\n","for epoch in range(EPOCHS):\n","    start = time.time()\n","\n","    train_loss.reset_states()\n","    test_loss.reset_states()\n","    \n","    # validation:\n","    for (batch, (inp, tar)) in enumerate(val_dataset):\n","        #print(inp, tar)\n","        test_step(inp, tar)\n","        \n","    if (epoch + 1) % 5 == 0:\n","        ckpt_save_path = ckpt_manager.save()\n","        print ('Saving checkpoint for epoch {} at {}'.format(epoch+1,\n","                                                         ckpt_save_path))\n","    \n","    #print ('Epoch {} Train Loss {:.4f}'.format(epoch + 1, \n","                                                #train_loss.result())) \n","                                                #train_accuracy.result()))\n","    print ('Epoch {} Test Loss {:.4f}'.format(epoch + 1, \n","                                                test_loss.result())) \n","    print ('Time taken for 1 epoch: {} secs\\n'.format(time.time() - start))\n","    \n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1 Test Loss 1.1694\n","Time taken for 1 epoch: 2.9949965476989746 secs\n","\n","Epoch 2 Test Loss 1.1694\n","Time taken for 1 epoch: 0.011637210845947266 secs\n","\n","Epoch 3 Test Loss 1.1690\n","Time taken for 1 epoch: 0.010141611099243164 secs\n","\n","Epoch 4 Test Loss 1.1682\n","Time taken for 1 epoch: 0.009589195251464844 secs\n","\n","Saving checkpoint for epoch 5 at ./checkpoints/train/ckpt-1\n","Epoch 5 Test Loss 1.1670\n","Time taken for 1 epoch: 0.11392402648925781 secs\n","\n","Epoch 6 Test Loss 1.1653\n","Time taken for 1 epoch: 0.010464668273925781 secs\n","\n","Epoch 7 Test Loss 1.1633\n","Time taken for 1 epoch: 0.010537385940551758 secs\n","\n","Epoch 8 Test Loss 1.1609\n","Time taken for 1 epoch: 0.013438940048217773 secs\n","\n","Epoch 9 Test Loss 1.1580\n","Time taken for 1 epoch: 0.009082794189453125 secs\n","\n","Saving checkpoint for epoch 10 at ./checkpoints/train/ckpt-2\n","Epoch 10 Test Loss 1.1548\n","Time taken for 1 epoch: 0.10375738143920898 secs\n","\n","Epoch 11 Test Loss 1.1511\n","Time taken for 1 epoch: 0.010049581527709961 secs\n","\n","Epoch 12 Test Loss 1.1471\n","Time taken for 1 epoch: 0.017175912857055664 secs\n","\n","Epoch 13 Test Loss 1.1427\n","Time taken for 1 epoch: 0.012308835983276367 secs\n","\n","Epoch 14 Test Loss 1.1379\n","Time taken for 1 epoch: 0.009046792984008789 secs\n","\n","Saving checkpoint for epoch 15 at ./checkpoints/train/ckpt-3\n","Epoch 15 Test Loss 1.1328\n","Time taken for 1 epoch: 0.09699440002441406 secs\n","\n","Epoch 16 Test Loss 1.1272\n","Time taken for 1 epoch: 0.010156869888305664 secs\n","\n","Epoch 17 Test Loss 1.1214\n","Time taken for 1 epoch: 0.010982990264892578 secs\n","\n","Epoch 18 Test Loss 1.1152\n","Time taken for 1 epoch: 0.010562419891357422 secs\n","\n","Epoch 19 Test Loss 1.1086\n","Time taken for 1 epoch: 0.010480880737304688 secs\n","\n","Saving checkpoint for epoch 20 at ./checkpoints/train/ckpt-4\n","Epoch 20 Test Loss 1.1017\n","Time taken for 1 epoch: 0.0965116024017334 secs\n","\n","Epoch 21 Test Loss 1.0945\n","Time taken for 1 epoch: 0.010996580123901367 secs\n","\n","Epoch 22 Test Loss 1.0869\n","Time taken for 1 epoch: 0.01039576530456543 secs\n","\n","Epoch 23 Test Loss 1.0791\n","Time taken for 1 epoch: 0.009869575500488281 secs\n","\n","Epoch 24 Test Loss 1.0710\n","Time taken for 1 epoch: 0.011481046676635742 secs\n","\n","Saving checkpoint for epoch 25 at ./checkpoints/train/ckpt-5\n","Epoch 25 Test Loss 1.0626\n","Time taken for 1 epoch: 0.09775495529174805 secs\n","\n","Epoch 26 Test Loss 1.0540\n","Time taken for 1 epoch: 0.010686874389648438 secs\n","\n","Epoch 27 Test Loss 1.0450\n","Time taken for 1 epoch: 0.009563684463500977 secs\n","\n","Epoch 28 Test Loss 1.0357\n","Time taken for 1 epoch: 0.012168169021606445 secs\n","\n","Epoch 29 Test Loss 1.0261\n","Time taken for 1 epoch: 0.011064291000366211 secs\n","\n","Saving checkpoint for epoch 30 at ./checkpoints/train/ckpt-6\n","Epoch 30 Test Loss 1.0163\n","Time taken for 1 epoch: 0.10207438468933105 secs\n","\n","Epoch 31 Test Loss 1.0062\n","Time taken for 1 epoch: 0.009945869445800781 secs\n","\n","Epoch 32 Test Loss 0.9958\n","Time taken for 1 epoch: 0.011122465133666992 secs\n","\n","Epoch 33 Test Loss 0.9853\n","Time taken for 1 epoch: 0.010637283325195312 secs\n","\n","Epoch 34 Test Loss 0.9744\n","Time taken for 1 epoch: 0.01168680191040039 secs\n","\n","Saving checkpoint for epoch 35 at ./checkpoints/train/ckpt-7\n","Epoch 35 Test Loss 0.9633\n","Time taken for 1 epoch: 0.09903907775878906 secs\n","\n","Epoch 36 Test Loss 0.9518\n","Time taken for 1 epoch: 0.012651681900024414 secs\n","\n","Epoch 37 Test Loss 0.9400\n","Time taken for 1 epoch: 0.010590076446533203 secs\n","\n","Epoch 38 Test Loss 0.9280\n","Time taken for 1 epoch: 0.009987592697143555 secs\n","\n","Epoch 39 Test Loss 0.9158\n","Time taken for 1 epoch: 0.010413885116577148 secs\n","\n","Saving checkpoint for epoch 40 at ./checkpoints/train/ckpt-8\n","Epoch 40 Test Loss 0.9039\n","Time taken for 1 epoch: 0.09444427490234375 secs\n","\n","Epoch 41 Test Loss 0.8917\n","Time taken for 1 epoch: 0.010283946990966797 secs\n","\n","Epoch 42 Test Loss 0.8793\n","Time taken for 1 epoch: 0.009277582168579102 secs\n","\n","Epoch 43 Test Loss 0.8667\n","Time taken for 1 epoch: 0.010298967361450195 secs\n","\n","Epoch 44 Test Loss 0.8538\n","Time taken for 1 epoch: 0.009467124938964844 secs\n","\n","Saving checkpoint for epoch 45 at ./checkpoints/train/ckpt-9\n","Epoch 45 Test Loss 0.8406\n","Time taken for 1 epoch: 0.09338641166687012 secs\n","\n","Epoch 46 Test Loss 0.8272\n","Time taken for 1 epoch: 0.010326623916625977 secs\n","\n","Epoch 47 Test Loss 0.8136\n","Time taken for 1 epoch: 0.00977325439453125 secs\n","\n","Epoch 48 Test Loss 0.7999\n","Time taken for 1 epoch: 0.011088371276855469 secs\n","\n","Epoch 49 Test Loss 0.7862\n","Time taken for 1 epoch: 0.011582612991333008 secs\n","\n","Saving checkpoint for epoch 50 at ./checkpoints/train/ckpt-10\n","Epoch 50 Test Loss 0.7724\n","Time taken for 1 epoch: 0.09669995307922363 secs\n","\n","Epoch 51 Test Loss 0.7585\n","Time taken for 1 epoch: 0.0106353759765625 secs\n","\n","Epoch 52 Test Loss 0.7445\n","Time taken for 1 epoch: 0.014242172241210938 secs\n","\n","Epoch 53 Test Loss 0.7302\n","Time taken for 1 epoch: 0.011179447174072266 secs\n","\n","Epoch 54 Test Loss 0.7158\n","Time taken for 1 epoch: 0.009507894515991211 secs\n","\n","Saving checkpoint for epoch 55 at ./checkpoints/train/ckpt-11\n","Epoch 55 Test Loss 0.7012\n","Time taken for 1 epoch: 0.08969640731811523 secs\n","\n","Epoch 56 Test Loss 0.6875\n","Time taken for 1 epoch: 0.010299205780029297 secs\n","\n","Epoch 57 Test Loss 0.6740\n","Time taken for 1 epoch: 0.010334014892578125 secs\n","\n","Epoch 58 Test Loss 0.6609\n","Time taken for 1 epoch: 0.010855436325073242 secs\n","\n","Epoch 59 Test Loss 0.6481\n","Time taken for 1 epoch: 0.009355783462524414 secs\n","\n","Saving checkpoint for epoch 60 at ./checkpoints/train/ckpt-12\n","Epoch 60 Test Loss 0.6353\n","Time taken for 1 epoch: 0.09876275062561035 secs\n","\n","Epoch 61 Test Loss 0.6226\n","Time taken for 1 epoch: 0.010211467742919922 secs\n","\n","Epoch 62 Test Loss 0.6100\n","Time taken for 1 epoch: 0.012262821197509766 secs\n","\n","Epoch 63 Test Loss 0.5977\n","Time taken for 1 epoch: 0.011186838150024414 secs\n","\n","Epoch 64 Test Loss 0.5858\n","Time taken for 1 epoch: 0.012037515640258789 secs\n","\n","Saving checkpoint for epoch 65 at ./checkpoints/train/ckpt-13\n","Epoch 65 Test Loss 0.5743\n","Time taken for 1 epoch: 0.0869143009185791 secs\n","\n","Epoch 66 Test Loss 0.5636\n","Time taken for 1 epoch: 0.00984501838684082 secs\n","\n","Epoch 67 Test Loss 0.5538\n","Time taken for 1 epoch: 0.010185480117797852 secs\n","\n","Epoch 68 Test Loss 0.5458\n","Time taken for 1 epoch: 0.012442588806152344 secs\n","\n","Epoch 69 Test Loss 0.5380\n","Time taken for 1 epoch: 0.009279251098632812 secs\n","\n","Saving checkpoint for epoch 70 at ./checkpoints/train/ckpt-14\n","Epoch 70 Test Loss 0.5310\n","Time taken for 1 epoch: 0.09062480926513672 secs\n","\n","Epoch 71 Test Loss 0.5240\n","Time taken for 1 epoch: 0.012181758880615234 secs\n","\n","Epoch 72 Test Loss 0.5183\n","Time taken for 1 epoch: 0.010323524475097656 secs\n","\n","Epoch 73 Test Loss 0.5132\n","Time taken for 1 epoch: 0.010582447052001953 secs\n","\n","Epoch 74 Test Loss 0.5082\n","Time taken for 1 epoch: 0.011609315872192383 secs\n","\n","Saving checkpoint for epoch 75 at ./checkpoints/train/ckpt-15\n","Epoch 75 Test Loss 0.5011\n","Time taken for 1 epoch: 0.09431648254394531 secs\n","\n","Epoch 76 Test Loss 0.4950\n","Time taken for 1 epoch: 0.010857582092285156 secs\n","\n","Epoch 77 Test Loss 0.4891\n","Time taken for 1 epoch: 0.010226011276245117 secs\n","\n","Epoch 78 Test Loss 0.4835\n","Time taken for 1 epoch: 0.009870052337646484 secs\n","\n","Epoch 79 Test Loss 0.4778\n","Time taken for 1 epoch: 0.009604930877685547 secs\n","\n","Saving checkpoint for epoch 80 at ./checkpoints/train/ckpt-16\n","Epoch 80 Test Loss 0.4718\n","Time taken for 1 epoch: 0.09065628051757812 secs\n","\n","Epoch 81 Test Loss 0.4650\n","Time taken for 1 epoch: 0.012439727783203125 secs\n","\n","Epoch 82 Test Loss 0.4586\n","Time taken for 1 epoch: 0.011165618896484375 secs\n","\n","Epoch 83 Test Loss 0.4528\n","Time taken for 1 epoch: 0.010145425796508789 secs\n","\n","Epoch 84 Test Loss 0.4471\n","Time taken for 1 epoch: 0.009847640991210938 secs\n","\n","Saving checkpoint for epoch 85 at ./checkpoints/train/ckpt-17\n","Epoch 85 Test Loss 0.4409\n","Time taken for 1 epoch: 0.08856558799743652 secs\n","\n","Epoch 86 Test Loss 0.4348\n","Time taken for 1 epoch: 0.011013507843017578 secs\n","\n","Epoch 87 Test Loss 0.4287\n","Time taken for 1 epoch: 0.010020732879638672 secs\n","\n","Epoch 88 Test Loss 0.4227\n","Time taken for 1 epoch: 0.010286808013916016 secs\n","\n","Epoch 89 Test Loss 0.4165\n","Time taken for 1 epoch: 0.011246919631958008 secs\n","\n","Saving checkpoint for epoch 90 at ./checkpoints/train/ckpt-18\n","Epoch 90 Test Loss 0.4102\n","Time taken for 1 epoch: 0.0964045524597168 secs\n","\n","Epoch 91 Test Loss 0.4037\n","Time taken for 1 epoch: 0.010276317596435547 secs\n","\n","Epoch 92 Test Loss 0.3975\n","Time taken for 1 epoch: 0.009729385375976562 secs\n","\n","Epoch 93 Test Loss 0.3911\n","Time taken for 1 epoch: 0.010012626647949219 secs\n","\n","Epoch 94 Test Loss 0.3848\n","Time taken for 1 epoch: 0.010439634323120117 secs\n","\n","Saving checkpoint for epoch 95 at ./checkpoints/train/ckpt-19\n","Epoch 95 Test Loss 0.3786\n","Time taken for 1 epoch: 0.08901500701904297 secs\n","\n","Epoch 96 Test Loss 0.3723\n","Time taken for 1 epoch: 0.010273218154907227 secs\n","\n","Epoch 97 Test Loss 0.3660\n","Time taken for 1 epoch: 0.009917020797729492 secs\n","\n","Epoch 98 Test Loss 0.3596\n","Time taken for 1 epoch: 0.010133028030395508 secs\n","\n","Epoch 99 Test Loss 0.3533\n","Time taken for 1 epoch: 0.010209798812866211 secs\n","\n","Saving checkpoint for epoch 100 at ./checkpoints/train/ckpt-20\n","Epoch 100 Test Loss 0.3470\n","Time taken for 1 epoch: 0.09303712844848633 secs\n","\n"]}]},{"cell_type":"code","metadata":{"id":"cU4kkZys7mLL"},"source":["MAX_LENGTH = target_sequence_length\n","\n","def evaluate(inp):\n","    encoder_input = inp\n","    #print(encoder_input)\n","    output = tf.expand_dims(encoder_input[:,-1,:],-1)\n","    #print(output)\n","    \n","    for i in range(MAX_LENGTH):\n","        look_ahead_mask = create_look_ahead_mask(tf.shape(output)[1])\n","        predictions, attention_weights = transformer(encoder_input, \n","                                                     output, \n","                                                     False, \n","                                                     None, \n","                                                     look_ahead_mask, \n","                                                     None)\n","        \n","        # select the last word from the seq_len dimension\n","        predictions = predictions[: ,-1:, :]  # (batch_size, 1)\n","        #print(\"pred:\", predictions) #\n","        output = tf.concat([output, predictions], axis=1)\n","        #print(output)\n","        \n","    return tf.squeeze(output, axis=0), attention_weights"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8gnQAWpsA0Vs"},"source":["def mape(y_pred, y_true):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VrZLCCbpjmN0"},"source":["def MAE(y_true, y_pred): \n","    return np.mean(np.abs((y_true - y_pred)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iN7slOWlk-x0"},"source":["def MSE(y_true, y_pred):\n","    return np.mean(np.square((y_true - y_pred)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7khHQRegMByM"},"source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y8O2fiewMEaG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"df7b3a3f-3916-47f5-830e-9c54c6cab86b"},"source":["encode_series = encoder_input_val_data[0:1,:,:] \n","#print(encode_series)\n","\n","pred_series, _ = evaluate(encode_series)\n","pred_series = np.array([pred_series])\n","encode_series = encode_series.reshape(-1,1)\n","pred_series = pred_series.reshape(-1,1)[1:,:]   \n","target_series = decoder_target_val_data[0,:,:1].reshape(-1,1) \n","\n","encode_series_tail = np.concatenate([encode_series[-500:],target_series[:1]])\n","x_encode = encode_series_tail.shape[0]\n","\n","print(mape(pred_series[:24*7+23-23], target_series))\n","\n","print(MSE(target_series, pred_series[:24*7+23-23]))\n","\n","print(MAE(target_series, pred_series[:24*7+23-23]))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["246.7768430709839\n","0.33213937\n","0.45655796\n"]}]},{"cell_type":"code","metadata":{"id":"gRxmWFiyPIOG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6c404a28-a779-4d28-8602-4ffc23a96cd1"},"source":["x_encode"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["340"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"pzq3ApNZMHx6","colab":{"base_uri":"https://localhost:8080/","height":406},"outputId":"2d0c44b0-087f-4562-d449-8b68a30b4a33"},"source":["# 실제와 가격차이가 어떻게 나는지 비교해서 보정한다.\n","\n","plt.figure(figsize=(20,6))   \n","\n","plt.plot(range(1,x_encode+1),encode_series_tail+0.00900414)\n","plt.plot(range(x_encode,x_encode+pred_steps-23),target_series+0.00900414,color='orange')\n","plt.plot(range(x_encode,x_encode+pred_steps-23),pred_series[:24*7+23-23]+0.00900414,color='teal',linestyle='--')\n","\n","plt.title('Encoder Series Tail of Length %d, Target Series, and Predictions' % 500)\n","plt.legend(['Encoding Series','Target Series','Predictions'])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7fe0f79ab910>"]},"metadata":{},"execution_count":51},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FHfEpRQj_7jQ"},"source":["#Prophet"]},{"cell_type":"code","metadata":{"id":"GxabcXNaR_HX"},"source":["import pandas as pd\n","from fbprophet import Prophet\n","import matplotlib.pyplot as plt\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KMFg8RedAAXL","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"82798d3a-22e2-4361-b498-8fdf6f108bcb"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version1.csv\", encoding='CP949')\n","df = df.drop(df.columns[0], axis=1)\n","\n","df.columns = [\"ds\",\"y\"]\n","df[\"ds\"] = pd.to_datetime(df[\"ds\"], dayfirst = True)\n","\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-07-01 00:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-07-01 01:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-07-01 02:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-07-01 03:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-07-01 04:00:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                   ds         y\n","0 2021-07-01 00:00:00  0.124688\n","1 2021-07-01 01:00:00  0.124688\n","2 2021-07-01 02:00:00  0.124688\n","3 2021-07-01 03:00:00  0.124688\n","4 2021-07-01 04:00:00  0.124688"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","metadata":{"id":"xv9FXHpaAELb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b2347913-f800-491a-fd53-25c9e6e26500"},"source":["m = Prophet()\n","m.fit(df[:-24*7])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:numexpr.utils:NumExpr defaulting to 4 threads.\n","INFO:fbprophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n"]},{"output_type":"execute_result","data":{"text/plain":["<fbprophet.forecaster.Prophet at 0x7fe20a24e810>"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"imkZ1wN0AGgF","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"b77083d5-dae9-4303-9265-0d9a5723ef71"},"source":["future = m.make_future_dataframe(freq='H',periods=24*7)\n","future.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>716</th>\n","      <td>2021-07-30 20:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>717</th>\n","      <td>2021-07-30 21:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>718</th>\n","      <td>2021-07-30 22:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>719</th>\n","      <td>2021-07-30 23:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>720</th>\n","      <td>2021-07-31 00:00:00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                     ds\n","716 2021-07-30 20:00:00\n","717 2021-07-30 21:00:00\n","718 2021-07-30 22:00:00\n","719 2021-07-30 23:00:00\n","720 2021-07-31 00:00:00"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"xiGIX82FAIvT","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"d2a6f789-9630-4d72-c9d9-d6b52db0deb9"},"source":["forecast = m.predict(future)\n","forecast[['ds', 'yhat']].tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>yhat</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>716</th>\n","      <td>2021-07-30 20:00:00</td>\n","      <td>-0.014093</td>\n","    </tr>\n","    <tr>\n","      <th>717</th>\n","      <td>2021-07-30 21:00:00</td>\n","      <td>-0.004433</td>\n","    </tr>\n","    <tr>\n","      <th>718</th>\n","      <td>2021-07-30 22:00:00</td>\n","      <td>-0.003471</td>\n","    </tr>\n","    <tr>\n","      <th>719</th>\n","      <td>2021-07-30 23:00:00</td>\n","      <td>-0.003219</td>\n","    </tr>\n","    <tr>\n","      <th>720</th>\n","      <td>2021-07-31 00:00:00</td>\n","      <td>0.006753</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                     ds      yhat\n","716 2021-07-30 20:00:00 -0.014093\n","717 2021-07-30 21:00:00 -0.004433\n","718 2021-07-30 22:00:00 -0.003471\n","719 2021-07-30 23:00:00 -0.003219\n","720 2021-07-31 00:00:00  0.006753"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","metadata":{"id":"L-HWlN-ZAN-f","colab":{"base_uri":"https://localhost:8080/","height":318},"outputId":"4805c78a-c516-41ec-fc7a-dcf2695ec464"},"source":["plt.figure(figsize=(20,5))\n","\n","plt.plot(df[\"y\"][221:], label=\"real\")\n","plt.plot(range(720-24*7,720),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(720-24*7,720),pred_series[:24*7+23-23]+0.00900414, label=\"Transformer\")\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"UUMRI2j6Bocb"},"source":["#LSTMa"]},{"cell_type":"code","metadata":{"id":"7WLcYZZYBqhX"},"source":["import numpy as np \n","import pandas as pd \n","import matplotlib.pyplot as plt\n","\n","from tqdm import trange\n","import random"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hGUOrhKuBscl","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"476bc12e-b3a1-42c3-9a93-881c38994cfa"},"source":["data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version1.csv\", encoding='CP949')\n","\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>날짜</th>\n","      <th>종가</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2021-07-01 0:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2021-07-01 1:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2021-07-01 2:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2021-07-01 3:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2021-07-01 4:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0               날짜        종가\n","0           0  2021-07-01 0:00  0.124688\n","1           1  2021-07-01 1:00  0.124688\n","2           2  2021-07-01 2:00  0.124688\n","3           3  2021-07-01 3:00  0.124688\n","4           4  2021-07-01 4:00  0.124688"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"MR7XsjsxBtY_"},"source":["from sklearn.preprocessing import MinMaxScaler\n","min_max_scaler = MinMaxScaler()\n","data[\"종가\"] = min_max_scaler.fit_transform(data[\"종가\"].to_numpy().reshape(-1,1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LzqEQL_2Byuf"},"source":["train = data[:-24*7]\n","train = train[\"종가\"].to_numpy()\n","\n","test = data[-24*7:]\n","test = test[\"종가\"].to_numpy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Q6VbWpwB09L"},"source":["import torch\n","import torch.nn as nn\n","from torch import optim\n","import torch.nn.functional as F\n","\n","device = torch.device(\"cuda\", index=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vsgdq7a1B2Zf"},"source":["class lstm_encoder(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layers = 1):\n","        super(lstm_encoder, self).__init__()\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.num_layers = num_layers\n","\n","        self.lstm = nn.LSTM(input_size = input_size, hidden_size = hidden_size, num_layers = num_layers, batch_first=True)\n","\n","    def forward(self, x_input):\n","        lstm_out, self.hidden = self.lstm(x_input)\n","        return lstm_out, self.hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g3V7hzfIB4ua"},"source":["class lstm_decoder(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layers = 1):\n","        super(lstm_decoder, self).__init__()\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.num_layers = num_layers\n","\n","        self.lstm = nn.LSTM(input_size = input_size, hidden_size = hidden_size,num_layers = num_layers, batch_first=True)\n","        self.linear = nn.Linear(hidden_size, input_size)           \n","\n","    def forward(self, x_input, encoder_hidden_states):\n","        lstm_out, self.hidden = self.lstm(x_input.unsqueeze(-1), encoder_hidden_states)\n","        output = self.linear(lstm_out)\n","        \n","        return output, self.hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"khG35pB8B8Zb"},"source":["class lstm_encoder_decoder(nn.Module):\n","    def __init__(self, input_size, hidden_size):\n","        super(lstm_encoder_decoder, self).__init__()\n","\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","\n","        self.encoder = lstm_encoder(input_size = input_size, hidden_size = hidden_size)\n","        self.decoder = lstm_decoder(input_size = input_size, hidden_size = hidden_size)\n","\n","    def forward(self, inputs, targets, target_len, teacher_forcing_ratio):\n","        batch_size = inputs.shape[0]\n","        input_size = inputs.shape[2]\n","\n","        outputs = torch.zeros(batch_size, target_len, input_size)\n","\n","        _, hidden = self.encoder(inputs)\n","        decoder_input = inputs[:,-1, :]\n","        \n","        for t in range(target_len): \n","            out, hidden = self.decoder(decoder_input, hidden)\n","            out =  out.squeeze(1)\n","            if random.random() < teacher_forcing_ratio:\n","                decoder_input = targets[:, t, :]\n","            else:\n","                decoder_input = out\n","            outputs[:,t,:] = out\n","\n","        return outputs\n","\n","    def predict(self, inputs, target_len):\n","        inputs = inputs.unsqueeze(0)\n","        self.eval()\n","        batch_size = inputs.shape[0]\n","        input_size = inputs.shape[2]\n","        outputs = torch.zeros(batch_size, target_len, input_size)\n","        _, hidden = self.encoder(inputs)\n","        decoder_input = inputs[:,-1, :]\n","        for t in range(target_len): \n","            out, hidden = self.decoder(decoder_input, hidden)\n","            out =  out.squeeze(1)\n","            decoder_input = out\n","            outputs[:,t,:] = out\n","        return outputs.detach().numpy()[0,:,0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"euepwoDsB_AS"},"source":["from torch.utils.data import DataLoader, Dataset\n","\n","class windowDataset(Dataset):\n","    def __init__(self, y, input_window=80, output_window=20, stride=5):\n","        #총 데이터의 개수\n","        L = y.shape[0]\n","        #stride씩 움직일 때 생기는 총 sample의 개수\n","        num_samples = (L - input_window - output_window) // stride + 1\n","\n","        #input과 output\n","        X = np.zeros([input_window, num_samples])\n","        Y = np.zeros([output_window, num_samples])\n","\n","        for i in np.arange(num_samples):\n","            start_x = stride*i\n","            end_x = start_x + input_window\n","            X[:,i] = y[start_x:end_x]\n","\n","            start_y = stride*i + input_window\n","            end_y = start_y + output_window\n","            Y[:,i] = y[start_y:end_y]\n","\n","        X = X.reshape(X.shape[0], X.shape[1], 1).transpose((1,0,2))\n","        Y = Y.reshape(Y.shape[0], Y.shape[1], 1).transpose((1,0,2))\n","        self.x = X\n","        self.y = Y\n","        \n","        self.len = len(X)\n","    def __getitem__(self, i):\n","        return self.x[i], self.y[i]\n","    def __len__(self):\n","        return self.len"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fyRG-o1DCB_6"},"source":["iw = 24*14\n","ow = 24*7\n","\n","train_dataset = windowDataset(train, input_window=iw, output_window=ow, stride=1)\n","train_loader = DataLoader(train_dataset, batch_size=64)\n","# y_train_loader = DataLoader(y_train, batch_size=5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o6RRY-yGCEFL"},"source":["model = lstm_encoder_decoder(input_size=1, hidden_size=16).to(device)\n","# model.train_model(X_train.to(device), y_train.to(device), n_epochs=100, target_len=ow, batch_size=5, training_bprediction=\"mixed_teacher_forcing\", teacher_forcing_ratio=0.6, learning_rate=0.01, dynamic_tf=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zh7o6HY4CGC8"},"source":["#5000으로 할 경우 시간도 오래걸리고 에러도 커서 100으로 줄인다.\n","\n","learning_rate=0.01\n","epoch = 100\n","optimizer = optim.Adam(model.parameters(), lr = learning_rate)\n","criterion = nn.MSELoss()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zoaTXiKbCHce","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5afc680a-1023-46a7-8711-48147c3f9914"},"source":["from tqdm import tqdm\n","\n","model.train()\n","with tqdm(range(epoch)) as tr:\n","    for i in tr:\n","        total_loss = 0.0\n","        for x,y in train_loader:\n","            optimizer.zero_grad()\n","            x = x.to(device).float()\n","            y = y.to(device).float()\n","            output = model(x, y, ow, 0.6).to(device)\n","            loss = criterion(output, y)\n","            loss.backward()\n","            optimizer.step()\n","            total_loss += loss.cpu().item()\n","        tr.set_postfix(loss=\"{0:.5f}\".format(total_loss/len(train_loader)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [00:17<00:00,  5.76it/s, loss=0.00679]\n"]}]},{"cell_type":"code","metadata":{"id":"Shr1ZdBvCJfq"},"source":["predict = model.predict(torch.tensor(train_dataset[0][0]).to(device).float(), target_len=ow)\n","real = train_dataset[0][1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6Y_bM2yLCMSN"},"source":["predict = model.predict(torch.tensor(train[-24*7*2:]).reshape(-1,1).to(device).float(), target_len=ow)\n","real = data[\"종가\"].to_numpy()\n","\n","predict = min_max_scaler.inverse_transform(predict.reshape(-1,1))\n","real = min_max_scaler.inverse_transform(real.reshape(-1,1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AcWSBCdLCOeU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6cfad872-5bb4-446f-ed84-0f1e820a3a55"},"source":["real.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(721, 1)"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"Qe3V9gtwCPsl","colab":{"base_uri":"https://localhost:8080/","height":318},"outputId":"55edf69c-7976-4ddb-943c-ffe4499da8a0"},"source":["plt.figure(figsize=(20,5))\n","plt.plot(range(220,720), real[221:], label=\"real\")\n","plt.plot(range(720-24*7,720), predict[-24*7:], label=\"LSTMa\")\n","plt.plot(range(720-24*7,720),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(720-24*7,720),pred_series[:24*7+23-23]+0.00900414, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZHCM0K5uDzwc"},"source":["#Informer"]},{"cell_type":"code","metadata":{"id":"Ighg_VhkDrwT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e9a17297-2c4b-43d7-e952-79ea0141146c"},"source":["!git clone https://github.com/zhouhaoyi/Informer2020.git"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'Informer2020'...\n","remote: Enumerating objects: 535, done.\u001b[K\n","remote: Total 535 (delta 0), reused 0 (delta 0), pack-reused 535\u001b[K\n","Receiving objects: 100% (535/535), 6.47 MiB | 21.80 MiB/s, done.\n","Resolving deltas: 100% (306/306), done.\n"]}]},{"cell_type":"code","metadata":{"id":"2yxRebPpD1nz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3b04863a-6e70-48d9-a3fa-2ab8c097f9ad"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"Q_nMD1gGD5ND"},"source":["import sys\n","if not 'Informer2020' in sys.path:\n","    sys.path += ['Informer2020']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iTVBZNqqD6sX"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import MinMaxScaler\n","\n","from datetime import timedelta\n","import torch\n","from torch import nn\n","from torch import optim\n","from torch.utils.data import DataLoader, Dataset\n","\n","from tqdm import tqdm\n","from models.model import Informer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jjqkV_XfD8jj"},"source":["class StandardScaler():\n","    def __init__(self):\n","        self.mean = 0.\n","        self.std = 1.\n","    \n","    def fit(self, data):\n","        self.mean = data.mean(0)\n","        self.std = data.std(0)\n","\n","    def transform(self, data):\n","        mean = torch.from_numpy(self.mean).type_as(data).to(data.device) if torch.is_tensor(data) else self.mean\n","        std = torch.from_numpy(self.std).type_as(data).to(data.device) if torch.is_tensor(data) else self.std\n","        return (data - mean) / std\n","\n","    def inverse_transform(self, data):\n","        mean = torch.from_numpy(self.mean).type_as(data).to(data.device) if torch.is_tensor(data) else self.mean\n","        std = torch.from_numpy(self.std).type_as(data).to(data.device) if torch.is_tensor(data) else self.std\n","        return (data * std) + mean\n","        \n","\n","def time_features(dates, freq='h'):\n","    dates['month'] = dates.date.apply(lambda row:row.month,1)\n","    dates['day'] = dates.date.apply(lambda row:row.day,1)\n","    dates['weekday'] = dates.date.apply(lambda row:row.weekday(),1)\n","    dates['hour'] = dates.date.apply(lambda row:row.hour,1)\n","    dates['minute'] = dates.date.apply(lambda row:row.minute,1)\n","    dates['minute'] = dates.minute.map(lambda x:x//15)\n","    freq_map = {\n","        'y':[],'m':['month'],'w':['month'],'d':['month','day','weekday'],\n","        'b':['month','day','weekday'],'h':['month','day','weekday','hour'],\n","        't':['month','day','weekday','hour','minute'],\n","    }\n","    return dates[freq_map[freq.lower()]].values\n","\n","def _process_one_batch(batch_x, batch_y, batch_x_mark, batch_y_mark):\n","    batch_x = batch_x.float().to(device)\n","    batch_y = batch_y.float()\n","    batch_x_mark = batch_x_mark.float().to(device)\n","    batch_y_mark = batch_y_mark.float().to(device)\n","    dec_inp = torch.zeros([batch_y.shape[0], pred_len, batch_y.shape[-1]]).float()\n","    dec_inp = torch.cat([batch_y[:,:label_len,:], dec_inp], dim=1).float().to(device)\n","    outputs = model(batch_x, batch_x_mark, dec_inp, batch_y_mark)\n","    batch_y = batch_y[:,-pred_len:,0:].to(device)\n","    return outputs, batch_y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ftToXwQzD_XZ"},"source":["class Dataset_Pred(Dataset):\n","    def __init__(self, dataframe, size=None, scale=True):\n","        self.seq_len = size[0]\n","        self.label_len = size[1]\n","        self.pred_len = size[2]\n","        self.dataframe = dataframe\n","        \n","        self.scale = scale\n","        self.__read_data__()\n","\n","    def __read_data__(self):\n","        self.scaler = StandardScaler()\n","        df_raw = self.dataframe\n","        df_raw[\"date\"] = pd.to_datetime(df_raw[\"date\"])\n","\n","        delta = df_raw[\"date\"].iloc[1] - df_raw[\"date\"].iloc[0]\n","        if delta>=timedelta(hours=1):\n","            self.freq='h'\n","        else:\n","            self.freq='t'\n","\n","        \n","\n","        border1 = 0\n","        border2 = len(df_raw)\n","        cols_data = df_raw.columns[1:]\n","        df_data = df_raw[cols_data]\n","\n","\n","        if self.scale:\n","            self.scaler.fit(df_data.values)\n","            data = self.scaler.transform(df_data.values)\n","        else:\n","            data = df_data.values\n","            \n","        tmp_stamp = df_raw[['date']][border1:border2]\n","        tmp_stamp['date'] = pd.to_datetime(tmp_stamp.date)\n","        pred_dates = pd.date_range(tmp_stamp.date.values[-1], periods=self.pred_len+1, freq=self.freq)\n","        \n","        df_stamp = pd.DataFrame(columns = ['date'])\n","        df_stamp.date = list(tmp_stamp.date.values) + list(pred_dates[1:])\n","        data_stamp = time_features(df_stamp, freq=self.freq)\n","\n","        self.data_x = data[border1:border2]\n","        self.data_y = data[border1:border2]\n","        self.data_stamp = data_stamp\n","    \n","    def __getitem__(self, index):\n","        s_begin = index\n","        s_end = s_begin + self.seq_len\n","        r_begin = s_end - self.label_len\n","        r_end = r_begin + self.label_len + self.pred_len\n","\n","        seq_x = self.data_x[s_begin:s_end]\n","        seq_y = self.data_y[r_begin:r_end]\n","        seq_x_mark = self.data_stamp[s_begin:s_end]\n","        seq_y_mark = self.data_stamp[r_begin:r_end]\n","        return seq_x, seq_y, seq_x_mark, seq_y_mark\n","\n","    def __len__(self):\n","        return len(self.data_x) - self.seq_len- self.pred_len + 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HOXR317aEHvb","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"00902933-03fd-411d-b14d-86ffee4e0eab"},"source":["data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version1.csv\", encoding='CP949')\n","\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>날짜</th>\n","      <th>종가</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2021-07-01 0:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2021-07-01 1:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2021-07-01 2:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2021-07-01 3:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2021-07-01 4:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0               날짜        종가\n","0           0  2021-07-01 0:00  0.124688\n","1           1  2021-07-01 1:00  0.124688\n","2           2  2021-07-01 2:00  0.124688\n","3           3  2021-07-01 3:00  0.124688\n","4           4  2021-07-01 4:00  0.124688"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","metadata":{"id":"cWQ9usQTEKUl"},"source":["data[\"date\"] = data[\"날짜\"]\n","data[\"date\"] = pd.to_datetime(data[\"date\"], dayfirst = True)\n","data[\"value\"] = data[\"종가\"]\n","\n","min_max_scaler = MinMaxScaler()\n","data[\"value\"] = min_max_scaler.fit_transform(data[\"value\"].to_numpy().reshape(-1,1)).reshape(-1)\n","data = data[[\"date\", \"value\"]]\n","\n","data_train = data.iloc[:-24*7].copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nrnJWkCXENIX"},"source":["pred_len = 24*7\n","\n","seq_len = pred_len#인풋 크기\n","label_len = pred_len#디코더에서 참고할 크기\n","pred_len = pred_len#예측할 크기\n","\n","batch_size = 10\n","shuffle_flag = True\n","num_workers = 0\n","drop_last = True\n","\n","\n","\n","dataset = Dataset_Pred(dataframe=data_train ,scale=True, size = (seq_len, label_len,pred_len))\n","data_loader = DataLoader(dataset,batch_size=batch_size,shuffle=shuffle_flag,num_workers=num_workers,drop_last=drop_last)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4rWuHee2EPMC"},"source":["enc_in = 1\n","dec_in = 1\n","c_out = 1\n","device = torch.device(\"cuda:0\")\n","\n","model = Informer(enc_in, dec_in, c_out, seq_len, label_len, pred_len, device = device).to(device)\n","learning_rate = 1e-4\n","criterion =  nn.MSELoss()\n","\n","model_optim = optim.Adam(model.parameters(), lr=learning_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3OuiFBlHESYz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3865aa63-b9af-43ac-f824-078334cd7acd"},"source":["# Informer는 error를 100하는게 시간도 덜 걸리고 에러도 적다.\n","\n","train_epochs = 100\n","model.train()\n","progress = tqdm(range(train_epochs))\n","for epoch in progress:\n","    train_loss = []\n","    for i, (batch_x,batch_y,batch_x_mark,batch_y_mark) in enumerate(data_loader):\n","        model_optim.zero_grad()\n","        pred, true = _process_one_batch(batch_x, batch_y, batch_x_mark, batch_y_mark)\n","        loss = criterion(pred, true)\n","        train_loss.append(loss.item())\n","        loss.backward()\n","        model_optim.step()\n","    train_loss = np.average(train_loss)\n","    progress.set_description(\"loss: {:0.6f}\".format(train_loss))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/100 [00:00<?, ?it/s]/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:652: UserWarning:\n","\n","Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)\n","\n","loss: 0.170859: 100%|██████████| 100/100 [02:30<00:00,  1.50s/it]\n"]}]},{"cell_type":"code","metadata":{"id":"s0pez33IETCg","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5d732027-3d1e-4dd3-d44a-3bf122f7f03b"},"source":["import time\n","now = time.time()\n","scaler = dataset.scaler\n","df_test = data_train.copy()\n","df_test[\"value\"] = scaler.transform(df_test[\"value\"])\n","df_test[\"date\"] = pd.to_datetime(df_test[\"date\"].values)\n","\n","delta = df_test[\"date\"][1] - df_test[\"date\"][0]\n","for i in range(pred_len):\n","    df_test = df_test.append({\"date\":df_test[\"date\"].iloc[-1]+delta}, ignore_index=True)\n","df_test = df_test.fillna(0)\n","\n","\n","df_test_x = df_test.iloc[-seq_len-pred_len:-pred_len].copy()\n","df_test_y = df_test.iloc[-label_len-pred_len:].copy()\n","\n","df_test_numpy = df_test.to_numpy()[:,1:].astype(\"float\")\n","test_time_x = time_features(df_test_x, freq=dataset.freq) #인풋 타임 스템프\n","test_data_x = df_test_numpy[-seq_len-pred_len:-pred_len] #인풋 데이터\n","\n","\n","test_time_y = time_features(df_test_y, freq=dataset.freq) #아웃풋 타임스템프\n","test_data_y =df_test_numpy[-label_len-pred_len:]\n","test_data_y[-pred_len:] = np.zeros_like(test_data_y[-pred_len:]) #예측하는 부분을 0으로 채워준다.\n","\n","\n","\n","test_time_x = test_time_x\n","test_time_y = test_time_y\n","test_data_y = test_data_y.astype(np.float64)\n","test_data_x = test_data_x.astype(np.float64)\n","\n","_test = [(test_data_x,test_data_y,test_time_x,test_time_y)]\n","_test_loader = DataLoader(_test,batch_size=1,shuffle=False)\n","\n","preds = []\n","\n","with torch.no_grad():\n","    for i, (batch_x,batch_y,batch_x_mark,batch_y_mark) in enumerate(_test_loader):\n","        \n","        batch_x = batch_x.float().to(device)\n","        batch_y = batch_y.float().to(device)\n","\n","        batch_x_mark = batch_x_mark.float().to(device)\n","        batch_y_mark = batch_y_mark.float().to(device)\n","\n","        outputs = model(batch_x, batch_x_mark, batch_y, batch_y_mark)\n","        preds = outputs.detach().cpu().numpy()\n","\n","preds = scaler.inverse_transform(preds[0])\n","\n","df_test.iloc[-pred_len:, 1:] = preds\n","print(time.time() - now)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5276014804840088\n"]}]},{"cell_type":"code","metadata":{"id":"UKVKmhZLEWXz","colab":{"base_uri":"https://localhost:8080/","height":318},"outputId":"9492cfa9-3e96-48d8-b802-b066f0fb3d65"},"source":["import matplotlib.pyplot as plt\n","\n","real = data[\"value\"].to_numpy()\n","result = df_test[\"value\"].iloc[-24*7:].to_numpy()\n","\n","real = min_max_scaler.inverse_transform(real.reshape(-1,1)).reshape(-1)\n","result = min_max_scaler.inverse_transform(result.reshape(-1,1)).reshape(-1)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(range(220,720),real[221:], label=\"real\")\n","plt.plot(range(720-24*7,720),result, label=\"Informer\")\n","plt.plot(range(720-24*7,720), predict[-24*7:], label=\"LSTMa\")\n","plt.plot(range(720-24*7,720),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(720-24*7,720),pred_series[:24*7+23-23]+0.00900414, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"oyQIUFttGo_w"},"source":["#ARIMA"]},{"cell_type":"code","metadata":{"id":"hiLPHVi8FtJA"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U3r5vY8HFudT","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"70302060-b780-45e2-d361-33bfbbbf7654"},"source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Data/삼성전자_1M_ST_Version1.csv\", encoding='CP949')\n","df = df.drop(df.columns[0], axis=1)\n","df.columns = [\"ds\",\"y\"]\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ds</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021-07-01 0:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021-07-01 1:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021-07-01 2:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021-07-01 3:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021-07-01 4:00</td>\n","      <td>0.124688</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                ds         y\n","0  2021-07-01 0:00  0.124688\n","1  2021-07-01 1:00  0.124688\n","2  2021-07-01 2:00  0.124688\n","3  2021-07-01 3:00  0.124688\n","4  2021-07-01 4:00  0.124688"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","metadata":{"id":"3H-pHMqLF1ND"},"source":["df_train = df.iloc[:-24*7]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vVJjfCniF1xb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d1f723e5-c880-44c6-abf0-fc7b2e7004de"},"source":["from statsmodels.tsa.seasonal import seasonal_decompose"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning:\n","\n","pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","\n"]}]},{"cell_type":"code","metadata":{"id":"1AzDqmYFF3qS","colab":{"base_uri":"https://localhost:8080/","height":506},"outputId":"dc35dbfe-ce96-4f1f-caad-13d6b8b73327"},"source":["import statsmodels.api as sm\n","fig = plt.figure(figsize=(20,8))\n","ax1 = fig.add_subplot(211)\n","fig = sm.graphics.tsa.plot_acf(df_train[\"y\"], lags=20, ax=ax1)\n","\n","fig = plt.figure(figsize=(20,8))\n","ax1 = fig.add_subplot(212)\n","fig = sm.graphics.tsa.plot_pacf(df_train[\"y\"], lags=20, ax=ax1)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ljPV71OzF64s"},"source":["from statsmodels.tsa.arima_model import ARIMA\n","from statsmodels.tsa.statespace.sarimax import SARIMAX\n","import itertools\n","from tqdm import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rtlXujmwF60T","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a8013866-9c5c-4785-da51-79b46a4b32a4"},"source":["p = range(0,3)\n","d = range(1,2)\n","q = range(0,6)\n","m = 24\n","\n","pdq = list(itertools.product(p,d,q))\n","seasonal_pdq = [(x[0],x[1], x[2], m) for x in list(itertools.product(p,d,q))]\n","\n","aic = []\n","params = []\n","\n","with tqdm(total = len(pdq) * len(seasonal_pdq)) as pg:\n","    for i in pdq:\n","        for j in seasonal_pdq:\n","            pg.update(1)\n","            try:\n","                model = SARIMAX(df_train[\"y\"], order=(i), season_order = (j))\n","                model_fit = model.fit()\n","                # print(\"SARIMA:{}{}, AIC:{}\".format(i,j, round(model_fit.aic,2)))\n","                aic.append(round(model_fit.aic,2))\n","                params.append((i,j))\n","            except:\n","                continue"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":[" 50%|█████     | 163/324 [00:26<00:23,  6.82it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 51%|█████     | 164/324 [00:27<00:49,  3.21it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 51%|█████     | 165/324 [00:27<01:07,  2.36it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 51%|█████     | 166/324 [00:28<01:20,  1.96it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 52%|█████▏    | 167/324 [00:29<01:28,  1.77it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 52%|█████▏    | 168/324 [00:29<01:36,  1.61it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 52%|█████▏    | 169/324 [00:30<01:41,  1.53it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 52%|█████▏    | 170/324 [00:31<01:41,  1.51it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 53%|█████▎    | 171/324 [00:32<01:45,  1.45it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 53%|█████▎    | 172/324 [00:32<01:44,  1.45it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 53%|█████▎    | 173/324 [00:33<01:43,  1.45it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 54%|█████▎    | 174/324 [00:34<01:45,  1.43it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 54%|█████▍    | 175/324 [00:34<01:44,  1.42it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 54%|█████▍    | 176/324 [00:35<01:44,  1.41it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 55%|█████▍    | 177/324 [00:36<01:43,  1.43it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 55%|█████▍    | 178/324 [00:37<01:42,  1.43it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 55%|█████▌    | 179/324 [00:37<01:41,  1.43it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 56%|█████▌    | 180/324 [00:38<01:41,  1.42it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 61%|██████▏   | 199/324 [00:50<01:17,  1.61it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 200/324 [00:51<01:35,  1.30it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 201/324 [00:52<01:47,  1.15it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 62%|██████▏   | 202/324 [00:53<01:54,  1.07it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 203/324 [00:54<01:59,  1.01it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 204/324 [00:55<02:03,  1.03s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 63%|██████▎   | 205/324 [00:56<02:04,  1.05s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▎   | 206/324 [00:57<02:05,  1.06s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▍   | 207/324 [00:58<02:05,  1.07s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 64%|██████▍   | 208/324 [00:59<02:05,  1.09s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▍   | 209/324 [01:01<02:04,  1.09s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▍   | 210/324 [01:02<02:04,  1.09s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▌   | 211/324 [01:03<02:03,  1.10s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 65%|██████▌   | 212/324 [01:04<02:03,  1.10s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▌   | 213/324 [01:05<02:03,  1.11s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▌   | 214/324 [01:06<02:01,  1.10s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 66%|██████▋   | 215/324 [01:07<01:59,  1.09s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 67%|██████▋   | 216/324 [01:08<01:58,  1.10s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 89%|████████▉ | 289/324 [01:30<00:25,  1.35it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|████████▉ | 290/324 [01:31<00:29,  1.14it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|████████▉ | 291/324 [01:32<00:32,  1.03it/s]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|█████████ | 292/324 [01:34<00:33,  1.05s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 90%|█████████ | 293/324 [01:35<00:34,  1.10s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████ | 294/324 [01:36<00:34,  1.15s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████ | 295/324 [01:37<00:34,  1.18s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 91%|█████████▏| 296/324 [01:38<00:33,  1.18s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 297/324 [01:40<00:31,  1.18s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 298/324 [01:41<00:31,  1.20s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 92%|█████████▏| 299/324 [01:42<00:30,  1.21s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 300/324 [01:43<00:29,  1.21s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 301/324 [01:45<00:28,  1.22s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 93%|█████████▎| 302/324 [01:46<00:27,  1.23s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▎| 303/324 [01:47<00:25,  1.23s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 304/324 [01:48<00:24,  1.25s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 305/324 [01:50<00:23,  1.25s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 94%|█████████▍| 306/324 [01:51<00:22,  1.27s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▍| 307/324 [01:52<00:21,  1.25s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▌| 308/324 [01:54<00:20,  1.30s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 95%|█████████▌| 309/324 [01:55<00:19,  1.32s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▌| 310/324 [01:56<00:19,  1.36s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▌| 311/324 [01:58<00:17,  1.36s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 96%|█████████▋| 312/324 [01:59<00:16,  1.38s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 313/324 [02:01<00:15,  1.38s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 314/324 [02:02<00:13,  1.39s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 97%|█████████▋| 315/324 [02:03<00:12,  1.39s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 316/324 [02:05<00:11,  1.41s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 317/324 [02:06<00:09,  1.41s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 318/324 [02:08<00:08,  1.41s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 98%|█████████▊| 319/324 [02:09<00:07,  1.40s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 320/324 [02:10<00:05,  1.41s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 321/324 [02:12<00:04,  1.41s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n"," 99%|█████████▉| 322/324 [02:13<00:02,  1.41s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|█████████▉| 323/324 [02:15<00:01,  1.41s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|██████████| 324/324 [02:16<00:00,  1.42s/it]/usr/local/lib/python3.7/dist-packages/statsmodels/base/model.py:512: ConvergenceWarning:\n","\n","Maximum Likelihood optimization failed to converge. Check mle_retvals\n","\n","100%|██████████| 324/324 [02:18<00:00,  2.35it/s]\n"]}]},{"cell_type":"code","metadata":{"id":"t77yJtlmGCGl","colab":{"base_uri":"https://localhost:8080/","height":458},"outputId":"c46c9de1-e45b-4ff8-9be4-f6bc61dbe582"},"source":["optimal = [(params[i],j) for i,j in enumerate(aic) if j == min(aic)]\n","model_opt = SARIMAX(df_train[\"y\"], order = optimal[0][0][0], seasonal_order = optimal[0][0][1])\n","model_opt_fit = model_opt.fit()\n","model_opt_fit.summary()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<table class=\"simpletable\">\n","<caption>Statespace Model Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>                  <td>y</td>               <th>  No. Observations:  </th>   <td>553</td> \n","</tr>\n","<tr>\n","  <th>Model:</th>           <td>SARIMAX(1, 1, 3)x(0, 1, 0, 24)</td> <th>  Log Likelihood     </th> <td>-2.215</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>                   <td>Mon, 20 Sep 2021</td>        <th>  AIC                </th> <td>14.430</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                       <td>05:27:30</td>            <th>  BIC                </th> <td>35.775</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                         <td>0</td>               <th>  HQIC               </th> <td>22.786</td>\n","</tr>\n","<tr>\n","  <th></th>                             <td> - 553</td>             <th>                     </th>    <td> </td>  \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>    <td> </td>  \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>ar.L1</th>  <td>   -0.5529</td> <td>    0.380</td> <td>   -1.456</td> <td> 0.145</td> <td>   -1.297</td> <td>    0.192</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>  <td>    0.2568</td> <td>    0.380</td> <td>    0.676</td> <td> 0.499</td> <td>   -0.487</td> <td>    1.001</td>\n","</tr>\n","<tr>\n","  <th>ma.L2</th>  <td>   -0.5195</td> <td>    0.123</td> <td>   -4.210</td> <td> 0.000</td> <td>   -0.761</td> <td>   -0.278</td>\n","</tr>\n","<tr>\n","  <th>ma.L3</th>  <td>   -0.2885</td> <td>    0.121</td> <td>   -2.380</td> <td> 0.017</td> <td>   -0.526</td> <td>   -0.051</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th> <td>    0.0590</td> <td>    0.001</td> <td>   52.473</td> <td> 0.000</td> <td>    0.057</td> <td>    0.061</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (Q):</th>          <td>165.88</td> <th>  Jarque-Bera (JB):  </th> <td>8657.31</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                 <td>0.00</td>  <th>  Prob(JB):          </th>  <td>0.00</td>  \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th>  <td>0.87</td>  <th>  Skew:              </th>  <td>-1.40</td> \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>     <td>0.35</td>  <th>  Kurtosis:          </th>  <td>22.64</td> \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."],"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                                 Statespace Model Results                                 \n","==========================================================================================\n","Dep. Variable:                                  y   No. Observations:                  553\n","Model:             SARIMAX(1, 1, 3)x(0, 1, 0, 24)   Log Likelihood                  -2.215\n","Date:                            Mon, 20 Sep 2021   AIC                             14.430\n","Time:                                    05:27:30   BIC                             35.775\n","Sample:                                         0   HQIC                            22.786\n","                                            - 553                                         \n","Covariance Type:                              opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","ar.L1         -0.5529      0.380     -1.456      0.145      -1.297       0.192\n","ma.L1          0.2568      0.380      0.676      0.499      -0.487       1.001\n","ma.L2         -0.5195      0.123     -4.210      0.000      -0.761      -0.278\n","ma.L3         -0.2885      0.121     -2.380      0.017      -0.526      -0.051\n","sigma2         0.0590      0.001     52.473      0.000       0.057       0.061\n","===================================================================================\n","Ljung-Box (Q):                      165.88   Jarque-Bera (JB):              8657.31\n","Prob(Q):                              0.00   Prob(JB):                         0.00\n","Heteroskedasticity (H):               0.87   Skew:                            -1.40\n","Prob(H) (two-sided):                  0.35   Kurtosis:                        22.64\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","\"\"\""]},"metadata":{},"execution_count":95}]},{"cell_type":"code","metadata":{"id":"PojlDVwHGDm9","colab":{"base_uri":"https://localhost:8080/","height":318},"outputId":"aa3956c4-c056-4bd8-cf13-672983af9d47"},"source":["model = SARIMAX(df_train[\"y\"], order=optimal[0][0][0], seasonal_order=optimal[0][0][1])\n","model_fit = model.fit(disp=0)\n","ARIMA_forecast = model_fit.forecast(steps=24*7)\n","\n","plt.figure(figsize=(20,5))\n","plt.plot(range(0,720), df[\"y\"].iloc[1:], label=\"Real\")\n","\n","plt.plot(ARIMA_forecast, label=\"ARIMA\")\n","plt.plot(range(720-24*7,720),result, label=\"Informer\")\n","plt.plot(range(720-24*7,720), predict[-24*7:], label=\"LSTMa\")\n","plt.plot(range(720-24*7,720),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(720-24*7,720),pred_series[:24*7+23-23]+0.00900414, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABIkAAAEvCAYAAADBz5EMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeZhT9b0/8PfZsswM64CAUAU3VLahKK5U3PXXilXE6rW11Fqf1rrcLnrb3tra3nu7qG1dn2pvtbS9FNcK2ttq3biF4sYyKAgiKOKwMyOzZjnL9/fHWXKSSYbMkMw5ybxfz9OnTpJJvskkIeeTz+f9lYQQICIiIiIiIiKigU0OegFERERERERERBQ8FomIiIiIiIiIiIhFIiIiIiIiIiIiYpGIiIiIiIiIiIjAIhEREREREREREYFFIiIiIiIiIiIiAqAGvYBCRowYIcaPHx/0MoiIiIiIiIiIqsaqVav2CSFG5jsvtEWi8ePHY+XKlUEvg4iIiIiIiIioakiS9GGh8zhuRkRERERERERELBIRERERERERERGLREREREREREREhBBnEuWj6zqampqQTCaDXsqAE4vFMG7cOGiaFvRSiIiIiIiIiKgMKqpI1NTUhEGDBmH8+PGQJCno5QwYQgg0NzejqakJEyZMCHo5RERERERERFQGFTVulkwmUV9fzwJRP5MkCfX19ezgIiIiIiIiIqpiFVUkAsACUUD4uBMRERERERFVt4orEgVNURQ0NDRg8uTJuOiii7B///4+Xc+CBQtwww03lHh1RERERERERER9wyJRL8XjcTQ2NmLdunUYPnw4HnjggaCXRERERERERER00FgkOginnHIKtm/fDgDYsmULLrjgAsyYMQOzZs3Cxo0bAQDPPvssTjrpJEyfPh3nnHMOdu/eHeSSiYiIiIiIiMpua+MqmIYR9DKol1gk6iPTNPHSSy9hzpw5AIDrrrsO9913H1atWoW77roL119/PQDg9NNPx2uvvYY1a9bgiiuuwB133BHksomIiIiIiIjKqmVHE5766Q/x1kvPBb0U6iU16AX01Y+eXY93drSV9DqPP3QwfnjRpB4vk0gk0NDQgO3bt+O4447Dueeei46ODqxYsQLz5s3zLpdKpQAATU1N+NznPoedO3cinU5zC3kiIiIiIiKqal2tdnbv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Aho6iVgkIiIiIiKiVWCRiIhoC1CFoZotg3wiIiIiIiKifrBIRES0BaiNZlVmEhERERER0SqxSEREtAWoTqKqzXEzIiIiIiJaHRaJiIi2ADViVnXcoKuIiIiIiIioHywSERFtAYZWD6422ElERERERESrwCIREdEWoHKIpASDq4mIiIiIaFVYJCIi2gLChSGd9+xERERERLQKfCpBRLQFhAtD3G5GRERERESrwSIREdEWMJq1Wr5NRERERETUKyPqAyAiorW7/rxJ3PpbL0LFdnF4Zz7qwyEiIiIiok2IRSIioi1ACIFDO1gcIiIiIiKi1eO4GRERERERERERsUhEREREREREREQsEhEREREREREREVgkIiIiIiIiIiIisEhERERERERERERgkYiIiIiIiIiIiMAiERERERERERERgUUiIiIiIiIiIiICi0RERERERERERAQWiYiIiIiIiIiICICQUkZ9DC0JIaYAHI36ONbJNgDTUR8EbSo8Z6hfPGeoXzxnqF88Z6hfPGeoXzxnqF88Z1Znv5RystUHYlsk2kqEEPdIKa+M+jho8+A5Q/3iOUP94jlD/eI5Q/3iOUP94jlD/eI5s/44bkZERERERERERCwSERERERERERERi0SD8rGoD4A2HZ4z1C+eM9QvnjPUL54z1C+eM9QvnjPUL54z64yZRERERERERERExE4iIiIiIiIiIiJikWjDCSFeKoR4VAjxhBDinVEfD8WDEOKvhRBnhBA/DF02LoS4VQjxuP//Mf9yIYT4gH8O3S+EuDy6I6coCCHOEkJ8TQjxkBDiQSHEb/iX85yhloQQaSHEd4QQP/DPmff5lx8UQnzbPzf+UQhh+Zen/Pef8D9+IMrjp+gIIXQhxL1CiM/77/OcobaEEEeEEA8IIe4TQtzjX8bHJmpLCDEqhPiMEOIRIcTDQohreM5QO0KIw/79i/pvUQjxmzxnNhaLRBtICKED+DCAlwG4AMDrhRAXRHtUFBN/A+ClTZe9E8DtUspDAG733we88+eQ/9/bAHxkQMdI8WED+G0p5QUAng/gV/37Ep4z1E4FwA1SyksAXArgpUKI5wP4IwB/KqU8F8AcgLf4138LgDn/8j/1r0fJ9BsAHg69z3OGunmxlPLS0ApqPuqJIYAAAAQPSURBVDZRJ38O4MtSyucAuATe/Q3PGWpJSvmof/9yKYArABQB/Bt4zmwoFok21lUAnpBSPiWlrAL4BwCvjPiYKAaklP8JYLbp4lcC+KT/9icBvCp0+aek524Ao0KIXYM5UooDKeVJKeX3/bcL8P6g2gOeM9SG/7Nf8t81/f8kgBsAfMa/vPmcUefSZwDcKIQQAzpcigkhxF4APwbg4/77AjxnqH98bKKWhBAjAF4E4K8AQEpZlVLOg+cM9eZGAE9KKY+C58yGYpFoY+0BcDz0/jP+ZUSt7JBSnvTfPgVgh/82zyMK+CMdlwH4NnjOUAf+2NB9AM4AuBXAkwDmpZS2f5XweRGcM/7HFwBMDPaIKQb+DMB/A+D670+A5wx1JgF8VQjxPSHE2/zL+NhE7RwEMAXgE/5Y68eFEEPgOUO9eR2AT/tv85zZQCwSEcWQ9NYOcvUgNRBC5AD8C4DflFIuhj/Gc4aaSSkdvz17L7zO1udEfEgUY0KIHwdwRkr5vaiPhTaV66SUl8Mb8fhVIcSLwh/kYxM1MQBcDuAjUsrLACyjPiYEgOcMtebn4b0CwD83f4znzPpjkWhjnQBwVuj9vf5lRK2cVu2Q/v/P+JfzPCIIIUx4BaK/l1L+q38xzxnqym/l/xqAa+C1XRv+h8LnRXDO+B8fATAz4EOlaF0L4BVCiCPwxuNvgJcdwnOG2pJSnvD/fwZeTshV4GMTtfcMgGeklN/23/8MvKIRzxnq5mUAvi+lPO2/z3NmA7FItLG+C+CQvxnEgtci97mIj4ni63MA3ui//UYA/x66/Of9tP7nA1gItVdSAvg5H38F4GEp5Z+EPsRzhloSQkwKIUb9tzMAboaXZfU1AD/hX635nFHn0k8AuMN/ZY4SQkr5u1LKvVLKA/D+XrlDSvkz4DlDbQghhoQQefU2gB8F8EPwsYnakFKeAnBcCHHYv+hGAA+B5wx193rUR80AnjMbSvDxfGMJIW6BN+OvA/hrKeUfRnxIFANCiE8DuB7ANgCnAbwHwGcB/BOAfQCOAvgpKeWsXyD4ELxtaEUAb5ZS3hPFcVM0hBDXAfgmgAdQzwr5PXi5RDxnaAUhxMXwghx1eC8I/f/t3KFNBEEYhuHvTwhBQwdXwZVAARSAwNADFZBQCckJDKXQwQkKIEGiPsSO5CQ58zxuVq34s5O82Zm3ts8zs8v2l8h1ko8kD21/ZuYqyWu2+66+kty3PZ7n7Tm3mblN8tT2zsxwypqN97W8SHJo+zIzN7E3ccLM7LNdjn+Z5JjkMWufipnhDytCfybZtf1ez3xn/pFIBAAAAIDjZgAAAACIRAAAAABEJAIAAAAgIhEAAAAAEYkAAAAAiEgEAAAAQEQiAAAAACISAQAAAJDkF/g9LIbEL+CTAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":318},"id":"b0hfHNU0ec52","outputId":"64fc8046-db7c-42e5-b014-e06a95087635"},"source":["plt.figure(figsize=(20,5))\n","plt.plot(range(220,720), df[\"y\"].iloc[221:], label=\"Real\")\n","\n","plt.plot(ARIMA_forecast, label=\"ARIMA\")\n","plt.plot(range(720-24*7,720),result, label=\"Informer\")\n","plt.plot(range(720-24*7,720), predict[-24*7:], label=\"LSTMa\")\n","plt.plot(range(720-24*7,720),forecast['yhat'][-24*7:], label=\"Prophet\")\n","plt.plot(range(720-24*7,720),pred_series[:24*7+23-23]+0.00900414, label=\"Transformer\")\n","\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"a3VzMw4tIcni","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b0231cfd-232b-4b2b-b22f-9d5e000cab8f"},"source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","\n","def MAPEval(y_pred, y_true):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n","\n","def MSE(y_true, y_pred):\n","    return np.mean(np.square((y_true - y_pred)))\n","\n","def MAE(y_true, y_pred): \n","    return np.mean(np.abs((y_true - y_pred)))\n","\n","\n","\n","print('Transformer')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(pred_series[:24*7+23-23]+0.00900414, target_series+0.00900414), mean_squared_error(target_series+0.00900414, pred_series[:24*7+23-23]+0.00900414), mean_absolute_error(target_series+0.00900414, pred_series[:24*7+23-23]+0.00900414)))\n","\n","print('Informer')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(result, real[-24*7:]), mean_squared_error(real[-24*7:], result), mean_absolute_error(real[-24*7:], result)))\n","\n","print('ARIMA')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(ARIMA_forecast, df[\"y\"].iloc[-24*7:]), mean_squared_error(df[\"y\"].iloc[-24*7:], ARIMA_forecast), mean_absolute_error(df[\"y\"].iloc[-24*7:], ARIMA_forecast)))\n","\n","print('Prophet')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(forecast['yhat'][720-24*7:],df[\"y\"][720-24*7:]), mean_squared_error(df[\"y\"][720-24*7:], forecast['yhat'][720-24*7:]), mean_absolute_error(df[\"y\"][720-24*7:], forecast['yhat'][720-24*7:])))\n","\n","print('LSTMa')\n","print('-' * 40)\n","print('MAPE: {} |\\nMSE: {} |\\nMAE : {}\\n'.format(mape(predict[-24*7:],real[-24*7:]),  mean_squared_error(real[-24*7:], predict[-24*7:]), mean_absolute_error(real[-24*7:], predict[-24*7:])))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Transformer\n","----------------------------------------\n","MAPE: 243.2476282119751 |\n","MSE: 0.33213940262794495 |\n","MAE : 0.456557959318161\n","\n","Informer\n","----------------------------------------\n","MAPE: 130.20015150751988 |\n","MSE: 0.05910213912232033 |\n","MAE : 0.20482341739147097\n","\n","ARIMA\n","----------------------------------------\n","MAPE: 120.75490606454431 |\n","MSE: 0.1076510233017709 |\n","MAE : 0.23333121718323374\n","\n","Prophet\n","----------------------------------------\n","MAPE: 113.25526142901703 |\n","MSE: 0.045812485367622405 |\n","MAE : 0.19052751857312636\n","\n","LSTMa\n","----------------------------------------\n","MAPE: 134.7099663650367 |\n","MSE: 0.061121190658393734 |\n","MAE : 0.2275409489038447\n","\n"]}]},{"cell_type":"code","metadata":{"id":"Jfla6TUQd_tB"},"source":[""],"execution_count":null,"outputs":[]}]}